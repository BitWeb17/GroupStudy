* for 문 예제

public class ForTest {
    public static void main(String[] args) {
        int i;

        // for 문을 작성하는 방법
        // 1. for를 적고 소괄호를 열고 닫고 중괄호를 열고 닫는다.
        // 2. for의 소괄호 구성은 아래와 같다.
        //    (초기화; 조건; 증감부) 형식으로 구성된다.
        //    초기화 부분이 없을 수도 있으며
        //    조건이 없을 수도 있고
        //    증감부가 없을 수도 있다.
        //    모든것이 없다면 무한 루프가 될 수 있다.
        // 3. 중괄호 내부에는 while 과 마찬가지로 반복시킬 내용을 작성한다.
        
        // for 문을 보는 방법
        // for(i = 0; i < 3; i++) 의 의미는 무엇인가 ?
        // i = 0: 초기화 부분
        // 초기화 부분은 for 문 진입시 최초로 한 번만 수행된다.
        // 반복하는 도중에는 초기화 부분을 실행하지 않는다.
        // i < 3: 조건이 만족되는 동안 반복을 한다.
        // i++: 증감은 i += 2 와 같은 형식으로도 작성이 가능하다.
        
        // 동작 과정
        // 초기화: 최초로 한 번만
        // 조건: 조건이 만조되는 동안만 반복 -> 조건이 만족되면 중괄호로 이동
        // 증감부: 값을 증가하거나 감소시킴 -> 증감 이후에 조건을 확인함
        for(i = 0; i < 3; i++) {
            System.out.println("i = " + i);
            // 중괄호 내용이 완료되면 증감부로 이동한다.
        }

        for(int j = 0; j < 4; j++) {
            System.out.println("j = " + j);
        }

        System.out.println("나는 여기서도 나와 = " + i);
        // System.out.println("나는 왜 안돼 ? " + j);
        // 더 이상 main 내에서 j가 살아있는 변수가 아니기 때문이다.
    }
}



연습 문제 7.

for 를 사용해서 2의 배수만 출력하도록 프로그래밍 해보자!
방식이 두 가지가 정도 있을 수 있는데
앞서 소개했던 꼼수와 정석이 있다.
원하는 형식으로 만들어보자!

public class Exercise7 {
    public static void main(String[] args) {
        // for 를 사용해서 2의 배수만 출력하도록 프로그래밍 해보자!
        // 방식이 두 가지가 정도 있을 수 있는데
        // 앞서 소개했던 꼼수와 정석이 있다.
        // 원하는 형식으로 만들어보자!
        System.out.println("실제 조건 검사 없이 짝수 판정하기");

        for(int i = 2; i < 11; i += 2) {
            System.out.println("i = " + i);
        }

        System.out.println("if 문을 활용한 짝수 판정");

        for(int i = 1; i < 11; i++) {
            if(i % 2 == 0) {
                System.out.println("i = " + i);
            }
        }
    }
}



연습 문제 8.

1 ~ 30 까지의 숫자중 2 혹은 3의 배수는 더하고 5의 배수는 뺀다.
혼동의 여지를 방지하기 위해
10 처럼 2의 배수이면서 5의 배수가 되는 경우엔
빼기도 하고 더하기도 하므로 결론적으로 0

public class Exercise8 {
    public static void main(String[] args) {
        // 1 ~ 30 까지의 숫자중 2 혹은 3의 배수는 더하고 5의 배수는 뺀다.
        // 혼동의 여지를 방지하기 위해
        // 10 처럼 2의 배수이면서 5의 배수가 되는 경우엔
        // 빼기도 하고 더하기도 하므로 결론적으로 0
        int sum = 0;

        // Q: 도대체 언제 0 을 설정해야 하는가요 ?
        // A: 컴퓨터 초기값으로 0을 설정하지 않는다.
        //    기본적으로 컴퓨터는 초기 변수를 0으로 설정하지 않기 때문에
        //    0으로 초기화하지 않은 값은 알 수 없는 이상한 값을 가지고 있다.
        //    값을 누산하는 변수가 된다면
        //    잘못된 연산을 수행하지 않도록 0으로 초기화 해야 한다.
        
        // ex) 현재 내가 가지고 있는 박스 A
        //     현재 A는 빈 박스
        //     친구네 집 박스는 B
        //     현재 B에는 2개가 들어있음
        //     B의 내용물을 A 로 옮긴다 하면 자연스럽게 0 + 2 로 2가 된다.
        //     그러나 컴퓨터에 이를 명확하게 0으로 초기화 해주지 않으면
        //     ???(알 수 없는 미지의 값) + 2의 형식으로 진행된다.

        for(int i = 1; i < 31; i++) {
            // 더하기 파트
            if(i % 2 == 0 || i % 3 == 0) {
                sum += i;
                System.out.println("더하는 값 = " + i);
            }

            // 빼기 파트
            if(i % 5 == 0) {
                sum -= i;
                System.out.println("빼는 값 = " + i);
            }
        }

        System.out.println("결과 = " + sum);
    }
}

또 다른 버전 1

public class AlternativeExercise8 {
    public static void main(String[] args) {
        int twoThreeSum = 0;
        int fiveSum = 0;

        for(int i = 1; i < 31; i++) {
            // 더하기 파트
            if(i % 2 == 0 || i % 3 == 0) {
                twoThreeSum += i;
                System.out.println("더하는 값 = " + i);
            }
        }

        for(int i = 1; i < 31; i++) {
            // 더하기 파트
            if(i % 5 == 0) {
                fiveSum += i;
                System.out.println("빼는 값 = " + i);
            }
        }

        System.out.println("더하는 값 = " + twoThreeSum);
        System.out.println("빼는 값 = " + fiveSum);
        System.out.println("최종값 = " + (twoThreeSum - fiveSum));
    }
}



또 다른 버전 2

public class AlternativeExercise8_2 {
    public static void main(String[] args) {
        int addSum = 0, subSum = 0;

        for(int i = 1; i < 31; i++) {
            // 더하기 파트
            if(i % 2 == 0 || i % 3 == 0) {
                addSum += i;
                System.out.println("더하는 값 = " + i);
            }

            // 빼기 파트
            if(i % 5 == 0) {
                subSum += i;
                System.out.println("빼는 값 = " + i);
            }
        }

        System.out.println("총합 = " + addSum);
        System.out.println("총뺄셈 = " + subSum);
        System.out.println("결과 = " + (addSum - subSum));
    }
}



* 무한 루프(멈추지 않아 ~) 예제

public class InfinityLoopTest {
    public static void main(String[] args) {
        // 조건이 없다 ? 무 조 건
        for(;;) {
            System.out.println("가즈아 ~");
        }
    }
}



* 증감부만 있는 무한 루프 예제

public class InfinityLoopTest2 {
    public static void main(String[] args) {
        int i = 1;

        for(;; i++) {
            System.out.println("i = " + i);
        }
    }
}



연습 문제 9.

주사위 게임을 해보자!
이 주사위 게임의 규칙은 다음과 같다.
홀수가 나오면 주사위를 계속해서 굴릴 수 있고
마지막에 짝수가 나오면 주사위를 멈춘다.
이때 마지막 주사위 눈금을 구하도록 프로그래밍 해보자!
(마지막 눈금은 모든 주사위 눈금의 합산값이다)

9-1) 먼저 주사위 눈금을 출력하도록 프로그래밍 해본다.

public class Exercise9_1 {
    public static void main(String[] args) {
        // 먼저 주사위 눈금을 출력하도록 프로그래밍 해본다.
        int dice = (int)(Math.random() * 6) + 1;

        System.out.println("주사위 눈금 = " + dice);
    }
}



9-2) 주사위 눈금이 홀수인지 판정해본다.

public class Exercise9_2 {
    public static void main(String[] args) {
        // 주사위 눈금이 홀수인지 판정해본다.
        int dice = (int)(Math.random() * 6) + 1;

        System.out.println("주사위 눈금 = " + dice);

        if(dice % 2 == 0) {
            System.out.println("짝수 입니다.");
        } else {
            System.out.println("홀수 입니다.");
        }
    }
}



9-3) 먼저 무한루프에서 주사위가 굴러가도록 만든다.

public class Exercise9_3 {
    public static void main(String[] args) {
        // 먼저 무한루프에서 주사위가 굴러가도록 만든다.
        for(;;) {
            int dice = (int)(Math.random() * 6) + 1;

            System.out.println("주사위 눈금 = " + dice);

            if(dice % 2 == 0) {
                System.out.println("짝수 입니다.");
            } else {
                System.out.println("홀수 입니다.");
            }
        }
    }
}



9-4) 특정 조건에서 반복이 멈추도록 만들어보자!

public class Exercise9_4 {
    public static void main(String[] args) {
        // 특정 조건에서 반복이 멈추도록 만들어보자!
        for(;;) {
            int dice = (int)(Math.random() * 6) + 1;

            System.out.println("주사위 눈금 = " + dice);

            if(dice % 2 == 0) {
                System.out.println("짝수 입니다.");
                break;
            } else {
                System.out.println("홀수 입니다.");
            }
        }
    }
}



9-5) 내용을 결합하여 9번 문제를 마무리해보자!
       
public class Exercise9_5 {
    public static void main(String[] args) {
        // 내용을 결합하여 9번 문제를 마무리해보자!
        int diceSum = 0;

        for(;;) {
            int dice = (int)(Math.random() * 6) + 1;

            System.out.println("주사위 눈금 = " + dice);

            diceSum += dice;

            if(dice % 2 == 0) {
                // diceSum += dice;
                System.out.println("짝수 입니다.");
                break;
            } else {
                // diceSum += dice;
                // Q: 위의 주석 달린 부분 처럼 하면 안되는 이유 ?
                // A: 안될 이유는 딱히 없긴합니다.
                //    효율성 측면에서 두 번 적어야 한다는 차이가 있습니다.
                //    어차피 양쪼에서 다 진행할 작업이라면
                //    한 번만 적어서 보다 효율적으로 처리하는 부분입니다.
                System.out.println("홀수 입니다.");
            }
        }

        System.out.println("최종 결과 = " + diceSum);
    }
}
