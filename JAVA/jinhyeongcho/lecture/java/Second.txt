public class BitOperation {
    public static void main(String[] args) {
        System.out.println("비트 연산자 예제입니다.");

        int num1 = 5, num2 = 10;

        // &은 비트 연산자 AND를 의미함
        // 비트 연산의 특징: 같은 자리수에 1이 배치된 경우에만 1이며
        // 그 외의 케이스는 모두 0이다.
        // 집합으로 보자면 교집합
        int res = num1 & num2;
        System.out.println("num1 AND num2 = " + res);

        // |는 비트 연산자 OR를 의미함
        // OR 비트 연산의 특징:
        // 같은 자리수에 하나라도 1이 배치되어 있다면 1이고
        //그렇지 않다면 0이 된다.
        // 집합으로 보자면 합집합
        res = num1 | num2;
        System.out.println("num1 OR num2 =" + res);


        // ^는 비트 연산자 XOR를 의미함
        // XOR 비트 연산의 특징:
        // 서로 일치하는것이 없는 경우에만 1이 된다.
        res = num1 ^ num2;
        System.out.println("num1 XOR num2 =" + res);


        // ~은 비트 연산자 NOT을 의미함
        // NOT 비트 연산의 특징"
        //모든것을 부정한다.
        // 참의 부정 = 거짓
        //거짓의 부정 = 참
        res = ~num1;
        System.out.println("NOT num1 =" + res);

        //2진수 체계
        //Q: 왜 2진수를 알아야 하나요?
        //A: 비트 연산자는 2진수를 기반으로 동작하기 때문이다.

        // ex) 10진수 3421
        //         3 2 1 0 ------10^n
        //   3 4 2 1

        // 핵심개념 2진수는 각 자리에 두가지 숫자만 올 수 있다.
        //          2진수는 0~1 즉 두개의 숫자만 올 수 있다.
        // ex2)2진수로 10진수 10을 표현해보자
        //   3 2 1 0 ------- 2^n
        //   8 4 2 1 ------- 계산된 2의 n승 자리
        //   1 0 1 0

        // 10진수를 2진수로 만드는 가장 빠른 방법

        //1. 변환하고자 하는 숫자를 선정한다.
        //예로 23을 들어보자!
        //2. 변환하고자 하는 숫자보다 작은 가장 큰 2의 n승을 선택한다.
        // 2^n = 1,2,4,8,16,32,64
        // 현재 예에서는 16이 선택, 16=2^4
        //3. 변환하고자 하는 숫자에서 2번에서 선택한 숫자를 뺀다
        // 24-16 =7
        //4. 나머지가 0이 될때까지 2~3번을 반복한다.
        // 7을 선정하고 근접한 최대 2의 n승은 4다.
        //그러므로 7-4=3이된다. 4는 2^2
        // -> 3을 선정하고 근접한 최대 2의 n승은 2이다.
        //3-2=1
        //1= 2^0승이다.
        // ==10110(2) =23

        //숫자 10 --2진수로 1010(2)
        //숫자 5  --2진수로 0101(2)

        //     1010
        // AND 0101
        // 0   0000

        // 10     1010(2)
        // 5  OR  0101(2)
        // 15     1111(2)
        // 16 =  10000(2)

        // 10     1010(2)
        // 5  XOR 0101(2)
        // 15     1111(2)

        // NOT 5 0000 0101
        //    -6 1111 1010

        //??? 이게 뭐지?
        // *일단 컴퓨터에서 음수를 표현하는 방법

        //int는 정수형임을 모두 알고 있지만 음수 표현법은 좀 별개다.
        //int는 4바이트 정수형 데이터 타입
        //bytesms 1바이트 데이터 타입
        //float은 4바이트 실수형 데이터 타입
        //double은 8바이트 실수형 데티어 타입.

        // 바이트란
        // 컴퓨터가 표현할수 있는 최소 단위: 비트:(bit)
        // 비트(bit)가 8개 모이면 바이트(byte)가 된다.
        // 그러므로 우리가 배웠던 int는 32비트가 딘다.
        // 그래서 사실 비트 연산시 32개의 비트를 모두 적오놓은것이 정석이지만
        // 적을것이 너무 많기 때문에 줄여서 8개 정도로 적어놓고 계산한다.

        //   7    6   5   4  3  2  1  0
        //   128  64  32 16  8  4  2  1
        //   0    0    0  0  0  1  0  1  숫자 5를 2진수로 표현
        //   1    1    1  1  1  0  1  0  =

//
//        우선 int형은 맨 앞에 비트(bit)가 부호를 의미한다.
//                맨 앞 bit가 0이면 양수, 1이면 음수입니다.
//
//        10진수 6 은 2진수로 110(2)이므로
//        1 000......... 110(2) 이게 왜 -6 이 아닐까 ?
//
//        위의 케이스가 안되는 이유는 0 때문입니다.
//                +1 + (-1) = 0
//
//        0000 0001    = 1
//        1000 0001    = -1 +
//                ---------------------------
//        1000 0010    = 0???
//
//        1 1111 111
//        0000 0001    = 1
//        1111 1111    = -1 +
//                -------------------------
//        0000 0000    = 0
//
//        1 1111 11
//        0000 0110    = 6
//        1111 1010    = -6 +
//                -------------------------
//        0000 0000    = 0
//
//        1 1111 1
//        0000 1100    = 12
//        1111 0100    = -12 +
//                -------------------------
//        0000 0000    = 0
//
//        1 1111 111
//        0000 1101    = 13
//        1111 0011    = -13 +
//                -------------------------
//          0000 0000    = 0
//
//
//
//                * 어떤 숫자의 음수를 빠르게 만드는 방법
//
//        1. 먼저 만들고 싶은 음수의 양수값을 이진수로 작성한다.
//        2. 가장 낮은 자리에 있는 1을 찾는다.
//        3. 해당하는 1을 찾은 자리까지의 값은 유지한다.
//        4. 나머지 값은 전부 반전한다(참 -> 거짓, 거짓 -> 참)
//    [ 0 은 1 이 되고, 1 은 0 이 된다 ]
//
//
//
//        연습 문제 1.
//
//                -20을 2진수로 표현해보자!
//                int는 너무 기니까 8 비트만 표현하도록 한다.
//
//           0001 0100    20
//           1110 1100   -20

//                연습 문제 2.
//           0001 1101    29
//           1110 0011   -29
//                -29를 2진수로 표현해보자!

//       XOR 과 OR 는 어떤 차이점이 있는걸까?
//          1001(2)=9  OR
//          1101(2)= 13
//          1101(2)= 13
//
//          1001(2)= 9 XOR
//          1101(2)= 13
//        ---------------
//          0100(2)= 4

//        아스키코드 A=65 a=97 둘사이엔 32차이//       B=66, b=98   32차이.
     }
}
import java.util.Scanner;

public class IfBasedRangeProblem {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        System.out.println("점수를 입력하세요: ");
        int num = scan.nextInt();

        System.out.println("입력한 점수는 " + num);
        //90~ 100: A, 80~ 89: B, 70~ 79: C, 60~69: D, 나머지: F

        // 주의점: if-else if 사용시 히든조건을 매우 조심해야한다.
        //          잘못 작성할 경우 프로그램 논리가 통채로 잘못될 가능성이 있고
        //          디버깅을 통해 오류를 잡는것이 오래 걸릴 가능성이 높아진다.

        //  팁: 가장 범주가 큰 녀석을 위로 올리고
        //       그것보다 작은 범주의 크기들을 서서히 단계단계 내리며 작성한다.
        // num <=100
        if (num > 100 ){ //num이 100보다 크다면
            System.out.println("잘못된 입력입니다.");
        } else if (num >= 90){ // num이 90 이상이라면 && (100보다 작거나 같다.)
            System.out.println("당신의 등급은 A입니다.");
        }  else if (num >= 80){ // num이 80 이상이라면 && (90보다 작다.)
            System.out.println("당신의 등급은 B입니다.");
        } else if (num >= 70){ // num이 70 이상이라면 && (80보다 작다.)
            System.out.println("당신의 등급은 C입니다.");
        } else if (num >= 60){ // num이 60 이상이라면 && (70보다 작다.)
            System.out.println("당신의 등급은 D입니다.");
        }  else if (num >= 0){ // num이 0 이상이라면 && (60보다 작다// .)
            System.out.println("빵야 빵야 F.");
        } else  { //0보다 작다면
            System.out.println("잘못된 입력입니다.");
        }
    }
}

import java.util.Scanner;

public class IfTest {
    //psvm
    public static void main(String[] args) {
        // sout
        System.out.println("안녕, 난 인텔리제이야 ~");

        String str1 = "짝수";
        String str2 = "홀수";

        Scanner scan = new Scanner(System.in);

        // 키보드 입력으로 받은 숫자를 num 변수에 대입
        int num = scan.nextInt();

        // 문자열과 숫자가 + 되면
        // 자동으로 숫자는 문자열이 되어서 처리된다.
        System.out.println("당신이 입력한 숫자는 ="+ num);
        System.out.println("당신이 입력한 숫자는 ="+ num + num);
        // 실제로 숫자를 처리하고자 한다면
        // 연산의 순서를 아래와 같이 변경하여 작업하면 된다.

        System.out.println("당신이 입력한 숫자는 ="+ (num + num));
        // 3항 연산자를 작성하는 방법
        // 먼저 3항 연산자는 아래와 같은 형식으로 구성된다.
        // 조건 ? 참인경우 : 거짓인경우

        // 아래 케이스의 경우엔 조건에 따라 결과값이 바뀌는데
        // 이 값을 res라는 변수에 대입한 것이다.

        String res = num % 2 ==0 ? str1 : str2;
        System.out.println(num +"은" + res + "입니다!");
    }

}


import java.util.Scanner;

public class LogicalOperation {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.println("숫자를 입력하세요:");
        int num =scan.nextInt();

        //num % 2 == 0 :2로 나누면 나머지가 0인가?
        //num % 3 == 0 :3으로 나누면 나머지가 0인가?
        // && 논리연산자 AND
        // 논리 연산자 AND는 두개의 조건이 모두 참인 경우에만 참이다.
        // 즉 위의 두 가지 질문에 대한 답이 모두 참이어야만
        // 아래의 if문이 동작하게 된다.

        if((num % 2 == 0) && (num % 3 ==0)){
            System.out.println(num + "은 6의 배수다!");
        } else{
            System.out.println(num+ "은 6의 배수가 아니다!");
        }

        // || 논리 연산자 OR
        // 둘 중 하나라도 참이라면 참

        if((num % 2 == 0) || (num % 3 ==0)){
            System.out.println(num + "은 2 혹은 3의 배수다!");
        } else{
            System.out.println(num+ "은 2 혹은 3의 배수가 아니다!");
        }

        // ! 논리 연산자 NOT
        // 결과 자체를 부정한다.
        if(!(num % 2==0)){
            System.out.println(num +"은 2의 배수가 아니다!");
        } else {
            System.out.println(num + "은 2의 배수다!");
        }
    }
}


import java.util.Scanner;

public class Practice5Answer {
    public static void main(String[] args) {
        System.out.println("값을 입력해주세요:");
        Scanner scan = new Scanner(System.in);
        int num = scan.nextInt();
         if(num == 0){
            System.out.printf("0입니다.");
        }
         // Q : 조건식에 괄호가 없으면 왜 오류인가?
        //  A : 아래 코드를 보면 빨간줄이 나오는데
        //      빨간줄에 커서를 갖다 대면 required type : boolean
        //      provided type : int 라는 차이 보일것이다.
        //      컴퓨터가 요구하는 타입은 boolean(논리형)인데
        //      사용자가 작성하여 제공한 타입은 int 형이기 때문에 오류!

        //      case B의 경우엔'==' 같은가요?라는 질문이다.
        //      이질문에 대한 답은 yes(true) 혹은 no(false)뿐이다

        //      boolean은 참 혹은 거짓을 표현하는 데이터타입이다.

        //      case C의 경우엔 에러 메세지가 아래와 같다.
        //      Operator '&' cannot be applied to 'int','boolean'
        //      비트 연산자 AND는 int와 boolean간에 적용이 불가능하다.
        //      산술 비트 연산은 정수형 변수 혹은 상수(3,5 등등)끼리 가능하다.
        //      연산자 우선순위가 & 보다 == 이 높아서 이런현상이 발생

        //      Q : case A의 괄호는 조건이 아닌가요?
        //      A : 단순히 산술 연산식입니다.
        //          조건이 되려면 case B나 C처럼 질문을 해야함.
        //          그러면 질문의 대한 답이 false(거짓) 혹은 true(참)으로 나옴

        //      Q : 2의 n승을 판정하는 알고리즘이 이해가 안갑니다.
        //      A : 일단은 2의 n승이 가지는 특성을 살펴봐야 한다.
        //          대표적인 특성이 2의 n승과 2의 n승 -1 의 특성

        //       15 = 01111 (2)
        //       16 = 10000 (2)

        //       7 = 00111 (2)
        //       8 = 01000 (2)

        //       3 = 00011 (2)
        //       4 = 00100 (2)

        //      2진수 특성상 2의 n승에서 1을 빼면
        //      해당 자리수가  0 이 되고 나머지 아래의 자리값은 모두 최대값이 된다.

        // Q : (num ^ (num + 1)) == (num + (num + 1))는 안될까요?
        // A : (num & (num-1)) == 0 위의 케이스와 현재 케이스의 비교시
        // 연산량이 위의 케이스가 더 많이.
        // 프로그램 최적화 차원에서
        // 위의 케이스보다 아래의 케이스가 조금 더 먼저입니다.
        // 문제를 풀 수는 있습니다-속도가 조금 떨어질뿐
        // Err : + 1로 할 경우 입력 값이 2 ^ n-1 필수 참이 됨
        // Sol : (num ^ (num-1)) == (num + (num-1))
        // 위의 형식으로 입력 값을 2 ^ n 일 때 참
        // 아래 부울 코드는 증명
        boolean res = (num ^ (num-1)) == (num + (num-1));
        System.out.println ( "res ="+ res);



        //      case A : if(num & (num -1))
        //      case B : if((num & (num -1)) == 0)
        //      csse C : if(num &(num -1) == 0)


        int res2 = num & (num - 1);
         if (res2 == 0) {
             System.out.printf(" 입력숫자 " + num + "은 2의 n승입니다.");
         }else {
                 System.out.printf(" 입력숫자 " + num +"은 2의 n승이 아닙니다.");
             }
    }
}
import java.util.Scanner;

public class Practice6Answer {
    public static void main(String[] args) {
        // 1500이 입력되면 정지하는 시스템이 있다.
        // 입력값은 1000 ~ 2000 사이의 숫자다.
        // (아직 랜덤을 배우지 않았으므로 키보드 입력으로 처리한다)
        // 1470 이하의 값을 넣으면 후진
        // 1530 이상의 값을 넣으면 전진한다.
        // 1471 ~ 1529 전체가 정지 구간
        // 999 이하, 2001 이상도 정지
        Scanner scan = new Scanner(System.in);

        System.out.println("제어 pwm을 입력하세요:");
        int pwm = scan.nextInt();
        System.out.println("당신이 입력한 pwm 값:" + pwm);

        if(pwm > 2000){
            System.out.println("잘못된 값 입력!");
        } else if(pwm >= 1530){
            System.out.println("전진");
        } else if(pwm > 1470){
            System.out.println("정지");
        } else if(pwm > 999){
            System.out.println("후진");
        } else{
            System.out.println("잘못된 값 입력!");
        }
    }
}
import java.util.Scanner;

public class Practice3456 {
    public static void main(String[] args) {
        //연습문제 3 Scanner를 활용하여 사용자 입력을 받도록 만든다.
        //입력 받은 값을 출력해보자.

       System.out.println("연습문제3");
        System.out.println("값을 입력해주세요:");
        Scanner scan = new Scanner(System.in);
        int num = scan.nextInt();
        System.out.println(num);

        //연습문제 4 3번에서 받은 입력값이 5로 나눠서 나머지가 1이 되는 숫자인지 판별해보자
        System.out.println("연습문제4");
        String str1 = "5로 나눈값의 나머지가 1이다";
        String str2 = "5로 나눈값의 나머지가 1이 아니다";
        String  num2 = num % 5 ==1 ? str1 : str2;
        System.out.println(num + "은/는 " + num2 +"!" );


        //연습문제 5 2의 n승을 판별하는 프로그램을 만들어보자.
        System.out.println("연습문제5");
        System.out.println("값을 입력해주세요:");
        Scanner ad = new Scanner(System.in);
        int num4 = ad.nextInt();
        boolean num5 = (num4&-num4)==num4;
        if  (num5) {
            System.out.println("2의 n승입니다. ");
        }else {
            System.out.println("2의 n승이 아닙니다.");
        }


        //연습문제 6 1500이 입력되면 정지하는 시스템이 있다.
        //입력값은 1000~2000 사이의 숫자다.
        //(아직 랜덤을 배우지 않았으므로 키보드 입력으로 처리한다.)
        System.out.println("연습문제6");
        System.out.println("값을 입력해주세요:");
        Scanner scaned = new Scanner(System.in);
        int number = scaned.nextInt();
        boolean a1 = number >= 1000;
        boolean a2 =  number <= 2000;
        boolean answer= a1 &&  a2;

        if(answer ){
            System.out.println("입력값: " + number );
        } else{
            System.out.println("잘못된 값입니다.");
        }
//  다시 되돌리기 기능을 쓰면 좋을거같다. *질문사항)
//  참으로 나온 값이면 아래 코딩을 실행
        boolean a =  number <= 1470;
        boolean b =  number >=1530;
          if (a){
                  System.out.println("후진");
        } else if (b){
                  System.out.println("전진");
        }
          else{
                  System.out.println("반응없음");}



    }
}
public class PrefixSuffixOperation {
    public static void main(String[] args) {
         int num = 3;

         // 전위 연산자는 해당 라인에서 실행된다.
        System.out.println("전위 연산자: " + (++num));
        System.out.println("전위 연산자: " + (++num));
        System.out.println("결과: " + num);

        num =3;

         // 후위 연산자는 해당 라인 이후에 즉각 실행된다.
        System.out.println("후위 연산자:" + (num++));
        System.out.println("후위 연산자:" + (num++));
        System.out.println("결과:" + num);
    }
}
public class ShiftOperation {
    public static void main(String[] args) {
        System.out.println("쉬프트 연산자 예제!");

        // final 이란 무엇인가? 값을 고정시키는 역하을 수행한다.
        // 그런데 왜 사용하는 것일까?
        //매직 넘버
        // 공장에는 생산라인이 5개 있다.
        // 사업을 따내서 생산라인이 8개 되었음
        // 결국 유지 보수를 편하게 하기 위해 사용한다.
        final  int SCALE_FACTOR1 = 2;
        final  int SCALE_FACTOR2 = 3;
        final  int SCALE_FACTOR3 = 1;
        int num = 10, num2 = 5;

        //SCALE_FACTOR1 += num2;
        System.out.println("SCALE_FACTOR1 = " + SCALE_FACTOR1);

        // 쉬프트 연산도 2진수와 연결이 된다.
        // 숫자 10 - 0000 1010 을 왼쪽 쉬프트로 2칸이동한다.
        // 결과 40 - 0010 1000 이 된다.
        // 2칸 올라올때 빈 공간은 0으로 채워지고
        // 넘치는 공간은 버린다.
        // 3칸 이동
        //  결과 80 - 0101 0000 이 된다.
        // 쉬프트 한칸당 2의 n승이 곱해지는 것을 볼 수 있다.

        System.out.println("10 << 2 = " + (num << SCALE_FACTOR1));
        System.out.println("10 << 3 = " + (num << SCALE_FACTOR2));
        System.out.println("5 >> 1 = " + (num2 >> SCALE_FACTOR3));
        // 숫자 5 - 0000 0101 이며 오른쪽으로 1칸 이동한다.
        // 결과 2 - 0000 0010 이 된다.
        // 우리가 예산한 것은 2.5지만 실제로는 2가 나왔다.
        // 이유는 쉬프트 연산이 정수에서만 가능하기 때문이다.
        // 주의점: 곱셉은 2의 n을 곱하면 되지만
        //         나눗셈의 경우엔 나머지를 버리고 몫만 취한다.

        // 쉬프트에 의해 데이터가 사리지는 것을 확인할 수 있는 예
        // 원래는 5 << 1과 같기 때문에 10이 나와야 하지만
        // 데이터가 사라져서 8이 나오는 것을 목격할 수 있다.
        System.out.println("(5>>1) << 2 =" + ((num2 >> SCALE_FACTOR3) <<SCALE_FACTOR1));
    }
}
import com.sun.org.apache.bcel.internal.generic.SWITCH;

import java.util.Scanner;

public class SwitchCaseStatement {
    public static void main(String[] args) {
        System.out.println("switch 문을 배워봅시다 ~");

        Scanner scan = new Scanner(System.in);
        int num = scan.nextInt();

         if((num >100)||(num <0)) {
            System.out.println("잘못된 값을 입력하였습니다.");
         }

        // (int)(num / 10.0f)
        // 위의 코드는 결과를 강제로 int 형으로 처리하는 방식.
        // 10.0f라는 것이 보이는데
        // 실수형에 f가 오면 float 타입을 의미한다.
        // 결국 f를 쓰지않으면 double 타입을 의미한다.
        // 위의 방식을 강제 캐스팅이라고도 하며 Type Casting이라 부른다.
        int fnum =(int)(num / 10.0f);
        System.out.println("실수형을 정수형으로 만든 값 ="+ fnum);

        //90~ 100: A, 80~ 89: B, 70~ 79: C, 60~69: D, 나머지: F
        //90 ~ 100 / 10 = 9.0 ~ 10.0
        //80 ~ 89 / 10 = 8.0 ~ 8.9
        //70 ~ 79 / 10 = 7.0 ~ 7.9
        //60 ~ 69 / 10 = 6.0 ~ 6.9
        //0 ~ 59 / 10 = 0.0 ~ 5.9


        //break가 case 마다 있는것을 볼 수 있다.
        //break가 없는 경우
        //아래와 같이 10과 9인경우엔
        //10 혹은 9에 대해 모두 같은 처리를 하겠음을 의미한다.
        //break를 만나기 전까지는 동작이 유지된다.
        switch (fnum){
            case 10:
            case 9:
                System.out.println("당신의 등급은 A");
                break;
            case 8:
                System.out.println("당신의 등급은 B");
                break;
            case 7:
                System.out.println("당신의 등급은 C");
                break;
            case 6:
                System.out.println("당신의 등급은 D");
                break;
            default:
                System.out.println("총 맞았습니다 F 빵야빵야");
                break;
        }
    }
}

//  switch 문 작성 방법
// 1.switch를 적고 소괄호를 열고 닫고 중괄호를 열고 닫는다.
// 2.소괄호 내부에는 조건(케이스가 될 숫자 등등)을 작성한다.
// 3.중괄호 내부에는 각각의 케이스를 'case 경우:' 로 작성한다.
// 4.각각의 케이스에서 동작할 코드를 작성하고 break한다.
// 5.필요하다면 break를 빼고 묶을 수도 있다.


// Q : switch문은 언제 많이 사용하나요?
// A : 케이스가 뚜렷한경우엔 세세한 조작을 수행할 수 있다.
//      그래서 대표적으로 컴파일러나 IDE 개발시 많이 나타난다.

// Q : switch 문에서 default의 용도는 무엇인가요?
// A : case 각각의 케이스들을 적는다고 하였는데
//     해당하는 케이스가 하나도 없을 경우 defualt가 존재한다.

