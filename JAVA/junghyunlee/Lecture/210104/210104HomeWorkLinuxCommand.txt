ls(list) - 사용법
리눅스에서는 ls명령어를 사용하여 디렉토리에 있는 내용(디렉토리, 파일 등)을 확인한다. 
윈도우(또는 도스)의 dir 명령과 비슷하다.(리누스에도 dir 명령이 있다.)

ls 입력시 - 현재 디렉토리에 있는 내용을 출력한다.
ls -a 옵션 (all) : 숨겨진 파일이나 디렉토리도 보여준다.

ls -A 옵션 : .와 ..을 제외하고 출력한다.

ls -b 옵션 : 알파벳 순으로 출력한다.

ls -B 옵션 : ~로 끝나는 백업파일을 제외하고 출력한다.

ls -c 옵션 : 마지막으로 변경된 시간을 출력한다.

ls -C 옵션 : 파일이나 디렉토리를 열로 출력한다. [이건 직접 확인 필요]

ls -d 옵션 : 지정 경로에 있는 최상위 디렉토리만 출력한다.

ls -D 옵션 : emacs를 위한 출력행태를 생성한다.

ls -f 옵션 : 정렬하지 않고 출력한다. 컬러옵션을 해제한다.

ls -F 옵션 : 실행파일은 *, 경로 /, 소켓=, 링크 @ 등의 지시자로 출력한다.

ls -g 옵션 : 사용자 권한을 출력하지 않는다.

ls -G 옵션 : -l 옵션과 같이 사용시 그룹권한을 출력하지 않는다.

ls -h 옵션 (human) : K, M, G 단위를 사용하여 파일 크기를 사람이 보기 좋게 표시한다.

ls -H 옵션 : 심볼릭 링크의 실제 참조하는 목록을 출력한다. [이건 직접 확인 필요]

ls -i 옵션 : 파일의 인덱스 값을 출력한다.

ls -I (대문자 i) 옵션 : 지정 파티션을 제외하고 출력한다.

ls -k 옵션 : 용량을 킬로바이트로 출력한다.
ls -l 옵션 (long) :  자세한 내용을 출력한다. 내용 > 퍼미션(권한), 포함된 파일수, 
                        소유자, 그룹, 파일크기, 수정일자, 파일 이름

ls -L 옵션 : 심볼릭 링크의 정보를 출력할때 원본 파일의 정보를 출력한다.

ls -m 옵션 : 콤마로 구분하여 출력한다.

ls -n 옵션 : 사용자와 그룹권한을 숫자로 표시한다.

ls -N 옵션 : 원래의 이름 형식으로 출력한다. [이건 직접 확인 필요]

ls -i 옵션 : 그룹권한을 출력하지 않는다.

ls -p 옵션 : 디렉토리에 /를 추가한다.

ls -q 옵션 : 그래픽이 아닌 문자 대신에 ?를 출력한다. [이건 직접 확인 필요]

ls -Q 옵션 : 파일, 디렉토리를 쌍따옴표 안에 출력한다.

ls -r 옵션 : 반대로 출력한다.
ls -R 옵션 (recursive) : 하위 디렉토리까지 출력한다.

ls -s 옵션 : 블록에 할당된 크기를 출력한다.

ls -S 옵션 (size) : 파일 크기 순으로 정렬하여 출력한다. ls -r 옵션 (reverse) : 거꾸로 출력한다. (ls 명령어의 기본은 알파벳 순서다.)

ls -t 옵션 : 파일이 수정된 시간 기준으로 정렬하여 출력한다.

ls -T 옵션 : 8대신 COLS을 지정하여 출력한다.

ls -u 옵션 : -lt와 같이 사용시 생성 시간 기준으로 출력하고 -l과 사용시 생성시간 출려갛고 이름순으로 출력한다.

ls -U 옵션 : 컬러옵션을 유지하면서 정렬하지 않고 출력한다.

ls -w 옵션 : width 길이를 설정하여 출력한다.

ls -x 옵션 : 상세출력되는 리스트를 파일이름으로 하나의 라인에 출력한다.

ls -X 옵션 : 확장자의 알파벳순으로 정렬하여 출력한다.

ls -Z 옵션 : SELinux 보안 커텍스트를 출력한다.

--help : 도움말을 출력한다.

--version : 버전 정보를 출력한다.

ls 명령어 u, c 옵션 

ls -l 명령은 기본적으로 mtime(수정시간)을 출력한다.

ls -lu : u 옵션을 사용하면 atime(접근 시간)을 출력한다.

ls -lc : c 옵션을 사용하면 ctime(변경 시간)을 출력한다.

[리눅스 ls 명령어 활용 방법]

ls -al 방식을 가장 많이 사용한다. : ls -al/home/ 과 같이 출려갛고 싶은 디렉토리를 지정할 수 있다.

ls -alSrh : 다양한 조합으로 ls 명령어를 사용할 수 있다.

             해석 > 숨겨진 파일(a)까지 포함해서 파일크기(S) 역순(r)으로 보기 좋게(h) 자세히(l) 보여주세요

ls - v*.c : 위 명령은 'v'로 시작하고 '.c'로 끝나는 디렉토리 내용을 출력한다.

             *, ?와 같은 와일드카드를 활용하면 출력할 내용을 지정할 수 있다.

ls > file.txt : 리다이렉션(>,>>)를 사용하여 디렉토리 내용을 파일에 저장할 수 있다.




mkdir : 새로운 디렉토리를 생성하는 명령어입니다.

[옵션 정리]

mkdir -m 옵션 : 디렉토리의 접근 권한을 설정한다.

mkdir -p 옵션 : 여러 덱스의 하위 디렉토리를 생성시에 사용한다.

mkdir -v 옵션 : 디렉토리 생성시 메세지를 출력한다.

mkdir -z 옵션 : SELinux 보안 컨텍스트 설정을 한다. [직접 확인 필요]

mkdir --help 옵션 : 도움말을 출력한다.

mkdir --version : mkdir 정보를 출력한다

[명령어 사용법]

리눅스에서는 mkdir명령으로 디렉토리를 생성할 수 있다.

ex1) mkdir dir1 : 현재 디렉토리에 dir1 디렉토리를 만든다.

ex2) mkdir dir2 : 한번에 여러개의 디렉토리를 생성할 수 있다.

mkdir -p dir1/dir2 : 디렉토리를 만들 떄 상위(부모) 디렉토리가 없으면 만든다.(tree 명령어를 사용하면 디렉토리, 파일 구조를 트리 형식으로 볼 수 있다.

mkdir -m 700 dir5 : 디렉토리를 만들때 권한까지 지정한다.

리눅스에서는 rmdir명령으로 비어있는 디렉토리를 생성할 수 있다.

ex1) rmdir dir1 : 현재 디렉토리에 dir1 디렉토리를 삭제한다.

ex2) rmdir dir2 : 한번에 여러개의 디렉토리를 삭제할 수 있다.

rmdir -p dir1/dir2 : 디렉토리를 삭제할 때 상위 디렉토리도 함께 삭제한다. (다른 디렉토리나 파일이 존재할 경우 상위 디렉토리는 삭제되지 않는다.)

rm -r dir1 : 파일이 들어있는 디렉토리를 삭제할 때는 rm -r명령을 사용한다. (위험한 명령이니 사용할때 주의해야합니다) : rmdir명령으로는 파일이 들어있는 디렉토리를 삭제할 수 없다.



mv 명령어

리눅스에서는 mv 명령을 이용하여 파일 이동(move)을 할 수 있습니다. 윈도우 환경에서는 마우스로 드래그&드롭을 활용하여 파일 이동을 쉽게 할 수 있습니다. 일반적으로 리눅스 서버 환경에서는 Desktop GUI 환경을 사용하지 않기 때문에 마우스 없이 파일을 복사해야 합니다.

같은 폴더에서 파일, 디렉토리 이동을 하는 경우 이름변경 효과가 있습니다. 현재 원본 파일이 있는 경로에 이름을 다르게 주어 mv 시키면 파일명을 다르게 하여 원본 파일 경로에 이동시키는 것이기 때문에 결과적으로 파일명을 바꾸는 동작과 같습니다.

[옵션 정리]

a,b 디렉토리가 아래와 같은 상태일때 mv옵션을 사용하였습니다.

a:
aa bb

b:
bb bbb
 

mv --backup 옵션 : 지정 위치에 동일 파일이 있을 경우 백업 후 이동한다.

$ mv --backup a/bb b/bb : 

a:
aa

b:
bb bb~ bbb


mv -b 옵션 : --backup옵션과 동일, 지정 위치에 동일 파일이 있을 경우 백업 후 이동한다.

$ mv --backup a/bb b/bb : 

a:
aa

b:
bb bb~ bbb
 

mv -f 옵션 : 지정 위치에 동일 파일이 있을 경우 덮어 쓸때 묻지 않는다.

$ mv -f a/bb b/bb :
$ ls a b

a:
aa

b:
bb bbb
 

mv -f 옵션 : 지정 위치에 동일 파일이 있을 경우 덮어 쓸때 물어본다.

$ mv -i a/bb b/bb

mv: overwite ??b/bb??? y

$ ls a b

a:
aa

b:
bb bbb
 

mv -i 옵션 : 지정 위치에 동일 파일이 있을 경우 덮어 쓸때 물어본다.

$ mv -i a/bb b/bb

mv: overwrite ??b/bb??? y

$ ls a b

a:
aa

b:
bb bbb


mv -n 옵션 : 지정 위치에 동일 파일이 있을 경우 이동하지 않는다.

$ mv -n a/bb b/bb
$ ls a b

a:
aa bb

b:
bb bbb


mv -s 옵션 : 백업파일 생성시 ~말고 원하는 단어를 지정한다.

$ mv -S zz a/bb b/bb
$ ls a b

a:
aa

b:
bb bbb bbzz
 

ms -t 옵션 : 지정된 디렉토리로 이동 시킨다.

$ mv -t a b
$ ls a b

ls: cannot access b: No such file or directory

a:
aa b bb

## -t 옵션으로 지정된 a폴더에 b가 이동된다.
## -t 옵션은 폴더만 지정되므로 파일지정시 에러발생
 

ms -T : 지정된 대상을 원본파일로 인식해서 이동 시킨다.

$ mv -T a/bb b/bb
$ ls a b

a:
aa

b:
bb bbb

# -T 옵션시 디렉토리 지정 안됨.


mv -u 옵션 : 파일을 변경된 경우에만 이동한다.

$ mv -u a/bb b/bb
$ ls a b

a:
aa bb

b:
bb bbb


mv -v 옵션 : 파일 이동시 결과를 출력한다.

$ mv -v a/bb b/bb

??a/bb?? -> ??b/bb??
$ ls a b

a:
aa

b:
bb bbb


[명령어 사용법]

mv file1 file2 : file1 파일을 file2 파일로 이름변경합니다.

mv file1 dir1/ (앞에 파일이 오고 뒤에 디렉토리가 오는 경우) : fiel1 파일을 dir1 디렉토리로 이동합니다. mv file1 file2 dir1/ 여러개의 파일을 한번에 이동시킬 수 있습니다.

mv dir1/ dir2/ : dir1 디렉토리를 dir2 디렉토리로 이름을 변경합니다.



tar명령어
tar는 여러 개의 파일을 하나의 파일로 묶거나 풀 때 사용하는 명령어입니다. 여러 파일을 하나의 파일로 묶는 요동로 사용됩니다. 대신, tar를 통해 하나로 합쳐진 파일을 gzip 또는 bzip2 방식을 사용하여 압출할 수 있는데, 이 때 gzip 또는 bzip2 명령을 따로 수행하지 않고 tar 명령의 옵션으로 처리할 수 있습니다.

[명령어 옵션]

tar 명령의 주요 옵션 (자세한 옵션은 "tar --help"명령을 통해 확인 가능합니다)

tar -f : 대상 tar 아카이브 지정. (기본 옵션)

tar -c : tar 아카이브 생성. 기존 아카이브 덮어 쓰기. (파일 묶을 때 사용)

tar -x : tar 아카이브에서 파일 추출. (파일 풀 때 사용)

tar -v : 처리되는 과정(파일 정보)을 자세하게 나열.

tar -z : gzip 압축 적용 옵션.

tar -j : bzip2 압축 적용 옵션.

tar -t : tar 아카이브에 포함된 내용 확인.

tar -C : 대상 디렉토리 경로 지정.

tar -A : 지정된 파일을 tar 아카이브에 추가.

tar -d : tar 아카이브와 파일 시스템 간 차이점 검색.

tar -r : tar 아카이브의 마지막에 파일들 추가.

tar -u : tar 아카이브의 마지막에 파일들 추가.

tar -k : tar 아카이브 추출 시, 기존 파일 유지.

tar -U : tar 아카이브 추출 전, 기존 파일 삭제.

tar -w : 모든 진행 과정에 대해 확인 요청. (interactive)

tar -e : 첫 번째 에러 발생 시 중지.

[명령어 사용방법]

tar cvf T.tar * : 현재 디렉토리의 모든 파일과 디렉토리를 tar로 묶기

tar cvf T.tar [PATH] : 대상 디렉토리를 포함한 모든 파일과 디렉토리를 tar로 묶기

tar cvf T.tar [FILE_1] [FILE_2] : 파일을 지정하여 tar 아카이브로 묶기

tar xvf T.tar : tar 아카이브를 현재 디렉토리에 풀기

tar xvf T.tar -C [PATH] : tar 아카이브를 지정된 디렉토리에 풀기

tar tvf T.tar : tar 아카이브의 내용 확인하기

tar zcvf T.tar.gz * : 현재 디렉토리를 tar로 묶고 gzip으로 압축하기

tar zxvf T.tar.gz : gzip으로 압축된 tar 아카이브를 현재 디렉토리에 풀기

tar jcvf T.tar.bz2 * : 현재 디렉토리를 tar로 묶고 bzip2로 압축하기

tar jxvf T.tar.bz2 : bzip2로 압축된 tar 아카이브를 현재 디렉토리에 풀기

tar cvfw T.tar * : tar 아카이브 묶거나 풀 때 파일 별 진행 여부 확인하기


vi명령어
vi 에디터를 사용하기 위해서는 명령모드와 입력모드의 차이를 알아야합니다. 입력모드는 메모장처럼 텍스트를 자유롭게 하는 모드이고, 명령모드는 말 그대로 다양한 명령을 내리는 모드를 말합니다. 처음 vi 에디터를 실행하면 명령모드로 시작을 합니다. vi 에디터 명령모드에서는 커서이동, 복사, 붙여넣기, 문자열 검색 등을 수행할 수 있습니다.

[명령모드 > 입력모드]
a : 커서 다음(오른쪽)에 입력

A : 행 마지막 부분에 입력

i : 커서 앞(왼쪽)에 입력

I(대문자 i) : 행 처음 부분에 입력

o : 커서 밑에 빈 행을 추가하여 입력

O : 커서 위에 빈 행을 추가하여 입력

s : 커서에 있는 글자를 지우고 입력

[입력모드 > 명령모드]
ESC키를 누른다.

[저장, 종료하기]
명령모드에서 :(콜론)을 이용하여 다양한 작업을 할 수 있다.

:q : 종료한다.

:q! : 저장하지 않고 그냥 강제로 종료한다.

:w : 저장한다.

:wq : 저장하고 종료한다.

:ZZ : 저장하고 종료한다. (:wq와 동일)

:wq 파일이름 : 저장할 때 파일이름을 지정할 수 있다. (vi 에디터에서는 비정상 종료시 .swp 파일이 생성된다. 필요가 없으면 삭제)

[커서 이동]
h, j, k, l : 좌, 하, 상, 우 커서 이동 (방향 키가 없는 키보드에서 사용)

w : 다음 단어의 첫 글자로 이동

b : 이전 단어의 첫 글자로 이동

G : 마지막 행으로 가기

:숫자 : 지정한 숫자 행으로 이동. ex) :5

[삭제]
x : 커서에 있는 글자 삭제

X : 커서 앞에 있는 글자 삭제

dw : 커서를 기준으로 뒤에 있는 단어 글자 삭제(커서 포함)

db : 커서를 기준으로 앞에 있는 단어 글자 삭제

dd : 커서가 있는 라인(줄) 삭제

dw, db, dd 명령 앞에 삭제할 숫자를 지정할 수 있다. ex) 3dw, 2db, 4dd

[복사]
yw : 커서를 기준으로 뒤에 있는 단어 글자 복사 (커서 포함)

yb : 커서를 기준으로 앞에 있는 단어 글자 복사

yy : 커서가 있는 라인(줄) 복사

yw, yb, yy 명령 앞에 복사할 숫자를 지정할 수 있다. ex)3yw, 2yb, 4yy

[붙여넣기 (복사, 삭제된 내용을 붙여넣는다.)]
p : 커서 다음에 붙여넣기

P : 커서 이전에 붙여넣기

[찾기]
/문자열 : 앞에서 부터 문자열을 찾는다.

?문자열 : 뒤에서 부터 문자열을 찾는다.

n : 뒤로 검색

N : 앞으로 검색

[바꾸기]
:%s/old/new : 각 행의 처음 나오는 old를 찾아 new로 바꾼다.

:%s/old/new/g : 모든 old를 찾아 new로 바꾼다.

:%s/old/new/gc : 모든 old를 찾아 new로 바꾸기 전에 물어본다.

[되돌리기(Undo), 다시실행(Redo)]
u : 이전으로 되돌리기 (Undo)

Cril + r : 되돌리기 한것을 다시 실행하기 (Redo)

[자주 사용하는 기능들]
:set number : 행번호를 출력한다. (간단하게 : set nu)

:set nonuber : 행번호를 숨긴다. (간단하게 : set nonu)

:cd : 현재 디렉토리를 출력한다.



wget명령어
인터넷에서 파일을 받는 가장 좋은 방법은 wget을 사용하는 것입니다. wget은 여러 복잡한 다운로드 상황을 거의 다 제어할 수 있습니다.

1. 단일 파일 받기 

- 인터넷에서 단일 파일을 받아 현재 디렉토리에 저장하는 방법입니다.

ex)

$ wget DOWNLOAD-URL

다운로드 하는 동안 진행 경과와 함께 다음의 정보를 보여줍니다.

- 현재 몇 퍼센트를 받았는지에 대한 정보 (n%)

- 현재까지 다운로드 받은 바이트 수 (xxx,xxx)

- 현재 다운로드 속도 (x.xxKB/s)

- 다운로드 완료까지 남은 시간 (XXs)

2. 다른이름으로 저장하기

- 파일을 저장할 때 wget은 기본적으로 다운로드 경로의 마지막 슬래쉬('/') 다음에 오는 단어를 파일 이름으로 사용합니다. 그런데 이 방법으로는 올바른 파일이름이 아닌 이상한 이름을 뽑아내는 경우도 있습니다.

ex)

$ wget http://www.vim.org/scripts/download_script.php?src_id=7701 

위의 경우 다운받은 파일 이름은 'download_script.php?src_id=7701'이 니다. 이런 상황을 해결하기 위해 '-O'옵션을 사용합니다.

$ wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701 

3. 다운로드 속도 지정

- wget은 다운로드시 기본적으로 가능한 최대의 대역폭을 사용합니다. 그러나 대량의 파일을 받아야 한다면 사용하는 대역폭을 조절할 필요가 있습니다. '--limit-rate' 옵션으로 다운로드 속도를 제한할 수 있습니다. 다음은 다운로드 속도를 200k로 제한하는 예입니다.

ex)

$ wget --limit-rate=200k DOWNLOAD-URL

4. 이어받기

- 다운로드 도중 중단했을 경우 '-c'옵션으로 다시 시작할 수 있습니다.

ex)

$ wget -c DOWNLOAD-URL

이는 대용량 파일을 다운로드 받는 도중 멈추고 다른 작업을 해야했을 때 전체파일을 다시 받지 않고 이전에 받은 파일에 이어받을 수 있어서 유용하게 사용됩니다. 만일 '-c'옵션으로 이어받지 않고 이전에 다운로드 중이던 파일이 남아있으면 같은이름으로 다운로드 할 것이므로 새로운 받기에서는 파일이름 뒤에 '.1'이 추가 됩니다. 여기서 '.1'이 있으면 '.2'r가 추가됩니다.

5. 백그라운드에서 다운로드 하기

- 대용량 파일을 받을 때 사용할 수 있는 또 다른 옵션입니다. 이느 다운로드 작업을 백드라운드로 돌리는데 '-b'옵션을 사용합니다.

ex)

$ wet -b http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2

Continuing in background, pid 29401.

Output will be written to 'wget-log'

다운로드 상황은 wget-log에 모두 기록됩니다. 이 내용을 모니터링 하고 싶으면 tail명령어(tail-f wget-log)를 이용해 볼 수 있습니다.

6. 브라우저에서 다운로드 하는 것 처럼 user-agent 정보 보내기

- 몇몇 웹사이트는 브라우저로 다운로드하지 않는다고 판단될 경우 다운로드를 허가하지 않는 경우가 있습니다. 이 때'--user-agent'옵션으로 정보를 함께 보낼 수 있습니다.

ex)

$ wet --user-agent="Mozilla/5.0 (X11; U; Linux 1686; en-US; rv:1.9.0.3) Gecko/2008092416 Firefox/3.0.3" DOWNLOAD-URL
 
7. 다운로드 가능한지 확인하기

- 특정 시간에 다운로드 일정이 잡혀있을 때, 원격지에 파일이 존재하는지 아닌지 확인을 해봐야 합니다. 이 때 '--spider' 옵션을 사용하여 링크가 올바른지 확인합니다.

ex)

URL이 올바를 경우

$ wget --spider http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2
Spider mode enabled. Check if remote file exists.

HTTP request sent, awaiting response... 200 OK

Length: 3852374 (3.7M) [application/x-bzip2]

Remote file exists.

에러가 있을 경우

$ wget --spider http://www.openss7.org/repos/tarballs/strx25

Spider mode enabled. Check if remote file exists.

HTTP request sent, awaiting response... 404 Not Found

Remote file does not exist -- broken link!!!

8. 재시도 횟수 지정하기

- 인터넷 연결에 문제가 있을 경우나 파일 다운로드 실패가 일어날 경우 기본 재시도 횟수는 20입니다. 하지만 더 오래 시도해볼 필요가 있을 때 '--tries'옵션으로 재시도 횟수를 조정할 수 있습니다.

ex)

$ wget --tries=75 DOWNLOAD-URL

9. 여러개의 파일 다운로드하기

- 여러 파일을 다운로드 하려면 다운로드 하려는 여러 링크를 써놓은 파일(엔터로 구분)을 만드록 '-i' 옵션을 통해 작업을 진행합니다.

ex)

$ wget -i FILE-WHICH-HAS-URLS

10. 전체 웹사이트 다운로드 받기

- 아래 예시는 로컬에서 전체 웹사이트를 볼 수 있도록 합니다.

ex)

$ wget --mirror -p --convert-links -P ./LOCAL-DIR WEBSITE-URL

- --mirror : 미러링 옵션을 활성화

- -p : html 페이지를 알맞게 표시하기 위해 필요한 모든 파일을 다운로드

- --convert-links : 다운로드를 마친 후 링크를 로컬로 변경

- -P ./LOCAL-DIR : 다운로드할 디렉토리 지정

11. 파일 타입에 따라 다운로드 제외

- 유용한 정보가 있는 웹사이트를 다운로드 받고싶지만 이미지파일은 받고 싶지 않을 때 '--reject'옵션으로 파일타입별로 다운로드 제외합니다.

ex)

$ wget --reject=gif WEBSITE-URL

12. 로그파일 남기기

- wget은 에러메시지를 stderr에 출력하는데 '-o'옵션으로 지정한 파일에 로그를 남길 수 있습니다.

ex)

$ wget -o download.log DOWNLOAD-URL

13. 지정된 크기만큼만 다운로드

- 단일 파일 받기에는 적용되지 않고 재귀적 다운로드 일 때만 적용됩니다. '-Q'옵션을 사용합니다.

ex)

$ wget -Q5m -i FILE-WHUCH-HAS-URLS

14. 특정 파일 타입만 다운로드

- 웹사이트에서 이미지만 또는 비디오만, pdf만 다운로드 받으려면 '-r -A'옵션을 사용합니다. '-r'을 재귀적 탐색을 지시하고 '-A'는 accept할 파일 타입을 지정합니다.

ex)

$ wget -r -A.pdf WEBSITE-URL

15. ftp 다운로드하기

- wget으로 ftp 다운로드를 할 수 있습니다.

ex)

anonymous ftp 다운로드는 다음 예제와 같습니다.

$ wget FTP-URL

- 인증이 필요한 ftp는 '--ftp-user'와 '--ftp-passeword'를 입력해야 합니다.

ex)

$ wget --ftp-user=USERNAME --ftp-PASSWORD FTP-URL



dpkg명령어
dpkg는 데비안 패키지 관리 시스템의 기초가 되는 소프트웨어로서, .deb 패키지의 설치, 삭제, 정보 제공을 위해 사용되는 명령어입니다. dpkg 자체는 APT등과 같은 고급 도구에 비해 낮은 레벨의 도구이며 복잡한 패키지 관계와 패키지를 원격에서 받아오는 등의 일을 합니다. APT도 Ubuntu의 소프트웨어를 관리하기 위해 내부적으로 이 dpkg를 사용합니다. 

[사용방법]

dpkg -l : 설치된 패키지 목록 확인

dpkg -L <패키지명> : 해당 패키지로부터 설치된 모든 파일목록 확인

dpkg -C <.deb 파일> : 해당 .deb 파일이 설치한 파일의 목록 확인

dpkg -s <패키지명> : 해당 패키지에 대한 정보 확인

dpkg -S <파일명> : 해당 파일명 또는 경로가 포함된 패키지들을 검색

dpkg -I(대문자 i) <.deb 파일> : 해당 .deb 파일에 대한 정보 확인

dpkg -P <패키지명> : 패키지에 대한 정보를 보여준다.

sudo dpkg -i <.deb 파일> : 해당 파일 설치 또는 최신 버전으로 업그레이드

sudo dpkg -r <패키지명> : 해당 패키지 삭제 (삭제시 설정파일들은 남겨둡니다.)

sudo dpkg -P <패키지명> : 해당 패키지와 해당 패키지의 설정파일을 모두 삭제

sudo dpkg -x <.deb 파일> <디렉토리> : 파일에 포함되어 있는 파일들을 지정된 디렉토리에 압축 해제 ( *이명령을 실행할 경우, 해당 디렉토리를 초기화 시켜버립니다.)

