자바 컴파일러와 자바 인터프리터에대해 기술해보자

컴파일러: 소스코드 전체를 한 번 훑고 컴퓨터 프로세서가 실행할 수 있도록 바로 기계어로 변환한다.
        소스코드를 한 번에 읽고 처리하기 때문에 실행속도가 인터프리터에 비해 빠르다.
인터프리터: 고급 언어를 중간 코드로 변환하고 이를 각 행마다 실행한다. (중간 코드는 다른 프로그램에 의해 실행됨.)
          실행속도가 컴파일러에 비해 느리다.
          코드를 각 행마다 소스코드를 변환하기 때문에 에러가 발생하면 이후 작성된 코드는 살혀보지 않아
          보안적 관점에서 더 뛰어나다.

자바 컴파일러는 .java 파일을 컴파일러가 바이트코드로 쓰여진 .class 파일로 변환한다.
바이트 코드는 엄밀히 따지면 기계 언어는 아니지만 JavaVirtual(Machine) 이 읽을 수 있는 언어로 바꾼다.
자바 인터프리터는 자바 컴파일러에의해 변환된 클래스파일 내의 바이트코드를 특정 환경의 기계에서 실행될 수 있도록 변환한다.

바로 기계언어 변환하는 컴파일러 언어의 경우 프로그램이 작성된 기계상에서 실행할 때 매우 효율적으로 실행된다.
이는 대부분의 하드웨어 제어 시스템의 프로그래밍언어가 C인 이유이다. 그러나 이와 동시에 기계 종류에 종속된다는 말이다.
자바의 경우 자바 소스파일을 컴파일한 바이트코드는 JVM이 있다면 어떤 기계라도 자바 프로그램을 실행할 수 있다는
장접이 있다.

JVM은 클래스 로더, 실행 엔진, Runtime Data Areas라는 세 가지 구성요소를 가지고 있다.

클래스 로더
클래스 로더는 런타임 시에 자바 바이트 코드를 읽고 실행 엔진이 사용할 수 있도록 Runtime Data Areas 에 적재 한다.

실행 엔진
실행 엔진은 클래스 로더에 의해 Runtime Data Areas안의 바이트 코드를 실행시키는 역할을 한다.
실제 자바의 인터프리터가 있는 영역이다.
자바는 JustInTime 방식의 컴파일러를 채택했다. JIT컴파일은 프로그램이 실제 실행되는 시점에 바이트코드를 기계어로 일괄 변환하는 방식이다.
JIT 컴파일러는 컴파일 과정에서 자주 사용되는 코드를 JVM안에 캐싱해두고 반복 호출할 때마다 이를 재사용한다.
바이트 코드를 한 줄 한 줄 해석하는 인터프리팅보다는 성능이 높은 컴파일 기법이다.
Garbage Collector 또한 실행 엔진 영역에 있는데 필요없게 된 영역을 제거하는 기능을 가졌다.

Runtime Data Reas
JVM이 프로그램을 수행하기 위해 운영체제로부터 할당받은 메모리 영역을 말한다.
Heap, Stack, Method Area 등이 있다.