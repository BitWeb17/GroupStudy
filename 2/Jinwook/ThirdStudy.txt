public class WhileTest {
    public static void main(String[] args) {
        //1~10까지 출력해보기
        int num = 1;

        // while 문을 작성하는 방법
        // while을 적고 ㄱ()
        // 괄호안에 조건을 작성
        //반복 시킬 내용을 중괄호 내부에 작성


        // num <11 이 조건
        // Phase 1) 현재 num값이 1이므로 조건은 참이됨
        // Phse 2) 다시 위의 조건을 검사하고 num은 2이므로 참이다
        //......
        // Phase 10) 현재 num값이 10이므로 조건은 참이됨
        // Phase 11) 현재 num값이 11이므로 조건은 거짓
        while (num < 11){
            // Phase 1) 현재 num값을 뿌리고 num 값을 1 증가 시킨다
            // Phse 2) 현재 num값을 뿌리고 num 값을 1 증가 시킨다
            //........
            // Phse 10) 현재 num값을 뿌리고 num 값을 1 증가 시킨다
            System.out.println("num= " + num++);

        }
        System.out.println("마지막 num:"+ num);

    }
}

public class ForTest {
    public static void main(String[] args) {
        int i;

        //for문을 작성하는 방법
        // for () {}
        // 소괄호 구성은 아래와 같다
        // (초기화; 조건; 증감부) 형식으로 구성
        // 초기와 부분이 없을 수도 있으며
        // 조건이 없을 수 도 있고
        // 증감부가 없을 수도 있다.
        // 모든 것이 없다면 무한 루프가 될 수 있다.
        // 중괄호 구성은 while과 마찬가지로 반복 시킬 내용을 작성 한다.

        // for 문을 보는 방법
        // for( i = 0; i < 3; i++) 의 의미는 무엇인가?
        // for(;;) 초기화 조건 증감 없을때 이렇게 사용
        // i=-0 : 초기화
        // 초기화 부분은 for문 진입시 최초로 한번만 수행
        // 반복하는 도중에는 초기화 부분을 실행하지 않는다.
        // i < 3: 조건
        // 조건이 만족 되는 동안 반복을 한다
        // i++ : 증감은 i += 2 (2칸씩 증가)와 같은 형식으로도 작성한다.


        // 동작 과정
        // 초기화 : 최초로 한번만
        // 조건: 조건이 만족되는 동안만 반복 -> 조건이 만족 되면 중괄호로 이동
        // 증감부: 값을 증가하거나 감소시킴 -> 증감 이후에 조건을 확인함
        for( i = 0; i < 3; i++){
            System.out.println("i = " +i);
            // 중괄호 내용이 완료 되면 증감부로 이동

        }
        for(int j = 0; j < 4 ; j++){
            System.out.println("j = " +j);

        }
        System.out.println("s나는 여기서도 나와 = " + i);
        //System.out.println("나는 왜 안돼?"+j);
        //int j 를 for 문 안에 넣으면 for 문안에서만 사용가능
        //더이상 main 내에서 j가 살아 아있는 변수가 아니기 때문이다.
    }
}


public class RandomInst {
    public static void main(String[] args) {
        Random rand = new Random();


        //bound는 범위의 갯수를 지정하는 녀석 입력할 필요 X
        int randNum = rand.nextInt(2);
        System.out.println("0~1 까지 2개의 값을 뽑아요:" + randNum);
        randNum = rand.nextInt(6);
        System.out.println("0~5 까지 2개의 값을 뽑아요:" + randNum);

        // 왜? rand.nextInt(6) + 1이 1~6까지가 되나요?
        //rand.nextInt(6) 의 범위가 0~5로 6개
        //1~6
        randNum = rand.nextInt(6)+1;
        System.out.println("1~6 까지 주사위 굴리기:" + randNum);
    }
}


public class MathRandom {
    public static void main(String[] args) {
        int randNum =(int)Math.random();
        System.out.println("임의의 랜덤 숫자 = " + randNum);
        // 이결과는 계속 0이나옴
        // 왜? 0.0~1.0(포함x) 사이의 값이 나오기 때문

        randNum = (int)(Math.random() *10);
        System.out.println("0~9 사이의 랜덤 숫자 = " + randNum);

        randNum = (int)(Math.random()*2);
        System.out.println("0~1사이의 랜덤 숫자 = " +randNum);
        randNum = (int)(Math.random()*6+1);
        System.out.println("1~6 까지 주사위 굴리기:" + randNum);
    }
}


public class BreakTest {
    public static void main(String[] args) {
        final int MAX = 11;
        int i = 1;
        while (i < MAX){
            System.out.println("i  = " + i++);
            if(i == 5){
                System.out.println("걸렸다!");
                break;
                // 반복 내에서 break 하는 순간 반복 자체를 종료함.
            }
        }
        System.out.println("이건 어디서나 동작하는 녀석");
    }
}


public class ContinueTest {
    public static void main(String[] args) {
        final int MAX = 11;
        int i = 1;

        while(i < MAX) {
            i++;

            // Q: 4가 왜 빠지나요 ?
            // A: continue 하는 시점이 5
            //    continue를 하면 다시 루프로 올라간다.
            //    다시 올라가서 ++ 을 하므로 6
            if(i == 5) {
                System.out.println("걸렸다!");
                // continue를 수행하면
                // 현재 진행하던 작업을 멈추고 다시
                // 루프(반복)의 최상위로 이동한다.
                continue;
            }

            System.out.println("i = " + (i - 1));
        }

        System.out.println("이건 어디서나 동작하는 녀석");
    }
}


public class InfinityLoopTest {
    public static void main(String[] args) {
        //무한루프는 멈추지 않는다는 뜻 (무 조 건)
        for(;;){
            System.out.println("가즈아~");
        }
    }
}

public class InfinityLoopTest2 {
    public static void main(String[] args) {
        int i = 1;
        for(;;i++){
            System.out.println("i = " + i);
        }
    }
}


public class RandomQuiz {
    public static void main(String[] args) {
        // A주사위와 B 주사위를 만들고 주사위를 각자 굴려서 더 높은 숫자가 나온 사람이 이기게 만들어보자
// A의 주사위와 B의 주사위를 만들고
        // 주사위를 각자 굴려서
        // 더 높은 숫자가 나온 사람이 이기게 만들어보자!
        Random rand = new Random();

        int i = 0;

        while(i < 100) {
            int diceA = (int) (Math.random() * 6) + 1;
            int diceB = rand.nextInt(6) + 1;

            // System.out.printf
            // System.out.println
            // System.out.print
            // 각각의 차이점은 무엇인가 ?
            // print는 단순히 출력을 수행하며 앤터 입력이 제외된다.
            // println은 출력과 함께 앤터가 입력된다.
            // printf는 특정한 포맷(서식)을 가지고 출력된다.
            // 여기서 %d 와 \n 은 서식에 해당한다.
            // \n의 경우가 앤터 입력에 해당한다.
            // %d %d %d 형식으로 오게 될 경우
            // 구분자 ',' 를 통해 각각에 값이 대입되는 형식으로 사용됨
            // 주의할점은 %d의 경우 정수형(int)만 가능하며
            // %f의 경우 실수형(float, double)만 가능하다.

            // printf의 장점:
            // System.out.printf("A 승리! %d vs %d\n", diceA, diceB);
            // System.out.println("A 승리! " + diceA + " vs " + diceB);

            if (diceA > diceB) {
                System.out.printf("A 승리! %d vs %d\n", diceA, diceB);
            } else if (diceA < diceB) {
                System.out.printf("B 승리! %d vs %d\n", diceA, diceB);
            } else {
                System.out.printf("무승부! %d vs %d\n", diceA, diceB);
            }

            i++;
        }

        }
    }


public class Quiz1 {
    public static void main(String[] args) {
        //1. 2~19사이의 숫자를 출력해보자
        int num = 2;
        while (num < 20) {
            System.out.println("2~19 사이의 수는: " + num++);

        }
    }

}


public class Quiz2 {
    public static void main(String[] args) {
        //2~19 수의 짝수를 판별 해보자
        int num = 2;
        while (num < 20){
            // if문 내부에 num ++이 들어 있을 경우
            // 조건을 만족하는 경우에만 +1이 되므로
            // 무한 반복을 하며 같은 숫자만 출력하게 된다
            if(num % 2 == 0){
                System.out.println("num=" + num);
            }
            // 조건에 관계 없이 지속적으로 값을 상승시키기 위함
            num++;
        }
    }
}


public class Quiz3 {
    public static void main(String[] args) {
    //2~19 사이의 숫자중 짝수의 합을 구해보자
    int num = 2;
    int sum = 0;
    while (num < 20){

        if(num % 2 == 0){
            System.out.println("num=" + num);
            // sum = sum + num 과 동의어
            sum += num;
            // sum = sum - num
            // sum -= num

            // sum = sum * num
            // sum *= num

            // sum = sum % num
            // sum %= num
        }
        num++;
    }
    //2~18 = 90
    System.out.println("2~19 까지 짝수들의 합 =" + sum);
}
}


public class Quiz5 {
    public static void main(String[] args) {
        // 피보나치 수열을 프로그래밍으로 구현해보자!
        // 구체적으로 13번째 항의 숫자를 구하도록 만들어보자!
        //
        // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, .......
        //
        // 힌트
        //
        // 1) 숫자가 올라가는 규칙을 찾아야 한다.
        // 2) 구현을 한다 했을 경우 while() 을 사용해야함
        // 3) 첫번째 더할값, 두번째 더할값, 계산한 값의 변수가 3개 필요함

        // 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, .......
        final int TARGET = 13;
        final int ALREADY = 2;

        int loop = 0;
        int first = 1, second = 1, res = 0;

        // first   second   res
        //   1       1       2
        //   1       2       3
        //   2       3       5
        //   3       5       8

        // 2는 왜 빼나요 ?
        // 첫번째 항 + 두 번째 항 = 결과 1항 2항 2개의 항을 알고 있기 때문
        while(loop < TARGET - ALREADY) {
            res = first + second;
            first = second;
            second = res;

            loop++;
        }

        System.out.println("res = " + res);
    }
}


public class Quiz6 {
    public static void main(String[] args) {
        //1,1,3,4,5,8,12,17,25,37,54,79
        //위 수열에서 20번째 숫자를 찾도록 프로그래밍 해보자
        final int TARGET = 20;
        final int ALREADY = 3;
        int loop = 0;
        int first = 1, second = 1, third = 3, res = 0;


        while (loop < TARGET - ALREADY){
            res = first + third;
            first = second;
            second = third;
            third = res;



            loop++;


        }

        System.out.println("res = " +res);

    }
}


public class Quiz8 {
    public static void main(String[] args) {
        //1~10까지의 숫자중 7을 만나면 종료하도록 출력
        final int MAX = 11;
        int i = 1;
        while (i < MAX){
            if(i == 7){
                break;
            }
            System.out.println("i  = " + i);
            i++;

        }
    }
}


public class Quiz9 {
    public static void main(String[] args) {
        final int MAX = 10;
        int i = 0;

        while(i < MAX) {
            i++;

            if(i == 8) {
                continue;
            }

            System.out.println("i = " + i );
        }

    }
}


public class Exercise3 {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.println("아무런 숫자나 입력해 보세요: ");
        int num = scan.nextInt();
        System.out.println("입력값은: "+ num);
    }
}


public class Exercise4 {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.println("아무런 숫자나 입력해 보세요: ");
        int num = scan.nextInt();
        System.out.println("입력값은: "+ num);

        if(num % 5 == 1){
            System.out.println(num + "5로 나눠서 1이 남는다");
        }
        else {
            System.out.println(num + "5로 나눠서 1이 남지 않는다");
        }
    }
}


public class Exercise5 {
        public static void main (String[]args){
            System.out.println("2의 n승을 판정해보자!");

            Scanner scan = new Scanner(System.in);
            System.out.print("아무런 숫자나 입력해보세요: ");

            int num = scan.nextInt();
            System.out.println("입력값은 = " + num);

            // 2의 n승이란 ?
            // 0000 0001    1
            // 0000 0010    2
            // >>>>>>>>>>>>>>
            // 0000 0011    3
            // <<<<<<<<<<<<<<
            // 0000 0100    4
            // >>>>>>>>>>>>>>
            // 0000 0101    5
            // <<<<<<<<<<<<<<
            // >>>>>>>>>>>>>>
            // 0000 0110    6
            // <<<<<<<<<<<<<<
            // 0000 1000    8
            // 0001 0000    16
            // 0010 0000    32
            // 0100 0000    64
            if (num == 0) {
                System.out.println("0 입니다.");
            }

            // Q: 조건식에 괄호가 없으면 왜 오류인가 ?
            // A: 아래 case A 코드를 보면 빨간줄이 나오는데
            //    빨간줄에 커서를 갖다 대면 required type: boolean
            //    provided type: int 라는 차이 보일 것이다.
            //    컴퓨터가 요구하는 타입은 boolean(논리형)인데
            //    사용자가 작성하여 제공한 타입이 int 형이기 때문에 오류!

            //    case B의 경우엔 '==' 같은가요 ? 라는 질문이다.
            //    이 질문에 대한 답은 yes(true) 혹은 no(false) 뿐이다.

            //    boolean은 참 혹은 거짓을 표현하는 데이터 타입이다.

            //    case C의 경우엔 에러 메시지가 아래와 같다.
            //    Operator '&' cannot be applied to 'int', 'boolean'
            //    비트 연산자 AND는 int와 boolean간에 적용이 불가능하다.
            //    산술 비트 연산은 정수형 변수 혹은 상수(3, 5 등등)끼리 가능하다.
            //    연산자 우선순위가 & 보다 == 이 높아서 이런 현상이 발생함

            // Q: case A의 괄호는 조건이 아닌가요 ?
            // A: 단순히 산술 연산식입니다.
            //    조건이 되려면 case B나 C처럼 질문을 해야함.
            //    그러면 질문의 대한 답이 false(거짓) 혹은 true(참)으로 나옴

            // case A: if(num & (num - 1))
            // case B: if( (num & (num - 1)) == 0)
            // caes C: if(num & (num - 1) == 0)

            // Q: 2이 n승을 판정하는 알고리즘이 이해가 안갑니다.
            // A: 일단은 2의 n승이 가지는 특성을 살펴봐야 한다.
            //    대표적인 특성이 2의 n승과 2의 n승 - 1 의 특성임

            // 15 = 01111(2): 2^4 - 1
            // 16 = 10000(2): 2^4
            //
            // 7 = 00111(2): 2^3 - 1
            // 8 = 01000(2): 2^3
            //
            // 3 = 00011(2): 2^2 - 1
            // 4 = 00100(2): 2^2

            // 2진수 특성상 2의 n승에서 1을 빼면
            // 해당 자리수가 0 이되고 나머지 아래의 자리값은 모두 최대값이 된다.

            // 10000 - 1
            //  9999

            // 16 8 4 2 1
            //  1 0 0 0 0 (2) - 00001(2)
            //  0 1 1 1 1 (2)   AND: 같은 자리수에 서로 값이 참(1)인 경우에만 참(1)
            // ------------------
            //  0 0 0 0 0 (2)

            //  0 1 1 1 1 (2)
            //  0 1 0 0 0 (2)

            //  2의 n승과 2의 n승 - 1의 AND는 어떤 상황에서든지 0을 만들게 된다.

            // Q: 2^n + 1을 XOR로 하면 안될까요 ?
            // A: 아래와 같이 기준(결과값 31, 15 등등)이 모호하게 됩니다.

            //  0 1 1 1 1 (2):  15
            //  1 0 0 0 0 (2):  16   XOR
            // -------------------------
            //  1 1 1 1 1    :  31

            //  0 1 1 1 (2):  7
            //  1 0 0 0 (2):  8   XOR
            // -------------------------
            //  1 1 1 1    :  15

            // Q: (num ^ (num + 1)) == (num + (num + 1))는 안될까요 ?
            // A: (num & (num - 1)) == 0 위의 케이스와 현재 케이스의 비교시
            //    연산량이 위의 케이스가 더 많습니다.
            //    프로그램 최적화 차원에서
            //    위의 케이스보다 아래의 케이스가 조금 더 효율적입니다.
            //    문제를 풀 수는 있습니다 - 속도가 조금 떨어질뿐
            // Err: + 1 로 할 경우 입력값이 2^n - 1이어야 참이됨
            // Sol: (num ^ (num - 1)) == (num + (num - 1))
            //      위의 형식으로 해야 입력값을 2^n일 때 참
            //      아래 boolean 코드는 증명
            boolean res = (num ^ (num - 1)) == (num + (num - 1));
            System.out.println("res = " + res);

            // int res = num & (num - 1);
            if ((num & (num - 1)) == 0) {
                System.out.println("입력 숫자 " + num + "은 2의 n승입니다.");
            } else {
                System.out.println("입력 숫자 " + num + "은 2의 n승이 아닙니다.");
            }
        }
    }


public class Exercise6 {
    public static void main(String[] args) {
//        1500이 입력되면 정지하는 시스템이 있다.
//        입력값은 1000 ~ 2000 사이의 숫자다.
//        (아직 랜덤을 배우지 않았으므로 키보드 입력으로 처리한다)
//        1470 이하의 값을 넣으면 후진
//        1530 이상의 값을 넣으면 전진한다.
//        이를 if 문과 Scanner를 통해 구현
//        1471~1529 전체가 정지 구간
//        999 이하 정지, 2001 이상도 정지
        Scanner scan = new Scanner(System.in);

        System.out.print("제어 pwm을 입력하세요: ");
        int pwm = scan.nextInt();

        System.out.println("당신이 입력한 pwm값 " + pwm);

        if(pwm > 2000){ // pwm이 200 보다 크다면
            System.out.println("잘못된 값 입력!");
        }
        else if (pwm >= 1530){ // 1530 보다 크다면 && 200보다 작거나 같다면
            System.out.println("전진");
        }
        else if (pwm >1470){ // 1470보다 크다면 && 1529보다 작다면
            System.out.println("정지");
        }
        else if (pwm > 990){ // 999보다 크다면 && 1470보다 작거나 같다면
            System.out.println("후진");
        }
        else{ // 999보다 작거나 같다면
            System.out.println("잘못된값 입력");
        }

    }
}


public class Exercise7 {
    public static void main(String[] args) {
        //for 를 사용해서 2의 배수만 출력하도록 프로그래밍해보자
        //방식이 두가지 있을 수 있는데
        //앞서 소개했던 꼼수와 정석이 있다
        //원하는 방식으로 만들어보자

        System.out.println("꼼수");
        int  i;

        for(i = 2; i < 11 ; i+=2){
            System.out.println("i = " +i);

        }
        System.out.println("if문 활용");
        int a;
        for(a = 1; a < 11; a++){
            if(a % 2 == 0){
                System.out.println("a = "  +a);
            }
        }

    }
}


public class Exercise8 {
    public static void main(String[] args) {
        //1~30까지의 숫자중 2 혹은 3의 배수는 더하고
        // 5의 배수는 뺀다.
        // 혼동의 여지를 방지하기 위해
        // 10처럼 2의 배수이면서 5의 배수가 되는 경우엔
        // 빼기도 하고 더하기도 하므로 결론적으로 0
        int sum = 0;
        for(int i = 1; i <31; i++){
            if((i % 2 == 0)||(i % 3 == 0)){
                sum += i;
                System.out.println("더하는값=" +i);
            }
            if (i % 5 == 0){
                sum-= i;
                System.out.println("빼는 값=" +i);
            }
            System.out.println("결과=" + sum);

        }
    }
}


public class AlternativeExercise8 {
        public static void main(String[] args) {
            int twoThreeSum = 0;
            int fiveSum = 0;

            for (int i = 1; i < 31; i++) {
                // 더하기 파트
                if (i % 2 == 0 || i % 3 == 0) {
                    twoThreeSum += i;
                    System.out.println("더하는 값 = " + i);
                }
            }

            for (int i = 1; i < 31; i++) {
                // 더하기 파트
                if (i % 5 == 0) {
                    fiveSum += i;
                    System.out.println("빼는 값 = " + i);
                }
            }

            System.out.println("더하는 값 = " + twoThreeSum);
            System.out.println("빼는 값 = " + fiveSum);
            System.out.println("최종값 = " + (twoThreeSum - fiveSum));
        }

}

public class AlternativeExercise8_2 {
        public static void main(String[] args) {
            int addSum = 0, subSum = 0;

            for (int i = 1; i < 31; i++) {
                // 더하기 파트
                if (i % 2 == 0 || i % 3 == 0) {
                    addSum += i;
                    System.out.println("더하는 값 = " + i);
                }

                // 빼기 파트
                if (i % 5 == 0) {
                    subSum += i;
                    System.out.println("빼는 값 = " + i);
                }
            }

            System.out.println("총합 = " + addSum);
            System.out.println("총뺄셈 = " + subSum);
            System.out.println("결과 = " + (addSum - subSum));

        }
    }


public class Exercise9 {
    public static void main(String[] args) {
        //주사위 게임을 해보자!! 이 주사의 게임의 규칙은 다음과 같다
        //홀수가 나오면 주사위를 계속 굴릴 수 있고
        //마지막에 짝수가 나오면 주사위를 멈춘다(break)
        //이때 마지막 주사위 눈금을 구하도록 프로그래밍 해보자!
        //(마지막 눈금은 모든 주사위 눈금의 합산값이다)
        //9-1) 먼저 주사위 눈금을 출력하도록 프로그래밍한다
        //9-2) 주사위 눈금이 홀수인지 판정해본다.
        //9-3) 먼저 무한루프에서 주사위가 굴러가도록 만든다
        //9-4) 특정 조건에서 반복이 멈추도록 만들어보자
        //9-5) 내용을 결함하여 9번을 해결

        int dicesum = 0;
        for( ; ; ){
            int dice = (int)(Math.random()*6)+1;
            System.out.println("주사위 눈금= "+ dice);
            dicesum += dice;

            if(dice % 2 == 0){
                System.out.println("짝수");


                System.out.println("주사위 합산값 =" + dicesum);
                break;
            }
            else{
                System.out.println("홀수");




            }

        }

    }

}

public class DiceQuiz {
    public static void main(String[] args) {
        //주사위를 10번 굴려서 홀수는 더하고 짝수는 뺀다
        //10번 굴린 이후 주사위 눈금을 구하도록 프로그래밍
        //(주사위 눈금의 총합을 구하몀 된다)
        int i = 1;
        int dicesum = 0;
        int dicesub = 0;

        for (i = 1; i < 11; i++) {
            Random rand = new Random();

            int dice = rand.nextInt(6)+1;
            System.out.println("눈금= "+ dice);


            if(dice % 2 == 0){
                System.out.println("짝수이다");
                dicesub -= dice;
            }
            else {
                System.out.println("홀수이다");
                dicesum += dice;
            }

        }
        System.out.println("합산 값은 = " +(dicesum+dicesub));
    }
}

