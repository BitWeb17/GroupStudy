BitOperation

public class tBitOperation {
    public static void main(String[] args) {
        System.out.println("비트 연산자 예제 입니다.");


        int num1 = 5, num2 = 10;

        // AND 비트 연산의 특징: 같은 자리수에 1이 배치된 경우에만 1이며 그 외의 모든 케이스는 0이다. 교집합
        //true = 1 false= 0
        int res = num1 & num2;
        System.out.println("num1 AND num2 =" + res);
        // &은 비트 연산자 AND를 의미함

        //OR 비트 연산의 특징: 하나라도 1이 배치되어 있다면 1이고 그렇지 않다면 0이 된다. 합집합
        res = num1 | num2;
        System.out.println("num1 OR num2 =" + res);
        // |는 비트 연산자  OR을 의미함

        //XOR 비트 연산의 특징: 서로 일치하는 것이 없는  경우에만 1이 된다.
        res = num1 ^ num2;
        System.out.println("num1 XOR num2 =" + res);
        // ^는 비트 연산자 XOR을 의미함

        // NOT 비트 연산의 특징: 모든것을 부정한다.
        // 참의 부정=거짓 , 거짓의 부정=참
        res = ~num1;
        System.out.println("Not num1 =" + res);
        // ~은 비트 연산자 NOT을 의미함

        // 2진수 체계
        //비트 연산자는 2진수를 기반으로 동작함
        //ex) 10진수 3421을 생각해보자!
        //3 2 1 0 ---->10^n(10의 n승)
        //3 4 2 1
        //3*10^3 + 4*10^2 + 2*10^1 + 1*10^0
        //3000 + 400 + 200 + 1 =3421
        //핵심 개념 ; 2진수는 각자리에 두가지 숫자만 올 수 있다.
        //          2진수는 0~1 즉 두개의 숫자만 올 수 있다.
        //ex) 2진수 10진수 10을 표현해보자!
        //3 2 1 0 ---->2^n(2의 n승)
        //8 4 2 1 ---->계산된 2의n승 자리
        //1 0 1 0 --->10진수 10은 2진수로 1010(2) 이다.
        //10진수를 2진수로 만드는 가장 빠른 방법
        //변환하고자 하는 숫자를 선정한다 23 / 변환하고자 하는 숫자보다 작지만 가장 큰 2의 n승을 선택
        // 2^n = 1,2,4,8,16,32,64....... --->16이 선택
        //16은 2의4승 / 변환하고자 하는 숫자에서 2번에서 선택한 숫자를 뺀다 23-16=7/나머지가 0이 될때까지 2~3번을 반복한다.
        //7을 선정하고 근접한 최대 2의 n승은 4 그러므로 7-4=3다
        //3을 선정하고 근접한 퇴대 2의 n승은 2 그러므로 3-2=1다 2는 2^1승이다./1을 선정하고 근접한 최대 2의 n승은 1이다.
        //1은 2^0이다. 10111(2)=23
        //검토방법:43210= 2^4*1+2^3*0+2^1*1+2^0*1 = 16+4+2+1=23
        //숫자 10의 2진수 변환 1010(2)
        //숫자 5의 2진수 변환 0101(2)
        //    10 1010
        //and  5 0101      =>0 0000 ->  연산이 0
        // or              => 15 1111 ->
        //xor 15 1111 0101=>15
        //not -6 1111 1010 =>
        //컴퓨터에서 음수를 표현하는 방법
        //int는 정수형임을 모두 알고 있지만 음수 표현법은 좀 별개다.
        //int는 4바이트 정수형 데이터 타입
        //byte는 1바이트 데이터 타입
        //float은 4바이트 실수형 데이터 타입
        //double은 8바이트 실수형 데이터 타입
        //바이트란? 컴퓨터가 표현할 수 있는 최소단위 : bit , 비트가 8개 모이면 바이트가됨.
        //그러므로 int는 32비트가 됨. 그래서 사실 비트 연산시 32개의 비트를 모두 적어놓는것이 정석이지만
        //적을 것이 너무 많기 대문에 줄여서 8개 정도로 적어 놓고 계산한다
        // 7    6   5   4  3  2  1  0 ----- 2의 n승 자리
        //128  64  32  16  8  4  2  1 -----해당 위치에서의 숫자
        //0     0   0   0  0  1  0  1 -----숫자 5를 2진수로 표현
        //---------------------------
        //1     1   1   1  1  0  1  0 ----이게 왜 -6인가요?
        // 우선 int혀은 맨 앞에 비트가 부호를 의미한다.
        // 맨 앞 비트가 0이면 양수 1이면 음수 입니다.
        //10진수 6은 2진수로 110(2) 이므로
        //1 000.........110(2) 이게 왜 -6이 아닐까?
        //위의 케이스가 안되는 이유는 0때문이다.
        //+1 +(-1) = 0
        //0000 0001 = 1
        //1000 0001 = -1
        //둘이 더하면 =1000 0010 =0 ???
        //0000 0001 + 1111 1111 = 0000 0000 = 0
        //어떤 숫자의 음수를 빠르게 만드는 방법 : 먼저 만들고 싶은 음수의 양수값을 이진수로 작성 / 가장 낮은 자리에 있는 1을 찾는다
        //해당하는 1을 찾은 자리까지의 값을 유지 / 나머지 값은 전부 반전한다 (참->거짓 , 거짓->참) (0->1 , 1->0)
        //연습 문제 -20을 2진수로 표현(8비트만 표현)
        // 20= 16 + 4 =00010100(2) 1110 1100(2) =-20
        //         -29
        // 29= 16+8+4+1 =0001 1101(2) 1110 0011(2) -29
        //* XOR과 OR의 차이점은?
        // 1001(2)=9 1101(2) =13
        //OR 연산 1101(2) = 13
        //XOR 연산 0100(2) = 4
        //아스키 코드 A= 65, a= 97 둘사이엔 32 차이
        //          B= 66, a= 98 둘사이엔 32 차이
        // 65 = 64 +1
        // 0100 0001(2)
        //97= 64+32+1 = 0100 0001(2)
        //32= 0010 0000(2) ->>>>XOR = 65 아스키 코드를 안찾아보고 XOR로 알 수 있다.



    }
}

IfBasedRangeProblem

public class IfBasedRangeProblem {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        System.out.print("점수를 입력하세요: ");
        int num = scan.nextInt();

        System.out.println("입력한 점수는 "+ num);
// num이 100보다 큰것이 참이다.
        // 주의점 if -else if 사용시 히든 조건을 매우 조심해야한다
        // 잘못 작성할 경우 프로그램 논리가 통채로 잘못될 가능성이 있고
        // 디버깅을 통해 오류를 잡는 것이 오래 걸릴 가능성이 높아진다.
        // 팁: 가장 범주가 큰녀석을 위로 올리고 그것보다 작은 범주의 크기들을 서서히 단계 단계 내리며 작성한다.
        if(num > 100){ // num이 100보다 크다면
            System.out.println("잘못된 입력입니다.");
        }
        else if(num >= 90){ // num이 90이상 이라면 && 100보다 작거나 같다면
            System.out.println("당신의 등급은 A입니다.");
        }
        else if(num >= 80){ // num이 80이상 이라면 && 90보다 작다면
            System.out.println("당신의 등급은 B입니다.");
        }
        else if(num >= 70){// num이 70이상 이라면 && 80보다 작다면
            System.out.println("당신의 등급은 C입니다.");
        }
        else if(num >= 60){// num이 60이상 이라면 && 70보다 작다면
            System.out.println("당신의 등급은 D입니다.");
        }
        else if(num >= 0){// num이 0이상 이라면 && 60보다 작다면
            System.out.println("당신의 등급은 F입니다.");
        }
        else { // 0보다 작다면
            System.out.println("잘못된 입력입니다.");

        }

    }
}


IfTest


public class IfTest {
    public static void main(String[] args) {
        // 자동완성 psvm
        System.out.println("Hi I'm intelliJ");

        String str1 = "짝수";
        String str2 = "홀수";

        Scanner scan = new Scanner(System.in);
        System.out.print("숫자를 입력하세요: "); // sout 단축키
        //키보드 입력으로 받은 숫자를 num 변수에 대입

        int num = scan.nextInt();
        System.out.println("당신이 입력한 숫자는" + num);
        // 문자열과 숫자가 +되면 자동으로 숫자는 문자열이 되어서 처리된다.
        System.out.println("당신이 입력한 숫자는" + num + num);
        // 실제로 숫자를 처리하고자 한다면 연산의 순서를 조정해서(()를 통해) 아래와 같이 변경하여 작업하면 된다.
        System.out.println("당신이 입력한 숫자는" + (num + num));

        String res = num % 2  == 0 ? str1 : str2;
        // 삼항연산자 //
        // 작성하는 방법 = 조건 ? 참인경우 : 거짓인경우
        // 위 케이스의 경우엔 조건에 따라 결과값이 바뀌는데 이 값을 res라는 변수에 대입한 것이다.
        System.out.println(num + "은 " + res + " 입니다!");

    }
}


LogicalOperaiton

ublic class LogicalOperation {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        System.out.print("숫자를 입력하세요: ");

        int num = scan.nextInt();
//        (num % 2 == 0) 2로 나눈 나머지가 0인가?
//        (num % 3 == 0) 3로 나눈 나머지가 0인가?
//        && 논리 연산자 AND
//        AND 논리연산자는 두개의 조건이 모두 참인경우에만 참이다.
//        즉 위 두가지 질무에 대한 답이 모두 참이여야만 아래의 if 문장이 동작함

        if((num % 2 == 0) && (num % 3 == 0)) {
            System.out.println(num + "은 6의 배수다!");
        }
        else {
            System.out.println(num+ "은 6의 배수가 아니다!");
        }
        // ||논리연산자 OR
        //둘 중 하나라도 참이라면 참
        if((num % 2 == 0) || (num % 3 == 0)) {
            System.out.println(num + "은 2혹은 3의 배수다!");
        }
        else {
            System.out.println(num+ "은 2혹은 3의 배수가 아니다!");
        }
        // ! 논리연산자 NOT 이다.
        // 결과 자체를 부정하는 연산자
        // 참-> 거짓 / 거짓 ->참
        if(!(num % 2 == 0)){
            System.out.println(num + "은 2의 배수가 아니다!");
        }
        else {
            System.out.println(num + "은 2의 배수다!");
        }

    }
}

PracticalTest

public class PracticalTest {
    public static void main(String[] args) {
        //연습문제 3 4 5번
        Scanner scan = new Scanner(System.in);

        System.out.print("점수를 입력하세요: ");
        int num = scan.nextInt();

        if(num % 5 == 0){
            System.out.println(num+ "는 5로 나누었을 때 나머지가 없습니다.");
        }
        else if(num % 5 == 1) {
            System.out.println(num + " 는 5로 나누었을 때 1의 나머지가 있습니다.");
        }
        else{
            System.out.println(num + " 는 5로 나누었을 때 1이외의  나머지가 있습니다.");
        }
        if(num == (2*num)+1){
            System.out.println("2의 n승 아니다");
        }
        else if(num == )
        else{
            System.out.println("2의 n승이 이다");
        }



        //문제 6번
        Scanner scan1 = new Scanner(System.in);

        System.out.print("점수를 입력하세요: ");
        int num3 = scan.nextInt();
        if((num3>=2001)||(num3 <=999)){
            System.out.println("숫자 범위 초과");
        }
        else if ((num3 == 1500)){
            System.out.println("정지");
        }
        else if ((num3>=1000)||(num3 <=1470)){
            System.out.println("후진");
        }
        else if ((num3>=1530)||(num3 <=2000)){
            System.out.println("전진");
        }
        else{
            System.out.println("정상");
        }
    }
}


PrefixSubfixOperation

public class PrefixSuffixOperation {
    public static void main(String[] args) {
        int num = 3;
        //전위 연산자는 해당 라인에서 실행

        System.out.println("전위 연산자" + (++num) );
        System.out.println("전위 연산자" + (++num) );
        System.out.println("결과" + num );

        num = 3;
        // 후위 연산자는 해당 라인 이후에 즉각 실행
        System.out.println("후위 연산자" + (num++) );
        System.out.println("후위 연산자" + (num++) );
        System.out.println("결과" + num );
    }
}


ShiftOperaiton

public class ShiftOperation {
    public static void main(String[] args) {
        System.out.println("쉬프트 연산자 예제!");


        // final is 값을 고정시키는 역할
        // 그런데 왜 사용 ? > 매직넘버 : 공장에는 생산라인이 5개 있다. -> 사업을 따내서 생산라인이 8개가 되었음 -> 결국 유지 보수를 편하게 하기 위해 사용
        // 이것은 결국 내가 야근을 하느냐 안하느냐로 귀결 -> 집에 얼마나 빨리 갈 수 있는지 귀결됨
        final int SCALE_FACTOR1 = 2;
        final int SCALE_FACTOR2 = 3;
        final int SCALE_FACTOR3 = 1;

        int num = 10, num2 = 5;
        num += num2;
        System.out.println("num = " + num);
        // 내용이 바뀔 예정이 없는 값들을 final화 해줌
        // SCALE_FATOR1 += num2는 안됨 컴퓨터에서 오류 처리 왜? 미리 고정을 시켰는데 옮기려는 시도때문

        // 쉬프트 연산도 2진수와 연결
        // 숫자 10 = 0000 1010(2) 을 왼쪽 쉬프트로 2칸 이동한다.
        // 결과 40 - 0010 1000(2) 이 된다.
        // 2칸 올라 올때 빈공간은 0으로 채워지고 넘치는 공간은 버린다(EX. int = 8비트 이상은 버린다)
        // 3칸 이동
        // 결과 80- 0101 0000 이된다
        // 쉬프트 한칸당 2의n승이 곱해지 것을 볼 수 있다(특징) 10 * 3칸이동(2의3승=8) ->80

        System.out.println("10 << 2 = " + (num << SCALE_FACTOR1));
        System.out.println("10 << 3 = " + (num << SCALE_FACTOR2));
        System.out.println("5 << 1 = " + (num2 << SCALE_FACTOR3));
        // 반대 개념은 숫자 5 - 000 0101 이며 오른쪽으로 이동
        // 결과 2 - 0000 0010
        // 우리가 예상 한것은 2.5 but 2가 나옴
        // 이유는 쉬프트 연산이 정수에서만 가능하기 때문.
        // 주의점: 곱셉은 2의 n을 곱하면 되지만
        //        나눗셈의 경우엔 나머지를 버리고 못만 취한다.

        System.out.println("(5 >> 1) << 2 = " +  ((num2 >> SCALE_FACTOR1) <<  SCALE_FACTOR2));
        // 쉬프트에 의해 데이터가 사라지는 것을 확인할 수 있는 예
        // 원래는 5 << 1 과 같기 때문에 10이 나와야 하지만
        // 데이터가 사라져서 8이 나오는 것을 목격 할 수 있다.
    }
}

SwitchCaseStatement

public class SwitchCaseStatement {
    public static void main(String[] args) {
        System.out.println("Switch 문을 배워봅시다~");

        Scanner scan = new Scanner(System.in);

        System.out.print("점수를 입력하세요: ");
        int num = scan.nextInt();

        if((num > 100)||(num < 0)){
            System.out.println("잘못된 값을 입력하였습니다.");
        }


        // (int)(num / 10.0f)
        // 위의 코드는 결과를 강제로 int 형으로 처리하는 방식이다.
        // 10.0f 라는 것이 보이는데
        // 실수형에 f가 오면 float 타입을 의미
        // 결국 f 를 쓰지 안흥면 double타입을 의미
        // 위의 방식을 '강제 캐스팅' 또는 'Type Casting' 이라고 한다.
        // break가 케이스마다 있는 것을 볼 수 있다.


        int fnum = (int)(num / 10.0f);
        System.out.println("실수형을 정수형으로 만든 값 = " + fnum);
        // 90~100 A 80~89 B 70~79 C 60~69 D 나머지 F
        //90~100 /10 = 9.0~10.0
        //80~89 /10 = 9.0~10.0
        //70~79 /10 = 9.0~10.0
        //60~69 /10 = 9.0~10.0
        //0~59 /10 = 9.0~10.0
        switch (fnum){
            case 10 :
            case 9 :
                System.out.println("당신의 등급은 A");
                break;
            case 8 :
                System.out.println("당신의 등급은 B");
                break;
            case 7 :
                System.out.println("당신의 등급은 C");
                break;
            case 6 :
                System.out.println("당신의 등급은 D");
                break;
            default :
                System.out.println("당신의 등급은 F");
                break;
                // switch 문 작성 방법 : switch() {}
            // 소괄호 내부에 조건(케이스가 될 숫자 등등)을 작성
            // 중괄호 내부에는 각각의 케이스를 'case.경우'로 작성한다
            // 각각의 케이스에서 동작할 코드를 작성하고 break한다
            // 필요하다면 break를 빼고/묶을 수도 있다.
            // 케이스가 뚜렷한경우엔 세세한 조작을 수행 할 수 있다. 그래서 대표적으로 컴파일러나 IDE 개발시 많이 나타난다.
            // 범위 또는 두루뭉술한 케이스 경우는  if문이 좋음.
            // Switch 문에서  default의 용도는 무엇인가요? case 각각의 케이스들을 적는다고 하였는데 해당하는 케이스가 하나도 없을 경우
            // default가 동작을 하게 된다.


        }
    }
}
