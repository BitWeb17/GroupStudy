3회차
public class AlternativeExercise8 {
    public static void main(String[] args) {
        int twoThreeSum=0;
        int fiveSum = 0;
        int sum =0;

        int i;

        for (i=1;i<31;i++) {
            if (i % 2 == 0 || i % 3 == 0) {
                //더하는 파트
                twoThreeSum += i;

            }
        }
            // 빼는파트
            for (i=1;i<31;i++){
            if(i % 5 ==0){
                fiveSum -=i;

            }

        }
        System.out.println("더하는값 ="+twoThreeSum);
        System.out.println("뺴는 값 ="+fiveSum);
        System.out.println("결과 ="+(twoThreeSum + fiveSum));

    }
}
public class BreakTest {
    public static void main(String[] args) {
        final int MAX = 11;
        int i = 1;

        while (i <MAX){
            System.out.println("i = " + i++);

        if(i == 5){
            System.out.println("걸렸다!");
            break;
        }

        }

        System.out.println("이건 어디서나 동작하는 녀석");
    }
}

public class CountinueTest {
    public static void main(String[] args) {
        final int MAX = 11;
        int i = 1;

        while (i <MAX){
            i++;

            // Q: 4가 왜 빠지나요?
            // A: continue 하는 시점이 5
            //    continue 하면 다시 루프로 올라간다.


            if(i == 5){
                System.out.println("걸렸다!");
                continue;
            }

            System.out.println("i =" + (i-1));

        }

        System.out.println("이건 어디서나 동작하는 녀석");
    }
}

public class Exercise7 {
    public static void main(String[] args) {
        // for를 사용해서 2의 배수만 출력하도록 프로그래밍 해보자!
        // 방식이 두가지 정도 있을 수 있는데
        // 앞서 소개했던 꼼수와 정석이 있다.
        // 원하는 형식으로 만들어보자.

        int i;

        for(i=1;;i++){
            if(i%2==0){
            System.out.println(i+"는 2의 배수 입니다:");
         }
        }


    }
}

public class Exercise8 {
    public static void main(String[] args) {
        //1~30 까지의 숫자중 2 혹은 3의 배수는 더하고
        //5의 배수는 뺀다.
        //혼동의 여지를 방지하기 위해
        //10처럼 2의 배수이면서 5의 배수가 되는 경우엔
        //빼기도 하고 더하기도 하므로 결론적으로 0

        // Q: 도대체 언제 0 을 설정해야 하는가요?
        // A: 컴퓨터는 초기값으로 0을 설정하지 않는다.
        //    기본적으로 컴퓨터는 초기 변수를 0으로 설정하지 않기 때문에
        //    0으로 초기화하지 않은 값은 알 수 없는 이상한 값을 가지고 있다.
        //    값을 누산하는 변수가 된다면
        //    잘못된 연산을 수행하지 않도록 0으로 초기화 해야 한다.

        //  ex) 현재 내가 가지고 있는 박스 A
        //      현재 A는 빈 박스
        //      친구네 집 박스는 B
        //      현재 B에는 2개가 들어있음
        //      B의 내용물을 A로 옮긴다 하면 자연스럽게 0 + 2 로 2가 된다.
        //      그러나 컴퓨터에 이를 명확하게 0으로 초기화 해주지 않으면
        //      ???(알 수 없는 미지의 값) + 2의 형식으로 진행된다.


        int sum =0;

        int i;

        for (i=1;i<31;i++){
            if(i % 2==0 || i %3==0){
                //더하는 파트
                sum += i;
                System.out.println("더하는 값:" +i);
            }
            // 빼는파트
            if(i % 5 ==0){
                sum -=i;
                System.out.println("빼는 값:" +i);
            }

        }

        System.out.println("결과 ="+sum);




    }
}


import java.util.Random;

public class Exercise9 {
    public static void main(String[] args) {
        //주사위 게임을 해보자!
        // 이 주사위 게임의 규칙은 다음과 같다.
        //홀수가 나오면 주사위를 계속해서 굴릴 수 있고
        //마지막에 짝수가 나오면 주사위를 멈춘다.
        //이때 마지막 주사위 눈금의 합을 구하도록 프로그래밍 해보자!

        //9-1 먼저 주사위 눈금을 출력하도록 프로그래밍 해본다.
        //9-2 주사위 눈금이 홀수인지 판정해본다.
        //9-3 먼저 무한루프에서 주사위가 굴러가도록 만든다.
        //9-4 특정 조건에서 반복이 멈추도록 만들어보자!
        //9-5 내용을 결합하여 9번 문제를 마무리 해보자!

        Random rand = new Random();

        for (;;){
            int dice= rand.nextInt(6)+1;
                        if (dice % 2 ==0){
                System.out.printf(dice   +":짝수다! 그만해: " );
                break;

            } else {
                System.out.println(dice + ":홀수다! 계속굴려라 ");
                continue;
            }


        }
    }
}
public class Exercise9Answer {
    public static void main(String[] args) {
       /* //9-1 먼저 주사위 눈금을 출력하도록 프로그래밍 해본다.
        int dice = (int) (Math.random() * 6) +1;

        System.out.println("주사위 눈금 : " + dice);

        //9-2 주사위 눈금이 홀수인지 판정해본다.
        if(dice % 2 ==0){
            System.out.println("짝수 : " + dice );
        }else{
            System.out.println("홀수 : " + dice);
        }

        //9-3 먼저 무한루프에서 주사위가 굴러가도록 만든다.

        for(;;){
            int dice2 = (int) (Math.random() * 6) +1;

             if(dice2 % 2 ==0){
             System.out.println(dice2+":  짝수입니다");

             }else{
             System.out.println( dice2 + ":  홀수입니다 다시 굴리세요");
             }

        }

       //9-4 특정 조건에서 반복이 멈추도록 만들어보자!
        for(;;){
            int dice2 = (int) (Math.random() * 6) +1;

            if(dice2 % 2 ==0){
                System.out.println(dice2+":  짝수입니다");
                break;

            }else{
                System.out.println( dice2 + ":  홀수입니다 다시 굴리세요");
            }

        }
        */
        //9-5 합을 구해보자
        int sum =0;
        for(;;){

            int dice = (int) (Math.random() * 6) +1;
            System.out.println("주사위 눈금=" + dice);

            sum+=dice;
            if(dice % 2 ==0){
                System.out.println(":  짝수입니다");
                break;
            }else{
                System.out.println( ":  홀수입니다 다시 굴리세요");

             }


        }System.out.println("총합은: " + sum);



    }
}





public class ForTest {
    public static void main(String[] args) {
        int i;

        // for 문을 작성하는 방법
        // 1. for를 적고 소괄호를 열고 닫고 중괄호를 열고 닫는다.
        // 2. for의 소괄호 구성은 아래와 같다.
        //    (초기화; 조건; 증감부) 형식으로 구성된다.
        //     초기화 부분이 없을 수도 있으며
        //     조건이 없을 수도 있고
        //     증감부가 없을 수도 있다.
        //     모든것이 없다면 무한 루프가 될 수 있다.
        // 3.  중괄호 내부에는 while 과 마찬가지로 반복시킬 내용을 작성한다.

        // for 문을 보는 방법
        // for(i= 0; i <3;i++)의 의미가 무엇인가?
        // i = 0: 초기화 부분
        // 초기화 부분은 for문 진입시 최초로 한 번만 수행된다.
        // 반복하는 도중에는 초기화 부분을 실행하지 않는다.
        // i < 3: 조건이 만족되는 동안 반복을 한다.
        // i ++ : 증감은 i += 2와 같은 형식으로도 작성이 가능하다.

        // 동작 과정
        // 초기화: 최초로 한번만
        // 조건:  조건이 만족되는 동안만 반복 -> 조건이 만족되면 중괄호로 이동
        // 증감부: 값을 증가하거나 감소시킴 -> 증감이후에 조건을 확인함


        for (i =0; i <3; i++){
            System.out.println("i =" + i);
            // 중괄호 내용이 완료되면 증감부로 이동한다.

        }

        for (int j= 0; j < 4; j++){
            System.out.println("j =" +j);
        }

        System.out.println("나는 여기서도 나와 ="+ i);
        //System.out.println("나는 왜 안돼?" +j)
        // 더이상 main 내에서 j 살아있는 변수가 아니기 때문이다.
    }
}

public class MathRandom {
    public static void main(String[] args) {
        int randNum = (int) Math.random();

        System.out.println("임의의 랜덤 숫자 =" + randNum);
        // 이 결과는 계속 0이 나올 것이다.
        // 왜 0.0. ~ 1.0 사이의 값이 나오기 때문이다.

        randNum = (int)(Math.random() * 10);
        System.out.println("0 ~ 10 사이의 랜덤 숫자 =" + randNum);
    }
}
public class Quiz {
    public static void main(String[] args) {
        //응용 문제 1.
        //2 ~19 사이의 숫자를 출력해보자!
        int num = 2;
        while (num < 20) {
            System.out.println("출력값:" + num++);
        }
    }
}


public class Quiz2 {
    public static void main(String[] args) {
        //응용 문제2.
        //2 ~ 19 사이의 숫자중 짝수만 찾아보자!
        int num =2;
        while (num < 20){
            // if문 내부에 num++이 들어있을 경우
            // 조건을 만족하는 경우에만 +1이 되므로
            // 무한 반복을 하며 같은 숫자만 출력하게 된다.
            if (num % 2== 0){
                System.out.println("num = "+ num);
            }
            // 조건에 관계없이 지속적으로 값을 상승시키기 위함
            num++;
        }



    }
}
import java.sql.SQLOutput;

public class Quiz3 {
    public static void main(String[] args) {
        //응용 문제3.
        //2 ~ 19 사이의 숫자중 짝수의 합을 구해보자!
        int num =2;
        int sum = 0;
        while (num < 20){
            // if문 내부에 num++이 들어있을 경우
            // 조건을 만족하는 경우에만 +1이 되므로
            // 무한 반복을 하며 같은 숫자만 출력하게 된다.
            if (num % 2== 0){
                System.out.println("num = "+ num);
                // sum = sum + num 과 동의어
                sum += num;
                // sum = sum -num
                // sum -= num

                // sum = sum*num
                // sum *= num

                // sum = sum % num
                // sum = %= num
            }
            // 조건에 관계없이 지속적으로 값을 상승시키기 위함
            num++;
        }
        System.out.println("2 ~ 19 까지 짝수들의 합"+ sum);





    }
}
import java.util.Random;

public class Quiz4 {
    public static void main(String[] args) {
        //응용 문제4.
        //A의 주사위와 B의 주사위를 만들고
        //주사위를 각자 굴려서
        //더 높은 숫자가 나온사람이 이기게 만들어 보자

        Random rand = new Random();
        int dice1 = rand.nextInt(6)+1;
        int dice2 = rand.nextInt(6)+1;


        // System.out.printf
        // System.out.println
        // System.out.printint
        // 각각의 차이점은 무엇인가?
        // print는 단순히 출력을 수행하며 엔터 입력이 제외된다.
        // println은 출력과 함께 엔터가 입력된다.
        // printf는 특정한 포맷을 가지고 출력된다.
        // 여기서 %d 와 \n 은 서식에 해당한다
        // \n 의 경우가 엔터입력에 해당한다.
        // %d %d %d 형식으로 오게 될 경우
        // 구분자 'n'를 통해 각각에 값이 대입되는 형식으로 사용됨
        // 주의할점은 %d의 경우 정수형(int)만 가능하며
        // %f의 경우 실수형(float, double)만 가능하다.

        //printf의 장점:
        System.out.printf("A 승리! %d vs %d\n", dice1,dice2);
        System.out.println("A 승리!" +dice1 + "vs" + "B 승리!" +dice2);

        System.out.printf("주사위1: " + dice1);
        System.out.println("주사위2: "+ dice2);
     if(dice1 > dice2){
         System.out.println("주사위1 승리");
     }else if(dice1 == dice2){
         System.out.println("무승부");
     }
     else{
         System.out.println("주사위2 승리");

     }
    }
}
public class Quiz5 {
    public static void main(String[] args) {
        //응용 문제5.
        //피보나치 수열을 프로그래밍으로 구현해보자!
        // 구체적으로 13번째 항의 숫자를 구하도록 만들어보자!

        //힌트!
        //숫자가 올라가는 규칙을 찾아야한다.
        //구현을 한다 했을 경우 while()을 사용해야함
        //첫번째 더할 값, 두번째 더할값, 계산한 값의 변수가 3개 필요함
        final int TARGET = 13;
        final int ALREADY =2;
        int loop = 0;
        int first=1, sencond=1, res =0;

        //first second res
        // 1     1      2
        // 1     2      3
        // 2     3      5
        // 3     5      8



        //2는 왜 빼나요?
        // 첫번째항 + 두번째항 = 결과
        while ( loop < TARGET- ALREADY){
            res =  first + sencond;
            first = sencond;
            sencond = res;


            loop++;

        }

        System.out.println("res = " + res);


    }
}
public class QUiz6 {
    public static void main(String[] args) {
        //응용 문제6
        //1, 1, 3, 4, 5, 8, 12, 17, 25, 37, 54, 79 위 수열에서 20번째 숫자를 찾도록 프로그래밍 해보자
        final int TARGET = 20;
        final int ALREADY =3;

        int loop = 0;
        int first=1, sencond=1, third= 3, res =0;

        // 1  2  3
        // 1  3  4
        // 1  4  5
        // 3  5  8
        // 4  8  12
        // 5  12  17
        while ( loop < TARGET- ALREADY){
            res =  first + third;
            first = sencond;
            sencond = third;
            third = res;




            loop++;

        }

        System.out.println("res = " + res);



    }
}
public class Quiz7 {
    public static void main(String[] args) {
        // 1~10까지의 숫자중 7을 만나면 종료하도록 출력해보자!
        final int MAX = 11;
        int i = 1;

        while (i <MAX){
            System.out.println("i = " + i);

            if(i == 7){
                break;
            }
            i++;

        }

    }
}
public class Quiz8 {
    public static void main(String[] args) {
        final int MAX =10;
        int i = 0;

        while ( i< MAX){
            i++;

            if (i == 8){
               continue;
            }

            System.out.println("i= "+ i);

        }


    }
}
import java.util.Random;

public class RabdomInst {
    public static void main(String[] args) {
        // 우선은 사용법 위주로 보면 됩니다.
        Random rand = new Random();

        // bound는 범위의 개수를 지정하는 녀석임
        // 입력할 필요가 없으며 자동 완성 기능으로 나타나는 것
        int randNum = rand.nextInt(2);
        System.out.println("0 ~ 1 까지 2개의 값을 뽑아요: " + randNum);

        randNum = rand.nextInt(6);
        System.out.println("0 ~ 5 까지 6개의 값을 뽑는다: " + randNum);

        // 왜 ? rand.nextInt(6) + 1 이 1 ~ 6까지가 되나요 ?
        // rand.nextInt(6)의 범위가 0 ~ 5로 6개
        // 0 ~ 5 전체에 1을 더하면 ?
        // 1 ~ 6
        randNum = rand.nextInt(6) + 1;
        System.out.println("1 ~ 6 까지 주사위 굴리기: " + randNum);
    }
}

public class WhileTest {
    public static void main(String[] args) {
        //1 ~ 10 까지 출력해보기 ~
        int num =1;

        // while 문을 작성하는 방법
        // 1. while을 적고 괄호를 열고 닫고 중괄호를 열고 닫는다.
        // 2. 괄호 안에 조건을 작성한다.
        //     (조건이 만족하는 동안 반복)
        // 3. 반복시킬 내용을 중괄호 내부에 작성한다.

        // num < 11이 조건이 되었으며
        // phase 1) 현재 num값이 1 이므로 조건은 참이 된다.
        // phase 2) 다시 위의 조건을 검사하고 num은 2이므로 참이다.
        //.......
        // phase 10) 현재 num은 10일 것임
        // phase 11) 현재 num이 11이므로 조건이 거짓이 된다.

        while (num < 11){
            // phase 1) 현재 num 값을 뿌리고 num 값을 1 증가시킨다.
            // phase 2) 현재 num 값을 뿌리고 num 값을 1 증가시킨다.
            System.out.println("num = " + num++);
        }
        System.out.println("마지막 num = "+ num);

        //응용 문제 1.
        //2 ~19 사이의 숫자를 출력해보자!
        int num2 = 2;
        while ( num2 < 20){
            System.out.println("출력값:" + num2++);
        }
        //응용 문제2.
        //2 ~ 19 사이의 숫자중 짝수만 찾아보자!
        int num3 = 2*num;
        while (num3 <20){
            System.out.println("짝수 출력값 : " + num3++);
        }



        //응용 문제3.
        //2 ~ 19 사이의 숫자중 짝수의 합을 구해보자!

    }
}






