1. BreakEx1

public class BreakEx1 {
    public static void main(String[] args) {

        // 1~10까지의 숫자 중 7을 만나면 종료

        final int TARGET = 11;
        int i = 1;


        while(i < TARGET){

             if(i==7){
                break;
             }

            System.out.println("숫자 : " + i);

            i++;
        }
    }
}



2. BreakEx2

public class BreakEx2 {
    public static void main(String[] args) {

        // 1~10까지 숫자 중 8만 제외하고 출력

        int i = 0;
        final int MAX = 10;

        while (i < MAX){

            i++;

            if(i == 8){
                continue;
            }

            System.out.println(" 숫자 = " + i);
        }
    }

}



3. BreakTest

public class BreakTest {
    public static void main(String[] args) {
        final int MAX = 11;
        int i = 1;

        while(i < MAX){
            System.out.println("i = " + i++);

            if(i==5){
                System.out.println("걸렸다!");
                // 반복 내에서 break하는 순간 반복 자체를 종료함
                break;
            }
        }
        System.out.println("언제나 동작하는 녀석");
    }
}



4. ContinueTest

public class ContinueTest {
    public static void main(String[] args) {
        final int MAX = 11;
        int i = 1;

        while(i < MAX){
            i++;

            // Q : 4가 왜 빠지나요?
            // A : continue 하는 시점이 5
            //     continue를 하면 다시 루프로 올라간다.
            //     다시 올라가서 ++을 하므로 6
            if(i==5){
                System.out.println("걸렸다!");
                // continue를 수행하면
                // 현재 진행하던 작업을 멈추고 다시
                // 루프(반복)의 최상위로 이동한다.
                continue;
            }
            System.out.println("i = " + (i-1));
        }
        System.out.println("언제나 동작하는 녀석");
    }
}



5. ForEx1

public class ForEx1 {
    public static void main(String[] args) {

        //for을 사용해서 2의 배수만 출력하도록 프로그래밍 하자
        // 방식이 두 가지
        for(int i = 0; i<11 ; i+=2){
                System.out.println("i = " + i);
        }

        System.out.println("if문을 활용한 짝수 판정");

        for(int i = 1; i<11; i++){
            if(i%2 == 0){
                System.out.println("i = " + i);
            }
        }
    }
}



6. ForEx2

public class ForEx2 {
    public static void main(String[] args) {
        // 1~30까지 숫자 중 2 혹은 3의 배수는 더하고 5의 배수는 뺀다.
        // 10처럼 2의 배수이면서 5의 배수가 되는 경우엔
        // 빼기도 하고 더하기도 하므로 결론적으로 0
        int sum=0;

        // Q : 도대체 언제 0을 설정해야 하는가요?
        // A : 컴퓨터 초기값으로 0을 설정하지 않는다.
        //     기본적으로 컴퓨터는 초기 변수를 0으로 설정하지 않기 때문에
        //     0으로 초기화하지 않은 값을 알 수 없는 이상한 값을 가지고 있다.
        //     값을 누산하는 변수가 된다면 잘못된 연산을 수행하지 않도록 0으로 초기화해야 한다.

        // ex) 현재 내가 가지고 있는 박스 A
        //     현재 A는 빈 박스
        //     친구네 집 박스는 B
        //     현재 B에는 2개가 들어있음
        //     B의 내용물을 A로 옮긴다 하면 자연스럽게 0+2로 2가 된다.
        //     그러나 컴퓨터에 이를 명확하게 0으로 초기화해주지 않으면
        //     ??(알 수 없는 미지의 값) + 2의 형식으로 진행된다.
        for(int i=1;i<31;i++){
            if(i%2==0 || i%3==0){
                sum+=i;
                System.out.println("더하는 값 = " + i);
            }
            if (i%5==0){
                sum-=i;
                System.out.println("빼는 값 = " + i);
            }
        }
        System.out.println("합계 : " + sum);
    }
}



7. ForEx3

import java.util.Random;

public class ForEx3 {
    public static void main(String[] args) {
        // 홀수가 나오면 주사위를 계속해서 굴릴 수 있고
        // 마지막에 짝수가 나오면 주사위를 멈춘다.
        // 마지막 주사위 눈금을 구하자

        // int diceSum = 0;
        // for (;;) {
        // int dice = (int)(Math.random()*6) + 1;

        // System.out. println("주사위 눈금 = " + dice);

        // diceSum += dice;

        // if(dice % 2 == 0){
        //    System.out.println("짝수입니다.");
        //    break;
        // } else{
        //    System.out.println("홀수입니다.");
        // }
        //}
        // System.out.println("최종 결과 = " + diceSum);
        Random rand = new Random();
        int dice = 0;
        int diceSum = 0;

        for (; ; ) {
            dice = rand.nextInt(6) + 1;
            System.out.println("주사위 눈금 : " + dice);

            diceSum += dice;

            if (dice % 2 == 0) {
                break;
            }
        }
        System.out.println("최종 결과 = " + diceSum);
    }
}



8. ForEx2_2

public class ForEx2_2 {
    public static void main(String[] args) {
        int sum=0;

        for(int i=1;i<31;i++){
            if(i%2==0 || i%3==0){
                sum+=i;
                System.out.println("더하는 값 = " + i);
            }
            if (i%5==0){
                sum-=i;
                System.out.println("빼는 값 = " + i);
            }
        }
        System.out.println("합계 : " + sum);
    }
}



9. ForTest

public class ForTest {
    public static void main(String[] args) {
        int i;

        // for문을 작성하는 방법
        // 1. for를 적고 소괄호를 열고 닫고 중괄호를 열고 닫는다.
        // 2. for의 소괄호 구성은 아래와 같다.
        //    (초기화; 조건; 증감부) 형식으로 구성된다.
        //    초기화 부분이 없을 수도 있으며
        //    조건이 없을 수도 있고
        //    증감부가 없을 수도 있다.
        //    모든 것이 없다면 무한 루프가 될 수 있다.
        // 3. 중괄호 내부에는 while과 마찬가지로 반복시킬 내용을 작성한다.

        // for문을 보는 방법
        // for(i=0; i<3; i++)의 의미
        // i = 0 : 초기화 부분
        // 초기화 부분은 for문 진입시 최초로 한 번만 수행된다.
        // 반복하는 도중에는 초기화 부분을 실행하지 않는다.
        // i < 3 : 조건이 만족되는 동안 반복을 한다.
        // i++ : 증감은 i+=2 와 같은 형식으로도 작성이 가능하다.

        // 동작 과정
        // 초기화 : 최초로 한 번만
        // 조건 : 조건이 만족되는 동안만 반복 -> 조건이 만족되면 중괄호로 이동
        // 증감부 : 값을 증가하거나 감소시킴 -> 증감 이후에 조건을 확인함
        for(i=0; i<3; i++){
            System.out.println("i = " + i);
            // 중괄호 내용이 완료되면 증감부로 이동한다.
        }

        for(int j=0; j<4; j++){
            System.out.println("j = " + j);
        }

        System.out.println("나는 여기서도 나와 = " + i);
        // System.out.println("나는 왜 안돼? " + j);
        // 더 이상 main 내에서 j가 살아있는 변수가 아니기 때문이다.
    }
}



10. InfinityLoopTest

public class InfinityLoopTest {
    public static void main(String[] args) {
        // 조건이 없다? 무 조 건

        for(; ;){
            System.out.println("가자");
        }
    }
}



11. InfinityLoopTest2

public class InfinityLoopTest2 {
    public static void main(String[] args) {
        int i = 1;
        for (; ;i++){
            System.out.println("i = " + i);
        }
    }
}



12. MathRandom

public class MathRandom {
    public static void main(String[] args) {
        int randNum = (int)Math.random();

        System.out.println("임의의 랜덤 숫자 = "+randNum);

        // 이 결과는 계속 0이 나올 것이다.
        // 왜? 0.0 ~ 1.0(포함x) 사이의 값이 나오기 때문이다.

        randNum = (int)(Math.random()*10);
        System.out.println("0 ~ 10 사이의 랜덤 숫자 = "+randNum);

        randNum = (int)(Math.random()*2);
        System.out.println("0 ~ 1 사이의 랜덤 숫자 = "+randNum);

        randNum = (int)(Math.random()*6 + 1);
        System.out.println("주사위를 굴리자 = "+randNum);
    }
}



13. RandomEx1

public class RandomEx1 {
    public static void main(String[] args) {
        // 주사위 10번 굴려서 홀수 더하고 짝수 빼기
        // 총합 구하기
        int diceSum = 0;
        int evenSum = 0, oddSum = 0;

        for(int i=0;i<10;i++){
            int dice = (int)(Math.random()*6) + 1;

            System.out.println("값 : " + dice);

            if(dice%2 == 0){
                evenSum += dice;
                diceSum -= dice;
            }else{
                diceSum += dice;
                oddSum += dice;
            }
        }
        System.out.println("주사위 총합 : " + diceSum);
        System.out.println("짝수 합 = "+ evenSum);
        System.out.println("홀수 합 = " + oddSum);
    }
}



14. RandomInst

import java.util.Random;

public class Randominst {
    public static void main(String[] args) {
        Random rand = new Random();

        // bound는 범위의 개수를 지정함
        // 입력할 필요가 없으며 자동 완성 기능으로 나타나는 것
        int randNum = rand.nextInt(2);
        System.out.println("0~1까지의 2개의 값을 뽑아요: "+randNum);

        randNum = rand.nextInt(6);
        System.out.println("0~5까지 6개의 값을 뽑는다 : "+randNum);

        // rand.nextInt(6)의 범위가 0~5로 6개
        // 1 ~ 6
        randNum = rand.nextInt(6)+1;
        System.out.println("1~6까지 주사위 굴리기"+randNum);
    }
}



15. WhileEx

public class WhileEx {
    public static void main(String[] args) {
        // 2 ~ 19 사이의 숫자를 출력해보자
        int num = 2;

        while (num<20){
            System.out.println("num = "+ num++);
        }
    }
}



16. WhileEx2

public class WhileEx2 {
    public static void main(String[] args) {
        // 2 ~ 19 사이의 숫자 중 짝수만 찾아보자
        int num = 1;

        while (num<19){
            num = num + 1;
        if(num%2==0) {
            System.out.println(num+"은 짝수입니다.");
        }
        }
    }
}
// int num = 2;
// while(num<20){
//       if문 내부에 num++이 들어있을 경우
//       조건을 만족하는 경우에만 +1이 되므로
//       무한 반복을 하며 같은 숫자만 출력하게 된다.
//   if(num%2==0){
//      System.out.println("num = " + num);
//   }

//   조건에 관계없이 지속적으로 값을 상승시키기 위함
//   num++;



17. WhileEx3

public class WhileEx3 {
    public static void main(String[] args) {
        // 2 ~ 19 사이의 숫자 중 짝수의 합을 구해보자
        int num = 2;
        int sum = 0;

        while (num < 20) {
            sum += num ;
            num = num + 2;
        }
        System.out.println("합 : "+sum);
    }
}
// while(num<20){
//   if(num % 2 == 0){
//      System.out.println("num = " + num);
//      sum += num;      // sum + num = sum;
//   }
//   num++;
// }
// System.out.println("2 ~ 19까지 짝수들의 합 = " + sum);



18. WhileEx4

import java.util.Random;

public class WhileEx4 {
    public static void main(String[] args) {
        // A, B 주사위를 굴려 더 높은 숫자 나온 사람 이김
        Random rand = new Random();
        int i=0;

        while (i < 100) {
            int randNum1 = (int) (Math.random() * 6) + 1;
            int randNum2 = rand.nextInt(6) + 1;

            // print는 단순히 출력을 수행하며 엔터 입력이 제외된다.
            // println은 출력과 함께 엔터가 입력된다.
            // printf는 특정한 포맷(서식)을 가지고 출력된다.
            // 여기서 %d와 \n은 서식에 해당한다.
            // %d %d %d 형식으로 오게 될 경우
            // 구분자 ','을 통해 각각에 값이 대입되는 형식으로 사용됨
            // 주의할 점은 %d의 경우 정수형(int)만 가능하며
            // %f의 경우 실수형(float, double)만 가능하다.

            // printf의 장점 :
            // printf("A 승리! %d vs %d\n", diceA, diceB);
            // println("A 승리! " +diceA + " vs " +diceB);
            if (randNum1 > randNum2) {
                System.out.printf("1번 승리! %d vs %d", randNum1, randNum2);

            } else if (randNum1 < randNum2) {
                System.out.printf("2번 승리! %d vs %d", randNum1, randNum2);
            } else{
                System.out.printf("무승부! %d vs %d", randNum1, randNum2);

            }

        }
    }
}



19. WhileEx5

public class WhileEx5 {
    public static void main(String[] args) {
// 피보나치 수열 13번째 항 구하기
        int first=1, second=1, res=0;
        int loop = 0;

        final int TARGET = 13;
        final int ALREADY = 2;

        // 2 빼는 이유
        // 첫번째 항 + 두번째 항 = 결과
        while(loop< TARGET - ALREADY){
            res = first + second;
            first = second;
            second = res;

            loop++;

        }
        System.out.println("res = " + res);
    }
}



20. WhileEx6

public class WhileEx6 {
    public static void main(String[] args) {
        // 1, 1, 3,4,5,8,12,17,25,37,54,79
        // 위 수열에서 20번째 숫자 찾기
        int first=1, second=1, third=3, res=0;
        int loop = 0;

        final int TARGET = 20;
        final int ALREADY = 3;

        while(loop< TARGET-ALREADY){
            res = first + third; // 4=1+3; 5=1+4;
            first = second; // 1;
            second = third;
            third = res; // 4


            loop++;

        }
        System.out.println("res = " + res);
    }
}



21. WhileTest

public class WhileTest {
    public static void main(String[] args) {
        // 1 ~ 10까지 출력해보기
        int num = 1;

        // while문을 작성하는 방법
        // 1. while을 적고 괄호를 열고 닫고 중괄호를 열고 닫는다.
        // 2. 괄호 안에 조건을 작성한다.
        //    (조건이 만족하는 동안 반복)
        // 3. 반복시킬 내용을 중괄호 내부에 작성한다.

        // num < 11이 조건이 되었으며
        // Phase 1) 현재 num값이 1이므로 조건이 참이 된다.
        // Phase 2) 다시 위의 조건을 검사하고 num은 2이므로 참이다.
        // ......
        // Phase 10) 현재 num은 10일 것임
        // Phase 11) 현재 num이 11이므로 조건이 거짓이 된다.

        while( num < 11){
            // Phase 1) 현재 num값을 뿌리고 num값을 1 증가시킨다.
            // Phase 2) 다시 위의 조건을 검사하고 num은 2이므로 참이다.
            // ......
            // Phase 10) 현재 num 값을 뿌리고 num 값을 1 증가
            System.out.println("num = " + num++);
        }
        System.out.println("마지막 num = "+num);
    }
}

