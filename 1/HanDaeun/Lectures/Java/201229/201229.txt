 public class HelloJava{				// 클래스 만들 때
	public static void main(String []args){		// start 메소드 (main method)
						// 어떤 일을 할 것인지를 나열 (문법에 맞게, 논리적으로)
		System.out.print("Hello~~ JAVA");
		System.out.println("Hello~~ JAVA");
	}
}

-----------------------------------------------------------------------------------

    .java   ==컴파일, 인터프리터==>   .class
원시파일                                            바이너리 2진파일
사람이 잘 이해                                   기계
HelloJava.java  ====>  javac HelloJava.java  ====>
HelloJava.class  ====>  java HelloJava


컴파일 : 처음부터 끝까지 문법적으로 맞는지 확인
- 완전컴파일 : 에러 0 여야 실행 가능
인터프리터 : 한행마다 문법적으로 맞는지 확인

.com / .exe 실행파일, 응용실행파일

-----------------------------------------------------------------------------------

통합 개발 환경 (IDE, Integrated Development Enviroment)
: 공통된 개발자 툴을 하나의 그래픽 사용자 인터페이스(Graphical User Interface, GUI)로 결합하는 애플리케이션을 구축하기 위한 소프트웨어

-----------------------------------------------------------------------------------

Default output folder:
standard output : 모니터
Hello/bin     // bin(ary) - class 와 java 파일 분리

파일 옮길 때는 src 폴더만 가져감
Run Configurations - Main class: bit.com.HelloCorona19 -> 풀네임

- .jar :
- .war :
- .ear : 

- Executable Jar File : 자체적으로 실행 파일 있음

- syso 치고 Ctrl + Space Bar : System.out.println();
- Ctrl + +/- : 글씨 크기 조절
- Ctrl + / : 주석 처리

-----------------------------------------------------------------------------------

1. 이클립스 설치
  - zip : 풀어서 사용 (설치 X) / 여러군데 압축 풀어 사용 가능
            -> 정확한 경로 파악 중요
  - exe : 설치 가이드 파일이랑 같음

이클립스 실행 안될 때
- eclipse.ini 수정

readme_eclipse 파일 활용


2. 환경 설정
java - version, 위치
Window - Preferences - Java - Installed JREs - Add - Standard VM - JRE home: C:\Program Files\Java\jdk1.8.0_271
Window - Preferences - Java - Compiler - Compiler compliance level: 1.8
java 파일은 project 기반으로 생성
- File - New - Project - Java Project - Project name: Hello - SCR

File - Export - General - Archive File : 작업한 환경 그대로 가져감
File - Import - General - Existing Projects into Workspace
- Select root directory: - Brose... - 
-----------------------------------------------------------------------------------

[ JAVA 언어의 기본 ]


Data Type

(1) 입력
- 키보드 등의 매체에서 데이터를 읽어오거나 기억함
- 데이터 / 데이터를 담을 공간
- 사이즈

(2) 연산
(3) 출력

1. 연산 가능 ( a + b )
- 4 : 정수 / 4. : 실수 / 4 + 4. = 4. + 4. = 8.0
- a :  / 'a' : 문자(Character) -> 내부적으론 숫자로 인식 / "a" : 문자열 ====> 'ab' (X) / "ab" (O)
- 'a' + 1 = 98 or 'b'

- 'a' + true = ERROR

  < 원시 자료형 > 
    (0) boolean : 논리자료형
- true / false
=======================
- size별, 문자별, 수치별
    (1-1) byte = 8자리, 256개(-128 ~ -1 / 0~127 )
    (1-2) char, short = 16자리 = 2바이트 
- char : 유니코드 - 65536
- short : (-32768 ~ 32767)

    (1-3) int = 32자리
- (-21억 ~ 21억)

    (1-4) long = 64자리
---------------------------------------
    (2-1) float
    (2-2) double

---------------------------------------

시큐어 코딩



2. 연산 불가능
"4'        '4'      4
String  char  int
"4" + "4" =
4 + 4 = 
'4' + '4' = 
  < 객체 자료형 >
    (1) Date
    (2) System
    (3) String



연산자
- ALU
- 최우선 : () / {} / [] / .

  < 단항 연산자 >
ex) -4, !isMan
    (1) -
    (2) not 연산자 : !
    (3) 증감 연산자 (1씩 증가, 감소) : ++ / --
- a++ : 후증가
- ++a : 선증가   -> 다른 항과 같이 있을 때만 적용


  < 이항 연산자 >
    (1) 산술 연산 (1순위 처리)
- *, /, % (우선)
- +, -
    (2) 관계 연산 (2순위 처리)
- > (great then), < (less then), ==, !=, >=, <=
ex) kg >= 50
    (3) 논리 연산 (3순위 처리)
(bit wise)
- &, |

(short cut)
- || (or) : 둘 중 하나라도
- && (and) : 둘 다
kor = 70, eng = 40
ex) kor < 60 || eng < 60           (과락)
      70  < 60 ||  40  < 60
       false      ||     true
         0         +      1            =    1 (true 과락)

      eng < 60 || kor < 60
        true                            = true

ex) kor >= 60 && eng >= 60  (통과)
      70  >= 60 &&  40  >= 60
        true        &&        false
          1            *             0   =    0 (false 과락)

      eng >= 60 && kor >= 60
         false                            = false




 < 삼항 연산자 >
    (1) 변수명 = ( 조건 ) ? 만족할때 넘겨줄 데이터 : 만족하지 않을때 넘겨줄 데이터
    (2) 대입 =  ,  +=  ,  *=  , .......
- a = a + b;
- a += b;
- c = a *= b /= y +=6;
- 0 = 5*0 <- 4/13 <- 7+6
- c = a = a*b = b/y = y+6;



제어문
- if : 만약에 ~라면
- for : 5번 반복해서 XX
- while : 현금인출기 돈통에 돈이 있는 동안만 반복
- 중첩 : for (if, break, continue)