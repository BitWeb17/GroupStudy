import java.util.Scanner;

public class Exercise5 {
    public static void main(String[] args) {
        System.out.println("2의 n승을 판정해보자!");

        Scanner scan = new Scanner(System.in);
        System.out.print("아무런 숫자나 입력해보세요: ");

        int num = scan.nextInt();
        System.out.println("입력값은 = " + num);

        // 2의 n승이란 ?
        // 0000 0001    1
        // 0000 0010    2
        // >>>>>>>>>>>>>>
        // 0000 0011    3
        // <<<<<<<<<<<<<<
        // 0000 0100    4
        // >>>>>>>>>>>>>>
        // 0000 0101    5
        // <<<<<<<<<<<<<<
        // >>>>>>>>>>>>>>
        // 0000 0110    6
        // <<<<<<<<<<<<<<
        // 0000 1000    8
        // 0001 0000    16
        // 0010 0000    32
        // 0100 0000    64
        if(num == 0) {
            System.out.println("0 입니다.");
        }

        // Q:   조건식에 괄호가 없으면 왜 오류인가 ?
        // A:   아래 코드를 보면 빨간줄이 나오는데, 빨간줄에 커서를 갖다 대면 required type: boolean
        //      provided type: int 라는 차이 보일 것이다.
        //      컴퓨터가 요구하는 타입은 boolean(논리형)인데, 사용자가 작성하여 제공한 타입이 int 형이기 때문에 오류!

        //      case B의 경우엔 '==' 같은가요? 라는 질문이다.
        //      이 질문에 대한 답은 yes(true) 혹은 no(false) 뿐이다.

        //      boolean은 참 혹은 거짓을 표하는 데이터 타입이다.

        //      case C의 경우엔 에러 메시지가 아래와 같다.
        //      Operator '&' cannot be applied to 'int', 'boolean'
        //      비트 연산자 AND는 int와 boolean간에 적용이 불가능하다.
        //      산술 비트 연산은 정수형 변수 혹은 상수(3, 5 등등)끼리 가능하다.
        //      연산자 우선순위가 & 보다 == 이 높아서 이런 현상이 발생함

        // Q:   case A의 괄호는 조건이 아닌가요 ?
        // A:   단순히 산술 연산식입니다.
        //      조건이 되려면 case B나 C처럼 질문을 해야 함.
        //      그러면 질문에 대한 답이 false(거짓) 혹은 true(참)으로 나옴

        // case A:  if(num & (num - 1))
        // case B:  if( (num & (num - 1)) == 0 )
        // case C:  if(num & (num - 1) == 0)

        // Q:   2의 n승을 판정하는 알고리즘이 이해가 안갑니다.
        // A:   일단은 2의 n승이 가지는 특성을 살펴봐야 한다.
        //      대표적인 특성이 2의 n승과 2의 n승 - 1 의 특성임임

        // 15 = 01111(2): 2^4 - 1
        // 16 = 10000(2): 2^4
        //
        // 7 = 00111(2): 2^3 - 1
        // 8 = 01000(2): 2^3
        //
        // 3 = 00011(2): 2^2 - 1
        // 4 = 00100(2): 2^2

        // 2진수 특성상 2의 n승에서 1을 빼면 해당 자리수가 0이 되고 나머지 아래의 자리값은 모두 최대값이 된다.

        // 10000


        // int res = num & (num - 1);
       if( (num & (num - 1)) == 0 ) {
            System.out.println("입력 숫자 " + num + "은 2의 n승입니다.");
        } else {
            System.out.println("입력 숫자 " + num + "은 2의 n승이 아닙니다.");
        }
    }
}
