[{"/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JS_Homework/src/reportWebVitals.js":"1","/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JS_Homework/src/index.js":"2","/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JS_Homework/src/hw_21_01_29/RandomMember.js":"3","/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JS_Homework/src/hw_21_01_28/Review.js":"4"},{"size":362,"mtime":1611909125409,"results":"5","hashOfConfig":"6"},{"size":538,"mtime":1612119432748,"results":"7","hashOfConfig":"6"},{"size":1835,"mtime":1612119403375,"results":"8","hashOfConfig":"6"},{"size":5446,"mtime":1612119431624,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1op48kt",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JS_Homework/src/reportWebVitals.js",[],["20","21"],"/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JS_Homework/src/index.js",[],"/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JS_Homework/src/hw_21_01_29/RandomMember.js",["22","23"],"/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JS_Homework/src/hw_21_01_28/Review.js",["24","25","26"],"const Review = () => {\n    var cars = ['BMW', 'Volvo', 'Audi', 'Toyota', 'Tesla']\n\n    console.log(\"배열데이터 타입: \" + cars)\n\n    var num1 = 3\n    var num2 = 3\n    var num3 = 7\n\n    var boolRes1 = (num1 === num2)\n    var boolRes2 = (num1 === num3)\n\n    console.log(\"논리연산자 타입 [3 == 3]: \" + boolRes1)\n    console.log(\"논리연산자 타입 [3 == 7]: \" + boolRes2)\n\n    var testNum = 0\n    var testStr = \"0\"\n\n    var boolRes3 = (testNum == testStr)\n    var boolRes4 = (testNum === testStr)\n\n    console.log(\"논리연산자 타입 [0 == \\\"0\\\"]: \" + boolRes3)\n    // 데이터를 가지고 논리연산함\n    console.log(\"논리연산자 타입 [0 === \\\"0\\\"]: \" + boolRes4)\n    // 데이터타입을 가지고 논리연산함s\n\n \n    const itemArr = [\n        {\n            name: \"GPU\",\n            price: 3000000,\n            quantity: 1,\n        },\n        {\n            name: \"CPU\",\n            price: 600000,\n            quantity: 3,\n        },\n        {\n            name: \"MASIC\",\n            price: 120000000,\n            quantity: 50,\n        },\n    ]\n\n    console.log(\"JSON.stringify(itemArr): \" + JSON.stringify(itemArr))\n    // 위에서 정의한 것처럼 출력됨 (name: \"GPU\", price: 3000000, quantity: 1)\n    console.log(itemArr)\n    // [{...},{...},{...}] 형태로 출력되지만 클릭하면 상세정보가 나옴\n\n    var test1 = 7 + \"test\"\n    // 숫자 + 문자 = 문자(숫자)문자\n    var test2 = \"7\" + \"test\"\n    // 문자 + 문자 =  문자\n    var numTest = 3 + 7 + \"test\"\n    // 숫자1 + 숫자2 + 문자 = 숫자(숫자1,2 연산결과)문자\n\n    console.log(\"7 + \\\"test\\\"= \" + test1)\n    console.log(\"\\\"7\\\" + \\\"test\\\"= \" + test2)\n    console.log(\"3 + 7 + \\\"test\\\"= \" + numTest)\n\n    var x = {firstName: \"HyeonJeong\", lastName: \"Choi\"}\n    console.log(x)\n    // {firstName: \"HyeonJeong\", lastName: \"Choi\"}\n\n    var expNum1 = 123e5\n    // 123 * 10^5 \n    var expNum2 = 123e-5\n    // 123 * 10^-5\n\n    console.log(\"123 * 10^5 = \" + expNum1)\n    console.log(\"123 * 10^-5 = \" + expNum2)\n    // 자바보다 편하게 제곱을 사용할 수 있다.\n\n    function ForTest() {\n        for(var i = 0; i < num1; i++) {\n            console.log(\"ForTest: \" + i)\n        }\n    }\n\n    function IfTest() {\n        var num4 = 3, num5 = 10\n\n        if(num4 !== 10) {\n            console.log(\"3 !== 10\")\n        } else if(num5 !== 10) {\n            console.log(\"10 !== 10\")\n        } else {\n            console.log(\"works fine!\")\n        }\n    }\n\n    let print = 8809\n\n    console.log(\"number: \" + print)\n    console.log(\"var의 내용을 console.log에 먼저 사용후 선언과 할당\"+ \n                \"그리고 내용도 변경해 보았다.\" + varTest)\n\n    const conNum = 9303\n\n    var varTest = \"처음 할당한 내용입니다.\"\n\n    console.log(\"conNum = \" + conNum)\n    \n    varTest = \"두번째 할당한 내용입니다.\"\n\n\n    const A = {}\n    const Asym = Symbol(\"Alphabet\")\n\n    A[Asym] = \"A입니다.\"\n    \n    const B = Symbol(\"빈 심볼입니다.\")\n\n    \n\n    if(A === B) {\n        console.log(\"A === B\")\n    } else {\n        console.log(\"A !== B\")\n    }\n\n    const C = Symbol(\"Alphabet C입니다.\")\n    const D = Symbol(\"Alphabet D입니다.\")\n\n    if(C === D) {\n        console.log(\"C === D\")\n    } else {\n        console.log(\"C !== D\")\n    }\n\n    const E = Symbol(\"TEST\")\n\n    console.log(A)\n    // 출력결과 {Symbol(Alphabet): \"A입니다.\"}\n    console.log(\"A[Asym] = \" + A[Asym])\n    console.log(\"SymbolTest (B): \" + B.toString())\n    console.log(\"SymbolTest (C): \" + C.toString())\n    console.log(\"SymbolTest (D): \" + D.toString())\n    console.log(\"SymbolTest (E): \" + E.toString())\n\n\n    return (\n        <div className = \"Review\">\n            <p>\n                ArrayDataType <br/>\n                {cars[0]}, {cars[1]}, {cars[2]}, {cars[3]}<br/>\n                BoolDataType<br/>\n                {boolRes1.toString()}, {boolRes2.toString()}<br/>\n                {boolRes3.toString()}, {boolRes4.toString()}<br/>            \n                ConstTest<br/>\n                {itemArr[0].name}, {itemArr[0].price}, {itemArr[0].quantity}<br/>\n                {itemArr[1].name}, {itemArr[1].price}, {itemArr[1].quantity}<br/>\n                {itemArr[2].name}, {itemArr[2].price}, {itemArr[2].quantity}<br/>\n                DataType<br/>\n                {test1},{test2},{numTest}<br/>\n                {x.firstName}, {x.lastName}, {x.toString()}<br/>\n                ExpDataType<br/>\n                {expNum1}, {expNum2}<br/>\n                ForTest<br/>\n                {ForTest()}\n                IfTest<br/>\n                {IfTest()}\n                LetVar<br/>\n                let{print}<br/>const{conNum}<br/>var{varTest}<br/>\n                Symbol<br/>\n                A={A.toString()}<br/>,{B},{C},{D},{E}<br/>\n                TypeOf<br/>\n                {typeof \"\"}, {typeof \"test\"}, {typeof 0}, {typeof 3.14}, <br/>\n                {/* String ㅇㅇㅇ */}\n                {typeof true}, {typeof undef}, {typeof undefined}, {typeof null}, <br/>\n                {typeof {name: 'Test', major: 'EE'}}, {typeof [1, 2, 3, 4]},\n                {typeof function test(){}}<br/>\n            </p>\n        </div>\n    )\n}\n\nexport default Review",{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":25,"column":30,"nodeType":"33","messageId":"34","endLine":25,"endColumn":32},{"ruleId":"31","severity":1,"message":"32","line":39,"column":30,"nodeType":"33","messageId":"34","endLine":39,"endColumn":32},{"ruleId":"31","severity":1,"message":"32","line":19,"column":29,"nodeType":"33","messageId":"34","endLine":19,"endColumn":31},{"ruleId":"35","severity":1,"message":"36","line":53,"column":21,"nodeType":"33","messageId":"37","endLine":53,"endColumn":22},{"ruleId":"38","severity":1,"message":"39","line":97,"column":38,"nodeType":"40","messageId":"41","endLine":97,"endColumn":45},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-use-before-define","'varTest' was used before it was defined.","Identifier","usedBeforeDefined","no-global-assign","no-unsafe-negation"]