{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JavaScript_Work/src/21_02_02/exercise/Prob.js\";\n\nconst AllocRandomNumber = arr => {\n  console.log(\"AllocRandomNumber Called\");\n\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] = Math.floor(Math.random() * 10000) + 1;\n  }\n};\n\n_c = AllocRandomNumber;\n\nconst CheckTeamArrCount = arr => {\n  const TEAMMEMNUM = 4;\n};\n\n_c2 = CheckTeamArrCount;\n\nconst CreateRandomTeam = (arr, num) => {\n  console.log(\"CreateRandomTeam Called\");\n  const ERROR = -1;\n  let randNum;\n  let range = arr.length / num;\n  let checkTeamArrCnt = new Array(250); // 1번째 실수: i, j의 순서를 혼동하여 거꾸로 적음\n  //           250 * 0 ~ 3 + 0 ~ 3 ===>\n  //           0 ~ 3, 250 ~ 253, 500 ~ 503, 750 ~ 753\n  // 2번째 실수: 인덱싱을 잘못했다는 것을 생각하지 않고 내부에 또 루프를 만듬\n  // Sol: 현재 아래 코드가 실수한 부분을 수정한 코드\n  // 같은 팀원들에게 같은 숫자를 부여하겠다는 의미(250개가 나오니까)\n\n  for (var i = 0; i < range;) {\n    // 250\n    // 1번팀, 2번팀, 3번팀 ...\n    randNum = Math.floor(Math.random() * 250) + 1;\n\n    if (arr.indexOf(randNum) == ERROR) {\n      for (var j = 0; j < num; j++) {\n        // 4\n        // 전략\n        // 1) 그냥 다 검사해서 집어넣기\n        //    모든 검사를 수행하므로 속도가 느려짐\n        //    반면 팀원들은 인접하지 않은 상태로 배치됨\n        // 2) 검사는 단순화하고 for문을 한 번 더 돌자!\n        //    (내부에 4개짜리 루프를 돌린다)\n        //    팀원끼리 인접해있게 됨\n        // 우리는 2번 전략을 사용하도록 한다.\n        // 0 ~ 999 ---> i, j로 표현하는 방법에 대한 고민이 필요\n        // j = 0 ~ 3\n        // i = 0 ~ 250\n        // i * range + j\n        arr[i * num + j] = randNum;\n      }\n\n      i++;\n    }\n  }\n};\n\n_c3 = CreateRandomTeam;\n\nconst CheckWinner = (arr, winArr) => {\n  const CRITERIA = 10;\n\n  for (var i = 0; i < arr.length; i++) {\n    if (!(arr[i] % CRITERIA)) {\n      winArr[i] = 1;\n    } else {\n      winArr[i] = 0;\n    }\n  }\n};\n\n_c4 = CheckWinner;\n\nArray.prototype.arrDivide = function (num) {\n  let arr = this;\n  let len = arr.length; // 딱 떨어지는 경우엔 floor OK\n  // 나머지가 존재할 경우 ceil 올림으로 처리하면 될듯?\n\n  let cnt = Math.ceil(len / num);\n  let newArr = [];\n\n  for (var i = 0; i < cnt; i++) {\n    newArr.push(arr.splice(0, num));\n  }\n\n  return newArr;\n};\n\nArray.prototype.printArr = function (num) {\n  let arr = this;\n  let len = arr.length;\n\n  for (var i = 0; i < len; i += num) {\n    console.log(arr[i], arr[i + 1], arr[i + 2], arr[i + 3]);\n  }\n};\n\nconst CalcDividend = (teamArr, winArr) => {\n  const ALL = 16;\n  const THREEFOUR = 8;\n  const TWOFOUR = 4;\n  const ONEFOUR = 1;\n  const TEAMMEMNUM = 4; // filter, every\n\n  let divWinArr = winArr.arrDivide(TEAMMEMNUM);\n  divWinArr.printArr(4); // console.log(\"divWinArr = \" + divWinArr)\n};\n\n_c5 = CalcDividend;\n\nconst Prob = () => {\n  const MAXTEAMNUM = 4;\n  const NUMOFPERSON = 1000;\n  const FEE = 10000000;\n  const PARTICIPANTSTAKE = 0.67;\n  const PRICE = NUMOFPERSON * FEE * PARTICIPANTSTAKE;\n  console.log(\"상금 = \" + PRICE);\n  let arr = new Array(NUMOFPERSON);\n  let teamArr = new Array(NUMOFPERSON);\n  let WinnerArr = new Array(NUMOFPERSON);\n  AllocRandomNumber(arr);\n  console.log(\"After AllocRandomNumber() = \" + arr);\n  CreateRandomTeam(teamArr, MAXTEAMNUM);\n  console.log(\"After CreateRandomTeam() = \" + teamArr);\n  CheckWinner(arr, WinnerArr);\n  console.log(\"After CheckWinner() = \" + WinnerArr);\n  CalcDividend(teamArr, WinnerArr);\n  console.log(\"팀 로또가 성공적으로 마무리 되었습니다.\");\n  console.log(\"다음에도 잘 부탁드립니다 호갱님 ^^\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Prob\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Prob\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n};\n\n_c6 = Prob;\nexport default Prob;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"AllocRandomNumber\");\n$RefreshReg$(_c2, \"CheckTeamArrCount\");\n$RefreshReg$(_c3, \"CreateRandomTeam\");\n$RefreshReg$(_c4, \"CheckWinner\");\n$RefreshReg$(_c5, \"CalcDividend\");\n$RefreshReg$(_c6, \"Prob\");","map":{"version":3,"sources":["/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JavaScript_Work/src/21_02_02/exercise/Prob.js"],"names":["AllocRandomNumber","arr","console","log","i","length","Math","floor","random","CheckTeamArrCount","TEAMMEMNUM","CreateRandomTeam","num","ERROR","randNum","range","checkTeamArrCnt","Array","indexOf","j","CheckWinner","winArr","CRITERIA","prototype","arrDivide","len","cnt","ceil","newArr","push","splice","printArr","CalcDividend","teamArr","ALL","THREEFOUR","TWOFOUR","ONEFOUR","divWinArr","Prob","MAXTEAMNUM","NUMOFPERSON","FEE","PARTICIPANTSTAKE","PRICE","WinnerArr"],"mappings":"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","sourcesContent":["const AllocRandomNumber = (arr) => {\n    console.log(\"AllocRandomNumber Called\")\n\n    for(var i = 0; i < arr.length; i++) {\n        arr[i] = Math.floor(Math.random() * 10000) + 1\n    }\n}\n\nconst CheckTeamArrCount = (arr) => {\n    const TEAMMEMNUM = 4\n}\n\nconst CreateRandomTeam = (arr, num) => {\n    console.log(\"CreateRandomTeam Called\")\n\n    const ERROR = -1\n\n    let randNum\n    let range = arr.length / num\n\n    let checkTeamArrCnt = new Array(250)\n\n    // 1번째 실수: i, j의 순서를 혼동하여 거꾸로 적음\n    //           250 * 0 ~ 3 + 0 ~ 3 ===>\n    //           0 ~ 3, 250 ~ 253, 500 ~ 503, 750 ~ 753\n    // 2번째 실수: 인덱싱을 잘못했다는 것을 생각하지 않고 내부에 또 루프를 만듬\n\n    // Sol: 현재 아래 코드가 실수한 부분을 수정한 코드\n\n    // 같은 팀원들에게 같은 숫자를 부여하겠다는 의미(250개가 나오니까)\n    for(var i = 0; i < range; ) {   // 250\n        // 1번팀, 2번팀, 3번팀 ...\n        randNum = Math.floor(Math.random() * 250) + 1\n\n        if(arr.indexOf(randNum) == ERROR) {\n            for (var j = 0; j < num; j++) {   // 4\n\n                // 전략\n                // 1) 그냥 다 검사해서 집어넣기\n                //    모든 검사를 수행하므로 속도가 느려짐\n                //    반면 팀원들은 인접하지 않은 상태로 배치됨\n                // 2) 검사는 단순화하고 for문을 한 번 더 돌자!\n                //    (내부에 4개짜리 루프를 돌린다)\n                //    팀원끼리 인접해있게 됨\n\n                // 우리는 2번 전략을 사용하도록 한다.\n\n                // 0 ~ 999 ---> i, j로 표현하는 방법에 대한 고민이 필요\n                // j = 0 ~ 3\n                // i = 0 ~ 250\n                // i * range + j\n                arr[i * num + j] = randNum\n            }\n\n            i++\n        }\n    }\n}\n\nconst CheckWinner = (arr, winArr) => {\n    const CRITERIA = 10\n\n    for(var i = 0; i < arr.length; i++) {\n        if(!(arr[i] % CRITERIA)) {\n            winArr[i] = 1\n        } else {\n            winArr[i] = 0\n        }\n    }\n}\n\nArray.prototype.arrDivide = function (num) {\n    let arr = this \n    let len = arr.length\n    // 딱 떨어지는 경우엔 floor OK\n    // 나머지가 존재할 경우 ceil 올림으로 처리하면 될듯?\n    let cnt = Math.ceil(len / num)\n\n    let newArr = []\n\n    for(var i = 0; i < cnt; i++) {\n        newArr.push(arr.splice(0, num))\n    }\n    return newArr\n}\n\nArray.prototype.printArr = function(num) {\n    let arr = this\n    let len = arr.length\n\n    for(var i = 0; i < len; i += num) {\n        console.log(arr[i], arr[i + 1], arr[i + 2], arr[i + 3])\n    }\n}\n\nconst CalcDividend = (teamArr, winArr) => {\n    const ALL = 16\n    const THREEFOUR = 8\n    const TWOFOUR = 4\n    const ONEFOUR = 1\n\n    const TEAMMEMNUM = 4\n\n    // filter, every\n    let divWinArr = winArr.arrDivide(TEAMMEMNUM)\n    divWinArr.printArr(4)\n    // console.log(\"divWinArr = \" + divWinArr)\n}\n\nconst Prob = () => {\n    const MAXTEAMNUM = 4\n    const NUMOFPERSON = 1000\n    const FEE = 10000000\n    const PARTICIPANTSTAKE = 0.67\n    const PRICE = NUMOFPERSON * FEE * PARTICIPANTSTAKE\n\n    console.log(\"상금 = \" + PRICE)\n\n    let arr = new Array(NUMOFPERSON)\n    let teamArr = new Array(NUMOFPERSON)\n    let WinnerArr = new Array(NUMOFPERSON)\n\n    AllocRandomNumber(arr)\n    console.log(\"After AllocRandomNumber() = \" + arr)\n\n    CreateRandomTeam(teamArr, MAXTEAMNUM)\n    console.log(\"After CreateRandomTeam() = \" + teamArr)\n\n    CheckWinner(arr, WinnerArr)\n    console.log(\"After CheckWinner() = \" + WinnerArr)\n\n    CalcDividend(teamArr, WinnerArr)\n    console.log(\"팀 로또가 성공적으로 마무리 되었습니다.\")\n    console.log(\"다음에도 잘 부탁드립니다 호갱님 ^^\")\n\n    return (\n        <div className=\"Prob\">\n            <p>Prob</p>\n        </div>\n    )\n}\n\nexport default Prob"]},"metadata":{},"sourceType":"module"}