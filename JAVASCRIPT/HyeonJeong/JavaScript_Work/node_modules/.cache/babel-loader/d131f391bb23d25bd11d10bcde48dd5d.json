{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JavaScript_Work/src/JS_2021_01_28_Data_Type/BoolDataType.js\";\n\nfunction BoolDataType() {\n  var num1 = 3,\n      num2 = 3,\n      num3 = 7;\n  var boolRes1 = num1 === num2;\n  var boolRes2 = num1 === num3;\n  console.log(\"BoolDataType: \" + boolRes1);\n  console.log(\"BoolDataType: \" + boolRes2);\n  var testNum = 0;\n  var testStr = \"0\"; // '=='의 경우 데이터만 확인한다.\n  // '==='의 경우 데이터와 해당 데이터의 타입을 함께 확인한다.\n  // 즉 데이터타입이 다르다면 false가 된다.\n  // 결론: 결국 자바스크립트는 데이터타입이 없는 것이 아니라\n  //      실행중에 동적으로 데이터타입이 생성되는 것이다.\n  //      데이터타입이 없다고 얘기하는 것은 매우 큰 오개념이다.\n\n  var boolRes3 = testNum == testStr;\n  var boolRes4 = testNum === testStr;\n  console.log(\"BoolDataType: \" + boolRes3);\n  console.log(\"BoolDataType: \" + boolRes4);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"BoolDataType\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [boolRes1.toString(), \", \", boolRes2.toString(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 61\n      }, this), boolRes3.toString(), \", \", boolRes4.toString(), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 61\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_c = BoolDataType;\nexport default BoolDataType;\n\nvar _c;\n\n$RefreshReg$(_c, \"BoolDataType\");","map":{"version":3,"sources":["/home/hz/hakwon/GroupStudy/JAVASCRIPT/HyeonJeong/JavaScript_Work/src/JS_2021_01_28_Data_Type/BoolDataType.js"],"names":["BoolDataType","num1","num2","num3","boolRes1","boolRes2","console","log","testNum","testStr","boolRes3","boolRes4","toString"],"mappings":";;;AAAA,SAASA,YAAT,GAAwB;AACpB,MAAIC,IAAI,GAAG,CAAX;AAAA,MAAcC,IAAI,GAAG,CAArB;AAAA,MAAwBC,IAAI,GAAG,CAA/B;AAEA,MAAIC,QAAQ,GAAIH,IAAI,KAAKC,IAAzB;AACA,MAAIG,QAAQ,GAAIJ,IAAI,KAAKE,IAAzB;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBH,QAA/B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBF,QAA/B;AAEA,MAAIG,OAAO,GAAG,CAAd;AACA,MAAIC,OAAO,GAAG,GAAd,CAVoB,CAYpB;AACA;AACA;AAEA;AACA;AACA;;AACA,MAAIC,QAAQ,GAAIF,OAAO,IAAIC,OAA3B;AACA,MAAIE,QAAQ,GAAIH,OAAO,KAAKC,OAA5B;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBG,QAA/B;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBI,QAA/B;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACI;AAAA,iBACKP,QAAQ,CAACQ,QAAT,EADL,QAC4BP,QAAQ,CAACO,QAAT,EAD5B,eACgD;AAAA;AAAA;AAAA;AAAA,cADhD,EAEKF,QAAQ,CAACE,QAAT,EAFL,QAE4BD,QAAQ,CAACC,QAAT,EAF5B,eAEgD;AAAA;AAAA;AAAA;AAAA,cAFhD;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;KAjCQZ,Y;AAmCT,eAAeA,YAAf","sourcesContent":["function BoolDataType() {\n    var num1 = 3, num2 = 3, num3 = 7\n\n    var boolRes1 = (num1 === num2)\n    var boolRes2 = (num1 === num3)\n\n    console.log(\"BoolDataType: \" + boolRes1)\n    console.log(\"BoolDataType: \" + boolRes2)\n\n    var testNum = 0\n    var testStr = \"0\"\n\n    // '=='의 경우 데이터만 확인한다.\n    // '==='의 경우 데이터와 해당 데이터의 타입을 함께 확인한다.\n    // 즉 데이터타입이 다르다면 false가 된다.\n\n    // 결론: 결국 자바스크립트는 데이터타입이 없는 것이 아니라\n    //      실행중에 동적으로 데이터타입이 생성되는 것이다.\n    //      데이터타입이 없다고 얘기하는 것은 매우 큰 오개념이다.\n    var boolRes3 = (testNum == testStr)\n    var boolRes4 = (testNum === testStr)\n\n    console.log(\"BoolDataType: \" + boolRes3)\n    console.log(\"BoolDataType: \" + boolRes4)\n\n    return (\n        <div className=\"BoolDataType\">\n            <p>\n                {boolRes1.toString()}, {boolRes2.toString()}<br/>\n                {boolRes3.toString()}, {boolRes4.toString()}<br/>\n            </p>\n        </div>\n    )\n}\n\nexport default BoolDataType"]},"metadata":{},"sourceType":"module"}