[{"/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/index.js":"1","/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/App.js":"2","/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/Ex/Prob.js":"3","/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/Test/SetTest.js":"4","/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/Test/MapTest.js":"5","/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/Test/ForTest.js":"6"},{"size":366,"mtime":1612338314027,"results":"7","hashOfConfig":"8"},{"size":508,"mtime":1612312660706,"results":"9","hashOfConfig":"8"},{"size":6062,"mtime":1612346138899,"results":"10","hashOfConfig":"8"},{"size":860,"mtime":1612332292030,"results":"11","hashOfConfig":"8"},{"size":1350,"mtime":1612334221867,"results":"12","hashOfConfig":"8"},{"size":1897,"mtime":1612338283331,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"wl5i1x",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/index.js",[],["28","29"],"/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/App.js",[],"/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/Ex/Prob.js",["30","31","32","33","34","35","36"],"import React from 'react';\n\nconst AllocRandomNumber = (arr) => {\n    console.log(\"AllocRandomNumber Called\")\n\n    for(var i = 0; i < arr.length; i++) {\n        arr[i] = Math.floor(Math.random() * 10000) + 1\n    }\n}\n\nconst CheckTeamArrCount = (arr) => {\n    const TEAMMEMNUM = 4\n}\n\nconst CreateRandomTeam = (arr, num) => {\n    console.log(\"CreateRandomTeam Called\")\n\n    const ERROR = -1\n\n    let randNum\n    let range = arr.length / num\n\n    let checkTeamArrCnt = new Array(250)\n\n    // 1번째 실수: i, j의 순서를 혼동하여 거꾸로 적음\n    //           250 * 0 ~ 3 + 0 ~ 3 ===>\n    //           0 ~ 3, 250 ~ 253, 500 ~ 503, 750 ~ 753\n    // 2번째 실수: 인덱싱을 잘못했다는 것을 생각하지 않고 내부에 또 루프를 만듬\n\n    // Sol: 현재 아래 코드가 실수한 부분을 수정한 코드\n\n    // 같은 팀원들에게 같은 숫자를 부여하겠다는 의미(250개가 나오니까)\n    for(var i = 0; i < range; ) {   // 250\n        // 1번팀, 2번팀, 3번팀 ...\n        randNum = Math.floor(Math.random() * 250) + 1\n\n        if(arr.indexOf(randNum) == ERROR) {\n            for (var j = 0; j < num; j++) {   // 4\n\n                // 전략\n                // 1) 그냥 다 검사해서 집어넣기\n                //    모든 검사를 수행하므로 속도가 느려짐\n                //    반면 팀원들은 인접하지 않은 상태로 배치됨\n                // 2) 검사는 단순화하고 for문을 한 번 더 돌자!\n                //    (내부에 4개짜리 루프를 돌린다)\n                //    팀원끼리 인접해있게 됨\n\n                // 우리는 2번 전략을 사용하도록 한다.\n\n                // 0 ~ 999 ---> i, j로 표현하는 방법에 대한 고민이 필요\n                // j = 0 ~ 3\n                // i = 0 ~ 250\n                // i * range + j\n                arr[i * num + j] = randNum\n            }\n\n            i++\n        }\n    }\n}\n\nconst CheckWinner = (arr, winArr) => {\n    const CRITERIA = 1013\n    // const CRITERIA = 241\n    // const CRITERIA = 2\n\n    for(var i = 0; i < arr.length; i++) {\n        if(!(arr[i] % CRITERIA)) {\n            winArr[i] = 1\n        } else {\n            winArr[i] = 0\n        }\n    }\n}\n\nArray.prototype.arrDivide = function (num) {\n    let arr = this\n    let len = arr.length\n    // 딱 떨어지는 경우엔 floor OK\n    // 나머지가 존재할 경우 ceil 올림으로 처리하면 될 듯 ?\n    let cnt = Math.ceil(len / num)\n\n    let newArr = []\n\n    for(var i = 0; i < cnt; i++) {\n        newArr.push(arr.splice(0, num))\n    }\n\n    return newArr\n}\n\nArray.prototype.printArr = function(num) {\n    let arr = this\n    let len = arr.length\n\n    for (var i = 0; i < len; i += num) {\n        console.log(arr[i], arr[i + 1], arr[i + 2], arr[i + 3])\n    }\n}\n\nconst CalcDividend = (teamArr, winArr, price) => {\n    const ALL = 16\n    const THREEFOUR = 8\n    const TWOFOUR = 4\n    const ZERO = 0\n\n    const TEAMMEMNUM = 4\n\n    // filter, every\n    let divWinArr = winArr.arrDivide(TEAMMEMNUM)\n\n    let teamNum = divWinArr.length\n    let allClearRateArr = new Array(teamNum)\n    let subClearRateArr = new Array(teamNum)\n\n    for(var i = ZERO; i < teamNum; i++) {\n        allClearRateArr[i] = divWinArr[i].every(allClear)\n        subClearRateArr[i] = divWinArr[i].reduce(subClear)\n    }\n\n    function allClear(value) {\n        return value > ZERO\n    }\n\n    function subClear(total, value) {\n        return total + value\n    }\n\n    console.log('All Clear Team: ' + allClearRateArr)\n    console.log('Sub Clear Team: ' + subClearRateArr)\n\n    // For Debugging\n    //divWinArr.printArr(TEAMMEMNUM)\n\n    //console.log(\"divWinArr = \" + divWinArr)\n\n    // 현재까지 체크된 것이 배당금 16배수인 팀을 확보함\n    // 배당금 8배, 4배, 1배인 팀도 확보한 상태\n    // 전체 상금을 몇 등분할지에 대한 계산이 필요하다.\n    let dividendRate = allClearRateArr.reduce(checkTrueNum)\n\n    function checkTrueNum(total, value) {\n        if(value == true) {\n            return total + ALL\n        } else {\n            return total\n        }\n    }\n\n    console.log(\"All Clear Dividend Rate = \" + dividendRate)\n\n    dividendRate += subClearRateArr.reduce(allSum)\n\n    function allSum(total, value) {\n        return total + value\n    }\n\n    console.log(\"Total Dividend Rate = \" + dividendRate)\n\n    let dividend = Math.round(price / dividendRate)\n\n    console.log(\"1배수 배당금은 \" + dividend + \"입니다.\")\n    console.log(\"인당 배당금은 \" +\n        Math.round(dividend / TEAMMEMNUM) + \"입니다.\")\n\n    console.log(\"4배수 배당금은 \" + TWOFOUR * dividend + \"입니다.\")\n    console.log(\"인당 배당금은 \" +\n        Math.round(TWOFOUR * dividend / TEAMMEMNUM) + \"입니다.\")\n\n    console.log(\"8배수 배당금은 \" + THREEFOUR * dividend + \"입니다.\")\n    console.log(\"인당 배당금은 \" +\n        Math.round(THREEFOUR * dividend / TEAMMEMNUM) + \"입니다.\")\n\n    console.log(\"16배수 배당금은 \" + ALL * dividend + \"입니다.\")\n    console.log(\"인당 배당금은 \" +\n        Math.round(ALL * dividend / TEAMMEMNUM) + \"입니다.\")\n}\n\nconst Prob = () => {\n    const MAXTEAMNUM = 4\n    const NUMOFPERSON = 1000\n    const FEE = 10000000\n    const PARTICIPANTSTAKE = 0.67\n    const PRICE = NUMOFPERSON * FEE * PARTICIPANTSTAKE\n\n    console.log(\"상금 = \" + PRICE)\n\n    let arr = new Array(NUMOFPERSON)\n    let teamArr = new Array(NUMOFPERSON)\n    let WinnerArr = new Array(NUMOFPERSON)\n\n    AllocRandomNumber(arr)\n    console.log(\"After AllocRandomNumber() = \" + arr)\n\n    CreateRandomTeam(teamArr, MAXTEAMNUM)\n    console.log(\"After CreateRandomTeam() = \" + teamArr)\n\n    CheckWinner(arr, WinnerArr)\n    console.log(\"After CheckWinner() = \" + WinnerArr)\n\n    CalcDividend(teamArr, WinnerArr, PRICE)\n    console.log(\"팀 로또가 성공적으로 마무리 되었습니다.\")\n    console.log(\"다음에도 잘 부탁드립니다 호갱님 ^^\")\n\n    return (\n        <div className=\"Prob\">\n            <p>Prob</p>\n        </div>\n    )\n}\n\nexport default Prob","/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/Test/SetTest.js",[],"/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/Test/MapTest.js",[],"/home/bitweb/Desktop/proj/GroupStudy/JAVASCRIPT/RYUSEULGI/lecture/21_02_03/src/Test/ForTest.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":11,"column":7,"nodeType":"43","messageId":"44","endLine":11,"endColumn":24},{"ruleId":"41","severity":1,"message":"45","line":12,"column":11,"nodeType":"43","messageId":"44","endLine":12,"endColumn":21},{"ruleId":"41","severity":1,"message":"46","line":23,"column":9,"nodeType":"43","messageId":"44","endLine":23,"endColumn":24},{"ruleId":"47","severity":1,"message":"48","line":37,"column":33,"nodeType":"49","messageId":"50","endLine":37,"endColumn":35},{"ruleId":"51","severity":1,"message":"52","line":76,"column":1,"nodeType":"53","messageId":"50","endLine":90,"endColumn":2},{"ruleId":"51","severity":1,"message":"52","line":92,"column":1,"nodeType":"53","messageId":"50","endLine":99,"endColumn":2},{"ruleId":"47","severity":1,"message":"48","line":143,"column":18,"nodeType":"49","messageId":"50","endLine":143,"endColumn":20},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'CheckTeamArrCount' is assigned a value but never used.","Identifier","unusedVar","'TEAMMEMNUM' is assigned a value but never used.","'checkTeamArrCnt' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","no-global-assign","no-unsafe-negation"]