비동기란?
일단 동기란 무엇일까?
직렬 프로그래밍이라 보면 된다.
자바스크립트엔진은 기본적으로 직렬 진행한다.
예를 들어
어떤 함수가 호출되면 그 함수가 끝날 때 까지
다른 함수는 실행될 수 없다.
그렇다면 정말 비동기란 무엇일까?
예를 들어
일단 함수는 실행이 되지만 함수가 실행되는 동안
다음 함수를 실행한다.
이것이 비동기이다.
그렇다면 함수가 실행되고 함수의 동작 혹은 값들은
어떻게 처리하며 함수가 언제 끝나는지는 어떻게 알까?
그것은 알 수 없다.
그것을 알기 위해 콜백함수를 사용한다.
콜백함수란?
비동기 함수가 일을 마치고 나면 실행되는 함수다.
그 함수가 끝나고 난 후 무슨 일을 할지를 적는다.
비동기 코드는 왜 필요할까?
짜장면 배달을 예로 들어 보자.
먼저 동기적 세상에 살고 있다고 가정해보자.
동기적 세상에서는 짜장면을 주문하고 짜장면이 배달오면
배달는 손님이 짜장면을 모두 먹고 그릇을
비울 때 까지 '기다린' 후 짜장면을 모두 먹으면
그릇을 수거하고 다음 배달을 갈 것이다.
반대로 비동기적 세상에 살고 있다면?
짜장면 배달이 오고 손님은 짜장면을 먹는다.
배달부는 바로 다음 배달을 하러간다.
다음 배달을 하는 동안 짜장면은 비워질 것이고
그 시간동안의 효율이 발생해 더 많은 짜장면을
팔 수 있을 것이다.
무엇이 효율적인가?
즉, 스레드를 이용하는 것과 같다.
배달과 식사를 각각의 스레드에서 처리하는 것과 같다.
그런데 자바스크립트는 싱글 스레드 언어인데
어떻게 다중 스레드를 처리하는 방식을 가질 수 있을까?
자바스크립트는 자체적인 자바스크립트엔진 뿐만아니라
웹 브라우저나 Node.js의 WebAPI엔진에서도 실행된다.
WepAPI에서는 보통 시간을 소요하는 작업들을 수행한다.
만약 비동기 함수가 실행되면 WebAPI엔진이 처리한다.
WebAPI엔진은 여러 스레드를 가지고 있고
비동기가 모두 처리되면 먼저 처리된 순서대로
콜백함수를 task queue에 올린다.
task queue에 콜백함수가 도착하는 데로
다시 자바스크립트 엔진으로 올려 직렬로 처리하게 한다.