Index: src/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport DataTypeBasic from \"./data_type/DataTypeBasic\"\nimport DataType from \"./data_type/DataType\"\nimport StringDataType from \"./data_type/StringDataType\"\nimport ExpDataType from \"./data_type/ExpDataType\";\nimport BoolDataType from \"./data_type/BoolDataType\";\nimport ArrayDataType from \"./data_type/ArrayDataType\";\nimport JsonDataType from \"./data_type/JsonDataType\";\nimport IfTest from \"./data_type/IfTest\";\nimport ForTest from \"./data_type/ForTest\";\nimport TypeOf from \"./data_type/TypeOf\";\nimport LetVar from \"./data_type/LetVar\";\nimport LetVar2 from \"./data_type/LetVar2\";\nimport LetVar3 from \"./data_type/LetVar3\";\nimport ConstTest from \"./data_type/ConstTest\";\nimport SymbolTest from \"./data_type/SymbolTest\";\nimport RealDataType from \"./data_type/RealDataType\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <DataTypeBasic/>\n        <DataType/>\n        <StringDataType/>\n        <RealDataType/>\n        <ExpDataType/>\n        <BoolDataType/>\n        <ArrayDataType/>\n        <JsonDataType/>\n        <IfTest/>\n        <ForTest/>\n        <TypeOf/>\n        <LetVar/>\n        <LetVar2/>\n        <LetVar3/>\n        <ConstTest/>\n        <SymbolTest/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/index.js b/src/index.js
--- a/src/index.js	
+++ b/src/index.js	
@@ -2,42 +2,50 @@
 import ReactDOM from 'react-dom';
 import './index.css';
 import reportWebVitals from './reportWebVitals';
-import DataTypeBasic from "./data_type/DataTypeBasic"
-import DataType from "./data_type/DataType"
-import StringDataType from "./data_type/StringDataType"
-import ExpDataType from "./data_type/ExpDataType";
-import BoolDataType from "./data_type/BoolDataType";
-import ArrayDataType from "./data_type/ArrayDataType";
-import JsonDataType from "./data_type/JsonDataType";
-import IfTest from "./data_type/IfTest";
-import ForTest from "./data_type/ForTest";
-import TypeOf from "./data_type/TypeOf";
-import LetVar from "./data_type/LetVar";
-import LetVar2 from "./data_type/LetVar2";
-import LetVar3 from "./data_type/LetVar3";
-import ConstTest from "./data_type/ConstTest";
-import SymbolTest from "./data_type/SymbolTest";
-import RealDataType from "./data_type/RealDataType";
+import SpreadTest from "./210129/array/SpreadTest";
+import FunctionObjectTest2 from "./210129/function/FunctionObjectTest2";
+import Homework from "./210201/Homework/Homework";
+import Homework2 from "./210201/Homework/Homework2";
+
+import Prob from "./210202/exercise/Prob";
+import NewSetTest from "./210203/Set-Test/NewSetTest";
+import NewSetInitTest from "./210203/Set-Test/NewSetInitTest";
+import AddSetTest from "./210203/Set-Test/AddSetTest";
+import SetKeyIterationTest from "./210203/Set-Test/SetKeyIterationTest";
+import SetEntryIterationTest from "./210203/Set-Test/SetEntryIterationTest";
+import ForEachWithSet from "./210203/Set-Test/ForEachWithSet";
+import NewMapTest from "./210203/map-test/NewMapTest";
+import NewMapInitTest from "./210203/map-test/NewMapInitTest";
+import MapSetTest from "./210203/map-test/MapSetTest";
+import MapDeleteTest from "./210203/map-test/MapDeleteTest";
+import MapIterationTest from "./210203/map-test/MapIterationTest";
+import ForWithSetMap from "./210203/for-test/ForWithSetMap";
+import IteratorTest from "./210203/iterator-test/IteratorTest";
+import IteratorTest2 from "./210203/iterator-test/IteratorTest2";
+import IteratorTest3 from "./210203/iterator-test/IteratorTest3";
+import Review from "./210203/Set-Test/Review";
 
 
 ReactDOM.render(
     <React.StrictMode>
-        <DataTypeBasic/>
-        <DataType/>
-        <StringDataType/>
-        <RealDataType/>
-        <ExpDataType/>
-        <BoolDataType/>
-        <ArrayDataType/>
-        <JsonDataType/>
-        <IfTest/>
-        <ForTest/>
-        <TypeOf/>
-        <LetVar/>
-        <LetVar2/>
-        <LetVar3/>
-        <ConstTest/>
-        <SymbolTest/>
+
+        {/*<NewSetTest/>*/}
+        {/*<NewSetInitTest/>*/}
+        {/*<AddSetTest/>*/}
+        {/*<SetKeyIterationTest/>*/}
+        {/*<SetEntryIterationTest/>*/}
+        {/*<ForEachWithSet/>*/}
+        {/*<NewMapTest/>*/}
+        {/*<NewMapInitTest/>*/}
+        {/*<MapSetTest/>*/}
+        {/*<MapDeleteTest/>*/}
+        {/*<MapIterationTest/>*/}
+        {/*<ForWithSetMap/>*/}
+        {/*<IteratorTest/>*/}
+        <IteratorTest2/>
+        {/*<IteratorTest3/>*/}
+        <Review/>
+
     </React.StrictMode>,
     document.getElementById('root')
 );
Index: src/210202/repeat-test/RepeatFilterTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/repeat-test/RepeatFilterTest.js b/src/210202/repeat-test/RepeatFilterTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/repeat-test/RepeatFilterTest.js	
@@ -0,0 +1,23 @@
+const RepeatFilterTest = () => {
+    let seq = [1, 2, 3, 4, 5]
+    let over3 = seq.filter(filterFunc)
+    // filter 또한 map과 유사하지만
+    // 특정한 값을 걸러낸다는 의미로 활용된다.
+    // 마찬가지로 seq에 있는 요소들을 모두 빼서 filterFunc으로 전달한다.
+
+    function filterFunc(value) {
+        return value > 3 // 3보다 큰 애를 필터링한다.
+    }
+
+    console.log("seq : " + seq)
+    console.log("over3 : " + over3)
+
+    return (
+        <div className="RepeatFilterTest">
+            <p>
+                array-test : RepeatFilterTest
+            </p>
+        </div>
+    )
+}
+export default RepeatFilterTest
Index: src/210202/repeat-test/RepeatReduceTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/repeat-test/RepeatReduceTest.js b/src/210202/repeat-test/RepeatReduceTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/repeat-test/RepeatReduceTest.js	
@@ -0,0 +1,23 @@
+const RepeatReduceTest = () => {
+    let seq = [1, 2, 3, 4, 5]
+    let sum = seq.reduce(reduceFunc)
+
+    function reduceFunc(total, value, value2) { //1~5까지의 합
+        return total+value+value2
+    }
+
+
+    console.log("AfterReduce : " + sum)
+
+    let testSum = seq.reduce(reduceFunc, 333, 10)
+    console.log(testSum)
+
+    return (
+        <div className="RepeatReduceTest">
+            <p>
+                array-test : RepeatReduceTest
+            </p>
+        </div>
+    )
+}
+export default RepeatReduceTest
\ No newline at end of file
Index: src/210202/repeat-test/ArrayRepeatTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/repeat-test/ArrayRepeatTest.js b/src/210202/repeat-test/ArrayRepeatTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/repeat-test/ArrayRepeatTest.js	
@@ -0,0 +1,24 @@
+const ArrayRepeatTest = () => {
+    let arr = [1, 3, 8, 10, 5, 7, 11, 19, 77, 33]
+    let txt = " "
+
+    function testFunc(value){ // 배열 안에 있는 값
+        txt = txt + value + "<br>"
+        //txt = " " + 1,3... + "<br>"
+    }
+
+    console.log("Before testFunc : " + txt)
+    // 배열에 있는 요소 하나 하나를 testFunc의 입력 인자로 설정함
+    // 모든요소를 순회하고 더이상 요소가 없으면 중지
+    arr.forEach(testFunc)
+    console.log("After testFunc : " + txt)
+
+    return(
+        <div className="ArrayRepeatTest">
+            <p>
+                array-test : ArrayRepeatTest
+            </p>
+        </div>
+    )
+}
+export default ArrayRepeatTest
\ No newline at end of file
Index: src/210202/repeat-test/RepeatEveryTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/repeat-test/RepeatEveryTest.js b/src/210202/repeat-test/RepeatEveryTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/repeat-test/RepeatEveryTest.js	
@@ -0,0 +1,32 @@
+const RepeatEveryTest = () => {
+    let seq = [1, 2, 3, 4, 5]
+    let andTestSuccess = seq.every(reduceFunc) // every는 불리언 타입
+    let andTestSuccess2 = seq.every(reduceFunc2) // every는 불리언 타입
+
+
+
+    function reduceFunc2(value) {
+        return value>3 // 벨류가 다 통과 할수있냐? 2,3이면 모두가 통과 못하니 false &&(and)연산과 같음(모두가 같아야 참)
+    }인
+    console.log("After every() : " + andTestSuccess2)
+
+
+    function reduceFunc(value) {
+        return value>0 // 벨류가 다 통과 할수있냐 ㅡ> 다 통과하니 true
+    }
+
+
+    console.log("After every() : " + andTestSuccess)
+
+
+
+
+    return (
+        <div className="RepeatEveryTest">
+            <p>
+                array-test : RepeatEveryTest
+            </p>
+        </div>
+    )
+}
+export default RepeatEveryTest
\ No newline at end of file
Index: src/210129/Homework & Review Note/Homework & Review Note.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/Homework & Review Note/Homework & Review Note.md b/src/210129/Homework & Review Note/Homework & Review Note.md
new file mode 100644
--- /dev/null	
+++ b/src/210129/Homework & Review Note/Homework & Review Note.md	
@@ -0,0 +1,168 @@
+#2021-01-29 Review & Questions Note
+
+## [Questions Note]
+Q1) FunctionObjectTest2에서 
+prog.getName을 콘솔창 출력시 function() {return this.name}
+prog.getName() 콘솔창 출력시 name 값인 JavaScript가 나왔습니다.
+() 여부의 차이가 궁금합니다.
+
+A) () - 함수호출 / () 없다면 프로토타입 주소가 그대로 호출되어 출력(함수 원형)
+
+```js
+    console.log("FunctionObjectTest2: prog.getName - " + prog.getName)
+    console.log(prog.getName())
+```
+
+Q2) FunctionObjectTest2에서
+prog.toString 콘솔 출력시 {[Native code]}로 출력됩니다.
+Native code가 무엇인가요?
+
+A) 작성한 코드 그래도 컴퓨터에서 구동 ㅡ> 프로그래머가 직접 메모리를 할당 해제(Native한 환경)
+  예) c코드  // 결국 직접 메모리에 할당한 값이 없어서?
+```js
+console.log("FunctionObjectTest2: prog.toString - " + prog.toString)
+```
+
+Q3) FunctionObjectTest2에서
+콘솔 출력시 [object Object]로 출력이되는건 prog 객체의 할당 된 값이 없어서 출력되는 건가요?
+A) 할당 된 값이 없는게 아니라 prog 객체 메모리에 로드되어 있는 추상화
+[object object]는 object를  string으로 변환할 때 나오는 기본결과 ㅡ> 해결책 JSON.Stringfy(객체명)
+```js
+console.log("FunctionObjectTest2 : " + prog)
+```
+
+
+## [Review Note]
+1)템플릿 리터럴
+- 템플릿 리터럴은 내장된 표현식을 허용하는 문자열 리터럴
+- 표현식/문자열 삽입, 여러줄 문자열, 문자열 형식화, 문자열 태깅 등의 다양한 기능 제공
+
+2)비구조화 할당(...)
+- 비구조화 할당은 구문은 배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 자바스크립트
+표현식
+- 간단하게 배열[], 혹은 객체{}안의 값을 편하게 꺼내서 쓸 수 있는 문법
+
+```js
+ let arrColor =["red", "green", "blue"]
+    // ...arrColor는 뭐다?
+    // 현재 위치에 arrColor를 배치하고 뒤쪽에 purple을 배치한다.
+    let newArrColor = [...arrColor, "purple"] // 하나의 추가 가능
+```
+
+3)JSON.stringify()
+- 자바스크립트 값이나 객체를 JSON 문자열로 변환
+- 배열이 아닌 객체의 속성들은 어떤 특정한 순서에 따라 문자열화 될 것이라고 보장되지 않는다.
+  같은 객체의 문자열화에 있어서 속성의 순서에 의존하지 않는다.
+- Boolean, Number, String 객체들은 문자열화 될 때 전통적인 변환 의미에 따라 연관된 기본형(primitive) 값으로 변환된다.
+- undefined, 함수, 심볼(symbol)은 변환될 때 생략되거나(객체 안에 있을 경우) null 로 변환된다(배열 안에 있을 경우).
+- 심볼을 키로 가지는 속성들은 replacer 함수를 사용하더라도 완전히 무시된다.
+  열거 불가능한 속성들은 무시된다.
+
+```js
+JSON.stringify({});                  // '{}'
+JSON.stringify(true);                // 'true'
+JSON.stringify('foo');               // '"foo"'
+JSON.stringify([1, 'false', false]); // '[1,"false",false]'
+JSON.stringify({ x: 5 });            // '{"x":5}'
+
+JSON.stringify(new Date(2006, 0, 2, 15, 4, 5))
+// '"2006-01-02T15:04:05.000Z"'
+
+JSON.stringify({ x: 5, y: 6 });
+// '{"x":5,"y":6}' or '{"y":6,"x":5}'
+JSON.stringify([new Number(1), new String('false'), new Boolean(false)]);
+// '[1,"false",false]'
+
+// Symbols:
+JSON.stringify({ x: undefined, y: Object, z: Symbol('') });
+// '{}'
+JSON.stringify({ [Symbol('foo')]: 'foo' });
+// '{}'
+JSON.stringify({ [Symbol.for('foo')]: 'foo' }, [Symbol.for('foo')]);
+// '{}'
+JSON.stringify({ [Symbol.for('foo')]: 'foo' }, function(k, v) {
+  if (typeof k === 'symbol') {
+    return 'a symbol';
+  }
+});
+// '{}'
+
+// Non-enumerable properties:
+JSON.stringify( Object.create(null, { x: { value: 'x', enumerable: false }, y: { value: 'y', enumerable: true } }) );
+// '{"y":"y"}'
+```
+
+
+4)Prototype
+- 자바스크립트는 클래스라는 개념이 없다. 그래서 기존의 객체를 복사해서 새로운 객체를 생성하는 프로토타입 기반의 언어이다.
+  이는 객체 원형인 프로토타입을 이용하여 새로운 객체를 만들어낸다.
+  이렇게 생성된 객체는 다른 객체의 원형이 될 수 있다.
+
+```js
+function Person(){
+	this.hand = 2;
+	this.body = 1;
+	this.nose = 1;
+}
+
+let kim = new Person();
+let lee = new Person();
+console.log(kim.hand); // 2
+console.log(lee.hand); // 2
+
+// 보통 객체는 이런 방식으로 사용하게 될 것이다. 이 코드에서는 Person이라는 함수를 통해서 kim과 lee 객체를 생성했다.
+// 이들은 각자 3개의 속성을 가지고 있고 데이터 또한 동일하다.
+// 메모리의 관점에서 보면 kim과 lee 객체가 생성되면서 총 6개의 변수가 메모리에 저장 되었을 것이다.
+
+
+function Person(){}
+
+Person.prototype.hand = 2;
+Person.prototype.body = 1;
+Person.prototype.nose = 1;
+
+let kim = new Person();
+let lee = new Person();
+
+console.log(kim.hand) // 2
+console.log(lee.hand) // 2
+
+// 얼핏보면 위의 코드와 그렇게 차이가 없어 보인다.
+// 어떻게 되었든 출력되는 값은 같으니 말이다. 다시 한번 메모리 관점에서 살펴보자.
+// kim과 lee는 자신이 변수를 가지고 있는게 아니라, Person.prototype이라는 어떤 Object의 hand라는 속성을 공유하고 있다.
+// 그렇다는 말은 위의 코드 처럼 생성된 객체의 수 만큼 변수가 저장되는 것이 아니라,
+// 같은 생성자를 통해서 만들어진 객체들은 하나의 prototype 이라는 Object를 공유하고 있다는 뜻이다.
+```
+
+5)hasOwnProperty
+-hasOwnProperty() 메소드는 특정 프로퍼티가 해당 객체에 존재하는지를 검사.
+
+해당 객체에서 직접 선언된 프로퍼티만을 검사하며, 같은 이름의 프로퍼티라도 상속받은 프로퍼티는 false 값을 반환.
+
+```js
+function Dog(color, name, age, family) {
+
+  this.color = color;
+
+  this.name = name;
+
+  this.age = age;
+
+  this.family = family;
+
+  this.breed = function() {
+
+    return this.color + " " + this.family;
+
+  }
+
+}
+
+var myDog = new Dog("검정색", "곰", 3, "불독");
+
+myDog.hasOwnProperty("color"); // true
+
+myDog.hasOwnProperty("breed"); // true
+
+myDog.hasOwnProperty("class"); // 상속받은 프로퍼티이므로, false를 반환함.
+```
\ No newline at end of file
Index: src/210202/exercise/Prob.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/exercise/Prob.js b/src/210202/exercise/Prob.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/exercise/Prob.js	
@@ -0,0 +1,210 @@
+const AllocRandomNumber = (arr) => {
+    console.log("AllocRandomNumber Called")
+
+    for(var i = 0; i < arr.length; i++) {
+        arr[i] = Math.floor(Math.random() * 10000) + 1
+    }
+}
+
+const CheckTeamArrCount = (arr) => {
+    const TEAMMEMNUM = 4
+}
+
+const CreateRandomTeam = (arr, num) => {
+    console.log("CreateRandomTeam Called")
+
+    const ERROR = -1
+
+    let randNum
+    let range = arr.length / num
+
+    let checkTeamArrCnt = new Array(250)
+
+    // 1번째 실수: i, j의 순서를 혼동하여 거꾸로 적음
+    //           250 * 0 ~ 3 + 0 ~ 3 ===>
+    //           0 ~ 3, 250 ~ 253, 500 ~ 503, 750 ~ 753
+    // 2번째 실수: 인덱싱을 잘못했다는 것을 생각하지 않고 내부에 또 루프를 만듬
+
+    // Sol: 현재 아래 코드가 실수한 부분을 수정한 코드
+
+    // 같은 팀원들에게 같은 숫자를 부여하겠다는 의미(250개가 나오니까)
+    for(var i = 0; i < range; ) {   // 250
+        // 1번팀, 2번팀, 3번팀 ...
+        randNum = Math.floor(Math.random() * 250) + 1
+
+        if(arr.indexOf(randNum) == ERROR) {
+            for (var j = 0; j < num; j++) {   // 4
+
+                // 전략
+                // 1) 그냥 다 검사해서 집어넣기
+                //    모든 검사를 수행하므로 속도가 느려짐
+                //    반면 팀원들은 인접하지 않은 상태로 배치됨
+                // 2) 검사는 단순화하고 for문을 한 번 더 돌자!
+                //    (내부에 4개짜리 루프를 돌린다)
+                //    팀원끼리 인접해있게 됨
+
+                // 우리는 2번 전략을 사용하도록 한다.
+
+                // 0 ~ 999 ---> i, j로 표현하는 방법에 대한 고민이 필요
+                // j = 0 ~ 3
+                // i = 0 ~ 250
+                // i * range + j
+                arr[i * num + j] = randNum
+            }
+
+            i++
+        }
+    }
+}
+
+const CheckWinner = (arr, winArr) => {
+    const CRITERIA = 1013
+    // const CRITERIA = 241
+    // const CRITERIA = 2
+
+    for(var i = 0; i < arr.length; i++) {
+        if(!(arr[i] % CRITERIA)) {
+            winArr[i] = 1
+        } else {
+            winArr[i] = 0
+        }
+    }
+}
+
+Array.prototype.arrDivide = function (num) {
+    let arr = this
+    let len = arr.length
+    // 딱 떨어지는 경우엔 floor OK
+    // 나머지가 존재할 경우 ceil 올림으로 처리하면 될 듯 ?
+    let cnt = Math.ceil(len / num)
+
+    let newArr = []
+
+    for(var i = 0; i < cnt; i++) {
+        newArr.push(arr.splice(0, num))
+    }
+
+    return newArr
+}
+
+Array.prototype.printArr = function(num) {
+    let arr = this
+    let len = arr.length
+
+    for (var i = 0; i < len; i += num) {
+        console.log(arr[i], arr[i + 1], arr[i + 2], arr[i + 3])
+    }
+}
+
+const CalcDividend = (teamArr, winArr, price) => {
+    const ALL = 16
+    const THREEFOUR = 8
+    const TWOFOUR = 4
+    const ZERO = 0
+
+    const TEAMMEMNUM = 4
+
+    // filter, every
+    let divWinArr = winArr.arrDivide(TEAMMEMNUM)
+
+    let teamNum = divWinArr.length
+    let allClearRateArr = new Array(teamNum)
+    let subClearRateArr = new Array(teamNum)
+
+    for(var i = ZERO; i < teamNum; i++) {
+        allClearRateArr[i] = divWinArr[i].every(allClear)
+        subClearRateArr[i] = divWinArr[i].reduce(subClear)
+    }
+
+    function allClear(value) {
+        return value > ZERO
+    }
+
+    function subClear(total, value) {
+        return total + value
+    }
+
+    console.log('All Clear Team: ' + allClearRateArr)
+    console.log('Sub Clear Team: ' + subClearRateArr)
+
+    // For Debugging
+    //divWinArr.printArr(TEAMMEMNUM)
+
+    //console.log("divWinArr = " + divWinArr)
+
+    // 현재까지 체크된 것이 배당금 16배수인 팀을 확보함
+    // 배당금 8배, 4배, 1배인 팀도 확보한 상태
+    // 전체 상금을 몇 등분할지에 대한 계산이 필요하다.
+    let dividendRate = allClearRateArr.reduce(checkTrueNum)
+
+    function checkTrueNum(total, value) {
+        if(value == true) {
+            return total + ALL
+        } else {
+            return total
+        }
+    }
+
+    console.log("All Clear Dividend Rate = " + dividendRate)
+
+    dividendRate += subClearRateArr.reduce(allSum)
+
+    function allSum(total, value) {
+        return total + value
+    }
+
+    console.log("Total Dividend Rate = " + dividendRate)
+
+    let dividend = Math.round(price / dividendRate)
+
+    console.log("1배수 배당금은 " + dividend + "입니다.")
+    console.log("인당 배당금은 " +
+        Math.round(dividend / TEAMMEMNUM) + "입니다.")
+
+    console.log("4배수 배당금은 " + TWOFOUR * dividend + "입니다.")
+    console.log("인당 배당금은 " +
+        Math.round(TWOFOUR * dividend / TEAMMEMNUM) + "입니다.")
+
+    console.log("8배수 배당금은 " + THREEFOUR * dividend + "입니다.")
+    console.log("인당 배당금은 " +
+        Math.round(THREEFOUR * dividend / TEAMMEMNUM) + "입니다.")
+
+    console.log("16배수 배당금은 " + ALL * dividend + "입니다.")
+    console.log("인당 배당금은 " +
+        Math.round(ALL * dividend / TEAMMEMNUM) + "입니다.")
+}
+
+const Prob = () => {
+    const MAXTEAMNUM = 4
+    const NUMOFPERSON = 1000
+    const FEE = 10000000
+    const PARTICIPANTSTAKE = 0.67
+    const PRICE = NUMOFPERSON * FEE * PARTICIPANTSTAKE
+
+    console.log("상금 = " + PRICE)
+
+    let arr = new Array(NUMOFPERSON)
+    let teamArr = new Array(NUMOFPERSON)
+    let WinnerArr = new Array(NUMOFPERSON)
+
+    AllocRandomNumber(arr)
+    console.log("After AllocRandomNumber() = " + arr)
+
+    CreateRandomTeam(teamArr, MAXTEAMNUM)
+    console.log("After CreateRandomTeam() = " + teamArr)
+
+    CheckWinner(arr, WinnerArr)
+    console.log("After CheckWinner() = " + WinnerArr)
+
+    CalcDividend(teamArr, WinnerArr, PRICE)
+    console.log("팀 로또가 성공적으로 마무리 되었습니다.")
+    console.log("다음에도 잘 부탁드립니다 호갱님 ^^")
+
+    return (
+        <div className="Prob">
+            <p>Prob</p>
+        </div>
+    )
+}
+
+export default Prob
\ No newline at end of file
Index: src/210129/coincidence/FinalEqCicdTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/coincidence/FinalEqCicdTest.js b/src/210129/coincidence/FinalEqCicdTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/coincidence/FinalEqCicdTest.js	
@@ -0,0 +1,38 @@
+const FinalEqCicdTest = () => {
+    let test = 0
+
+    if (test) {
+        console.log(" FinalEqCicdTest success")
+    } else {
+        console.log("FinalEqCicdTest failure")
+    }
+
+    // 결국 문자열 형태로 숫자가 날아왔을때
+    // 값의 비교는 숫자와 ==을 사용하여 비교해도 무방
+    if (test == false) { // let test는 문자열이고 값이 넘버 0이라 false가 맞기때문에 success가 출력됐다.
+        console.log("FinalEqCicdTest success")
+    } else {
+        console.log("FinalEqCicdTest failure")
+    }
+
+    // 그러나 값 자체의 데이터 타입이 중요하다면 ===을 사용하도록 한다.
+    if (test === false) {
+        console.log("FinalEqCicdTest success")
+    } else {
+        console.log("FinalEqCicdTest failure")
+    }
+
+
+    return (
+        <div className="FinalEqCicdTest">
+
+            <p>
+
+                FinalEqCicdTest
+
+            </p>
+        </div>
+    )
+}
+
+export default FinalEqCicdTest
\ No newline at end of file
Index: src/210129/coincidence/CICDTest6.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/coincidence/CICDTest6.js b/src/210129/coincidence/CICDTest6.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/coincidence/CICDTest6.js	
@@ -0,0 +1,23 @@
+const CICDTest6 = () => {
+    let name = "test"
+
+    if (name === undefined) {
+        console.log("CICDTest6 equal")
+    } else {
+        console.log("CICDTest6 not equal")
+    }
+
+
+    return (
+        <div className="CICDTest6">
+
+            <p>
+
+                Coincidence Test6
+
+            </p>
+        </div>
+    )
+}
+
+export default CICDTest6
\ No newline at end of file
Index: src/210129/coincidence/CICDTest5.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/coincidence/CICDTest5.js b/src/210129/coincidence/CICDTest5.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/coincidence/CICDTest5.js	
@@ -0,0 +1,23 @@
+const CICDTest5 = () => {
+    let name = "test"
+
+    if (name === true) {
+        console.log("CICDTest5 equal")
+    } else {
+        console.log("CICDTest5 not equal")
+    }
+
+
+    return (
+        <div className="CICDTest5">
+
+            <p>
+
+                Coincidence Test5
+
+            </p>
+        </div>
+    )
+}
+
+export default CICDTest5
\ No newline at end of file
Index: src/210129/coincidence/CICDTest4.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/coincidence/CICDTest4.js b/src/210129/coincidence/CICDTest4.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/coincidence/CICDTest4.js	
@@ -0,0 +1,23 @@
+const CICDTest4 = () => {
+    let name = "test"
+
+    if (name === null){
+        console.log("CICDTest4equal")
+    } else {
+        console.log("CICDTest4 not equal")
+    }
+
+
+    return (
+        <div className="CICDTest4">
+
+            <p>
+
+                Coincidence Test4
+
+            </p>
+        </div>
+    )
+}
+
+export default CICDTest4
\ No newline at end of file
Index: src/210129/coincidence/CICDTest3.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/coincidence/CICDTest3.js b/src/210129/coincidence/CICDTest3.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/coincidence/CICDTest3.js	
@@ -0,0 +1,24 @@
+const CICDTest3 = () => {
+
+    let name = "test"
+
+    if (name === "go") {
+        console.log("CICDTest3 equal")
+    } else {
+        console.log("CICDTest3 not equal")
+    }
+
+
+    return (
+        <div className="CICDTest3">
+
+            <p>
+
+                Coincidence Test3
+
+            </p>
+        </div>
+    )
+}
+
+export default CICDTest3
\ No newline at end of file
Index: src/210129/coincidence/CICDTest2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/coincidence/CICDTest2.js b/src/210129/coincidence/CICDTest2.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/coincidence/CICDTest2.js	
@@ -0,0 +1,20 @@
+const CICDTest2 = () => {
+    let name = "test"
+
+
+    if (name === "test") { // 타입도 같고 값도 같음
+        console.log("CICDTest2 equal")
+    } else {
+        console.log("CICDTest2 not equal")
+    }
+
+
+    return (
+        <div className="CICDTest2">
+            <p>
+                CICDTest2!
+            </p>
+        </div>
+    )
+}
+export default CICDTest2
\ No newline at end of file
Index: src/210129/function/FunctionObjectTest2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/function/FunctionObjectTest2.js b/src/210129/function/FunctionObjectTest2.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/function/FunctionObjectTest2.js	
@@ -0,0 +1,119 @@
+const FunctionObjectTest2 = () => {
+
+    function Programming() { //생성자 함수
+        this.name = "JavaScript" // 이름에 관한 프로퍼티
+        this.students = 17 // 학생에 관한 프로퍼티
+
+    }
+
+    // () 함수 호출 (펑션 콜)
+    // () 없다면 프로토타입 주소가 그대로 호출
+    Programming.prototype.getName = function () {  // 주소 값
+        //현재 존재하고 있는 Programming 프로토타입에 name을 리턴하는 getname 메소드 추가
+        return this.name
+
+    }
+    // prog는 자신이 변수를 가지고 있는 것이 아니라
+    // Programming.prototype이라는 object의 getName이라는 속성을 공유
+    // 객체의 수 만큼 변수가 저장되는 것이 아니라 같은 생성자를 통해 만들어진 객체들은
+    // 하나의 prototype이라는 object를 공유
+
+    let prog = new Programming() // prog 객체는 Programming이라는 프로토타입을 가짐
+
+    if (Programming) {
+        console.log("FunctionObjectTest2: Programming true")
+    } else {
+        console.log("FunctionObjectTest2: Programming false")
+    }
+
+    console.log("FunctionObjectTest2 : " + prog)
+    // JSON.stringify(prog)
+    // prog 메모리에 로드 되어있다[object object] - 추상화
+
+    if (prog) {
+        console.log("FunctionObjectTest2: prog true")
+    } else {
+        console.log("FunctionObjectTest2: prog false")
+    }
+
+    console.log("FunctionObjectTest2 : " + prog.name)
+
+    if (prog.name) {
+        console.log("FunctionObjectTest2: true")
+    } else {
+        console.log("FunctionObjectTest2: false")
+    }
+
+    console.log("FunctionObjectTest2 : " + prog.students)
+
+    if (prog.students) {
+        console.log("FunctionObjectTest2: true")
+    } else {
+        console.log("FunctionObjectTest2: false")
+    }
+
+    console.log("FunctionObjectTest2: prog.getName - " + prog.getName) // 작성한 코드가 나오는 이유는?
+    // JSON.stringfy()로 해결 가능
+    console.log(prog.getName()) //
+
+    if (prog.getName) {
+        console.log("FunctionObjectTest2: prog.getName true")
+    } else {
+        console.log("FunctionObjectTest2: prog.getName false")
+    }
+
+
+    console.log("FunctionObjectTest2: prog.toString - " + prog.toString) // C코드
+    console.log(prog.toString()) // toString() - 문자열을 반환하는 object의 대표적인 방법
+
+    if (prog.toString) {
+        console.log("FunctionObjectTest2: prog.toString true")
+    } else {
+        console.log("FunctionObjectTest2: prog.toString false")
+    }
+
+    console.log("FunctionObjectTest2: prog.name2 - " + prog.name2)
+
+
+    // 자바스크립트에서 없는 것은 결국 undefined로 false로 처리됨
+
+    if (prog.name2) {
+        console.log("FunctionObjectTest2: prog.name2 true")
+    } else {
+        console.log("FunctionObjectTest2: prog.name2 false")
+    }
+
+    console.log("FunctionObjectTest2: prog.getName2 - " + prog.getName2)
+
+
+    if (prog.getName2) {
+        console.log("FunctionObjectTest2: prog.getName2 true")
+    } else {
+        console.log("FunctionObjectTest2: prog.getName2 false")
+    }
+
+
+    // ~~ in 객체에서 잡히고
+    // hasOwnProperty에서 거짓이 나오면 필요에 의해 새로 추가한 객체
+    // 양쪽 모두에서 잡히면 원래부터 가지고 있던 순수한 속성
+    console.log("FunctionObjectTest2: " + ("name" in prog))
+    console.log("FunctionObjectTest2: " + ("students" in prog))
+    console.log("FunctionObjectTest2: " + ("getName" in prog))
+    console.log("FunctionObjectTest2: " + ("name2" in prog))
+
+    console.log("FunctionObjectTest2 : " + (prog.hasOwnProperty("students")))
+    console.log("FunctionObjectTest2 : " + (prog.hasOwnProperty("getName"))) // 프로토타입 체인이라 확인 하지 않아 false
+    console.log("FunctionObjectTest2 : " + ("toString" in prog))
+    console.log("FunctionObjectTest2 : " + (prog.hasOwnProperty("toString"))) // 해당 객체에서 직접 선언 하지 않아 false
+    // 속성이 없어서...
+
+    return (
+        <div className="FunctionObjectTest2">
+            <p>
+                FunctionObjectTest2
+            </p>
+        </div>
+    )
+}
+
+export default FunctionObjectTest2
\ No newline at end of file
Index: src/210129/function/FunctionObjectTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/function/FunctionObjectTest.js b/src/210129/function/FunctionObjectTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/function/FunctionObjectTest.js	
@@ -0,0 +1,23 @@
+const FunctionObjectTest = () => {
+    let add = function (a,b){
+        return a+b
+    }
+
+    console.log("FunctionObjectTest : " + add)
+
+    if (add) {
+        console.log("FunctionObjectTest : true")
+    } else {
+        console.log("FunctionObjectTest : false")
+    }
+
+    return (
+        <div className="FunctionObjectTest">
+            <p>
+                FunctionObjectTest
+            </p>
+        </div>
+    )
+}
+
+export default FunctionObjectTest
\ No newline at end of file
Index: src/210129/function/EmptyObjectTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/function/EmptyObjectTest.js b/src/210129/function/EmptyObjectTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/function/EmptyObjectTest.js	
@@ -0,0 +1,23 @@
+const EmptyObjectTest = () => {
+    let emptyObj = {}
+
+
+    // 주의 사항 : 객체는 빈 객체더라도 if문에서 true로 처리된다.
+    // 객체가 비어 있더라도 객체 자체가 존재하기 때문에
+    // 존재 자체를 true로 인식하는 것이다.
+    if (emptyObj) {
+        console.log("true")
+    } else {
+        console.log("false")
+    }
+
+    return (
+        <div className="EmptyObjectTest">
+            <p>
+                Empty Object Test
+            </p>
+        </div>
+    )
+}
+
+export default EmptyObjectTest
\ No newline at end of file
Index: src/210201/sort/SortTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/sort/SortTest.js b/src/210201/sort/SortTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/sort/SortTest.js	
@@ -0,0 +1,63 @@
+const SortTest = () => {
+
+    let arr = ["one", "two", "three"]
+
+    console.log("arr : " + arr)
+
+    let one = arr[0]
+    let two = arr[1]
+    let three = arr[2]
+
+    console.log("one = " + one + ", two = " + two + ", three = " + three)
+
+    arr = new Array("test1", "test2", "test3")
+
+    console.log(arr)
+
+    let len = arr.length
+
+    console.log("Array Length = " + len)
+    console.log("Last Arr = " + arr[len - 1])
+
+    arr = [1, 9, 3, 12, 5, 8, 7]
+    let arr2 = [1, 9, 3, 2, 5, 8, 7]
+
+    console.log("Before Sort = " + arr)
+    let sortedArr = arr.sort()
+    console.log("After Sort = " + sortedArr) // 12를 문자열 12로 봤고 1이 앞에있으니 우선순위를 둠
+//---------------------------------------------------------------
+    console.log("Before Sort2 = " + arr2)
+    let sortedArr2 = arr2.sort()
+    console.log("After Sort2 = " + sortedArr2)
+//-------------------------------------------------- arr 12순서 에러 고치는 코드
+    // 배열에서 값을 끄집어내서 비교해보는 것
+    // 값을 빼보면 그 차이가 가장 큰넘이 마지막이란 것을 알 수 있음
+    console.log("(Solved)Before Sort = " + arr)
+    sortedArr = arr.sort((a, b) => a - b) // 작은걸 우선순위로 둘 때 b-a
+    console.log("(Solved)After Sort = " + sortedArr)
+    len = sortedArr.length
+
+    var text = "<ul>"
+    for (var i = 0; i < len; i++) {
+        text += "<li>" + sortedArr[i] + "</li>"
+        //<ol> - orderd list = 숫자나 알파벳 등 순서가 있는 목록
+        //<ul> - unordered list = 순서가 필요 없는 목록
+        //<dl> - definition list = 사전처럼 용어를 설명하는 목록
+        //<li> - <ol>과<ul>의 각 항목들을 나열 할 때 사용 list item의 약자
+
+    }
+
+    text += "</ul>"
+
+    console.log("text = " + text)
+
+    return (
+        <div className="SortTest">
+            <p>
+                SortTest
+            </p>
+        </div>
+    )
+}
+
+export default SortTest
Index: src/210129/Exercise/Randomteam.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/Exercise/Randomteam.js b/src/210129/Exercise/Randomteam.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/Exercise/Randomteam.js	
@@ -0,0 +1,57 @@
+const RandomTeam = () => {
+    let teamA = [
+        "최현정", "오진욱", "류슬기", "장해솔", "조진형",
+        "이정현", "고동영", "박재민", "한다은"
+    ]
+    let teamB = [
+        "최임식", "탁성진", "하진주", "이범진",
+        "이승윤", "박기범", "박소현", "노찬욱"
+    ]
+
+    let lenA = teamA.length
+    let lenB = teamB.length
+
+    let res1 = []
+    let res2 = []
+
+    const ERROR = -1 // 찾는 문자열이 없으면 -1을 리턴
+
+    let randArrIdx
+
+    let i
+
+    console.log(lenA)
+
+    for(i = 0; i < lenA; ) {
+        randArrIdx = Math.floor(Math.random() * lenA)
+
+        // console.log("randArrIdx = " + randArrIdx)
+
+        if(res1.indexOf(teamA[randArrIdx]) == ERROR) {//중복 제거
+            //예로 팀 A의 문자열이 없으면 -1  ㅡ> -1 == ERROR이니
+            //ㅡ> 넌 if문을 수행해야해 ㅡ> push를 통해 추가가 된다.
+            // 만약, 같은 문자열이 또 나오면 -1이 아니고 이미 있으니깐 추가가 안되어 중복이 배제된다.
+            res1.push(teamA[randArrIdx])
+            console.log("res1: %d - %s", i, res1[i++])
+        }
+    }
+
+    for(i = 0; i < lenB; ) {
+        randArrIdx = Math.floor(Math.random() * lenB)
+
+        if(res2.indexOf(teamB[randArrIdx]) == ERROR) {
+            res2.push(teamB[randArrIdx])
+            console.log("res2: %d - %s", i, res2[i++])
+        }
+    }
+
+    return (
+        <div className="RandomTeam">
+            <p>
+                Random Test
+            </p>
+        </div>
+    )
+}
+
+export default RandomTeam
Index: src/210201/Homework/Homework.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/Homework/Homework.js b/src/210201/Homework/Homework.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/Homework/Homework.js	
@@ -0,0 +1,44 @@
+const Homework = () => {
+//) 자바스크립트 배열에 랜덤한 숫자를 n개 생성한다.
+//    n개의 배열에서 3의 배수만 골라보도록 하자!
+//    (이 문제는 중복을 허용한다)
+    class arr2 {
+
+        constructor() {
+            this.arr1 = []
+            this.rand = Math.floor(Math.random() * 30) + 1
+
+        }
+
+    }
+
+    let Arr2 = new arr2()
+
+
+
+    for (let i = 0; i <Arr2.arr1.length; i++) {
+        let ran = Arr2.rand
+        if (ran % 3 == 0) {
+            Arr2.arr1.push(ran)
+
+
+        }
+
+        console.log(ran)
+    }
+
+
+    return (
+        <div className="Homework1">
+            <p>
+
+                Homework
+
+            </p>
+
+        </div>
+    )
+
+}
+
+export default Homework
\ No newline at end of file
Index: src/210129/literal/LiteralTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/literal/LiteralTest.js b/src/210129/literal/LiteralTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/literal/LiteralTest.js	
@@ -0,0 +1,32 @@
+const LiteralTest =() =>{
+    let str1 = '4*1=3'
+
+    console.log(str1) // 문자열 출력
+
+    let first =3
+    let second =7
+
+    //URL 생성시 아주 유용하다.
+    //localhost:777/register
+    //localhost:777/manage
+
+    let str2 = `${first} * ${second} = ???`
+    //
+
+    // Q.console.log('%d, %s') 모두 가능한데 필요한가요?
+    // A.데이터 출력이 아니라 입력이나 가공하는데 유용
+    console.log(str2)
+
+    return(
+        <div className="LiteralTest">
+
+            <p>
+
+                Literal Test
+
+            </p>
+        </div>
+    )
+}
+
+export default LiteralTest
\ No newline at end of file
Index: src/210201/Homework/Homework2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/Homework/Homework2.js b/src/210201/Homework/Homework2.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/Homework/Homework2.js	
@@ -0,0 +1,41 @@
+const Homework2 = () => {
+    // 2번 문제에서 중복을 허용하지 않고 5의 배수만 골라보자!
+    //    또한 고른 값들은 모두 내림차순으로 정렬되어야 할 것이다.
+    class arr2 {
+        constructor() {
+            this.arr1 = [30]
+            this.arr2 = Math.floor(Math.random()*30)
+        }
+
+    }
+
+    let Arr2 = new arr2()
+      for (let i = 0; i <Arr2.arr1; i++) {
+
+        if (i % 5 ==0 ) {
+            console.log("Homework2 : " + i)
+
+        }
+
+        let sortedarr2 = Arr2.arr1.sort((a,b) => a-b)
+        console.log("sosortedarr2 = " + sortedarr2)
+
+    }
+
+
+
+
+    return (
+        <div className="Homework2">
+            <p>
+
+                Homework2
+
+            </p>
+
+        </div>
+    )
+
+}
+
+export default Homework2
\ No newline at end of file
Index: src/210129/equals/EQTest6.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/equals/EQTest6.js b/src/210129/equals/EQTest6.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/equals/EQTest6.js	
@@ -0,0 +1,24 @@
+const EQTest6 = () => {
+    let name = "test"
+    name = undefined
+
+    if (name == undefined) {
+        console.log("EQTest6 equal")
+    } else {
+        console.log("EQTest6 not equal")
+    }
+
+
+    return (
+        <div className="EQTest6">
+
+            <p>
+
+                Equals Test6
+
+            </p>
+        </div>
+    )
+}
+
+export default EQTest6
\ No newline at end of file
Index: src/210129/equals/EQTest5.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/equals/EQTest5.js b/src/210129/equals/EQTest5.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/equals/EQTest5.js	
@@ -0,0 +1,24 @@
+const EQTest5 = () => {
+
+    let name=true;
+
+    if (name === true) { // 데이터랑 데이터 타입이랑 같아야한다.
+        console.log("EQTest5 equal")
+    } else {
+        console.log("EQTest5 not equal")
+    }
+
+
+    return (
+        <div className="EQTest5">
+
+            <p>
+
+                Equals Test5
+
+            </p>
+        </div>
+    )
+}
+
+export default EQTest5
\ No newline at end of file
Index: src/210129/equals/EQTest4.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/equals/EQTest4.js b/src/210129/equals/EQTest4.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/equals/EQTest4.js	
@@ -0,0 +1,23 @@
+const EQTest4 = () => {
+    let name = "test"
+
+    if (name === null) {
+        console.log("EQTest4 equal")
+    } else {
+        console.log("EQTest4 not equal")
+    }
+
+
+    return (
+        <div className="EQTest4">
+
+            <p>
+
+                Equals Test4
+
+            </p>
+        </div>
+    )
+}
+
+export default EQTest4
\ No newline at end of file
Index: src/210129/equals/EQTest3.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/equals/EQTest3.js b/src/210129/equals/EQTest3.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/equals/EQTest3.js	
@@ -0,0 +1,23 @@
+const EQTest3 = () => {
+    let name = "test"
+
+    if (name == "go") {
+        console.log("EQTest3 equal")
+    } else {
+        console.log("EQTest3 not equal")
+    }
+
+
+    return (
+        <div className="EQTest3">
+
+            <p>
+
+                Equals Test3
+
+            </p>
+        </div>
+    )
+}
+
+export default EQTest3
\ No newline at end of file
Index: src/210129/equals/EQTest2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/equals/EQTest2.js b/src/210129/equals/EQTest2.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/equals/EQTest2.js	
@@ -0,0 +1,23 @@
+const EQTest2 = () => {
+    let name = "test"
+
+    if (name == 'test') {
+        console.log("EQTest2 equal")
+    } else {
+        console.log("EQTest2 not equal")
+    }
+
+
+    return (
+        <div className="EQTest2">
+
+            <p>
+
+                Equals Test2
+
+            </p>
+        </div>
+    )
+}
+
+export default EQTest2
\ No newline at end of file
Index: src/210129/equals/EQTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/equals/EQTest.js b/src/210129/equals/EQTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/equals/EQTest.js	
@@ -0,0 +1,29 @@
+const EQTest =() =>{
+    let name = "test"
+    // 값이 뭔가 있으면??? True
+    if(name){
+        console.log("EQTest ture")
+    }else{
+        console.log("EQTest false")
+    }
+
+    if(!name){ // "test"가 아니니깐 트
+        console.log("EQTest (not) ture")
+    }else{
+        console.log("EQTest (not) false")
+    }
+
+
+    return(
+        <div className="EQTest">
+
+            <p>
+
+                Equals Test
+
+            </p>
+        </div>
+    )
+}
+
+export default EQTest
\ No newline at end of file
Index: src/210201/array-test/ArrayPopTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/array-test/ArrayPopTest.js b/src/210201/array-test/ArrayPopTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/array-test/ArrayPopTest.js	
@@ -0,0 +1,24 @@
+const ArrayPopTest = () => {
+
+    var arr = ["one", "two", "three"]
+
+    console.log("Before Pop = " + arr)
+    let elem = arr.pop();
+
+    console.log("After Pop = " + arr)
+    let elem2 = arr.pop();
+
+    console.log("Pop element = " + elem)
+    console.log("Pop element = " + elem2)
+
+
+    return (
+        <div className="ArrayPopTest">
+            <p>
+                ArrayPopTest
+            </p>
+        </div>
+    )
+}
+
+export default ArrayPopTest
Index: src/210201/array-test/ArrayShiftTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/array-test/ArrayShiftTest.js b/src/210201/array-test/ArrayShiftTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/array-test/ArrayShiftTest.js	
@@ -0,0 +1,26 @@
+const ArrayShiftTest = () => {
+
+    let arr = ["one", "two", "three"]
+
+    console.log("Before Shift = " + arr)
+
+    // Queue(큐) 형태의 값 빼기 방식이라고 봐도 무방하다.
+    // Stack은 후입선출 Queue는 선입선출이다.
+
+    let elem = arr.shift()
+
+    console.log("After Shift = " + arr)
+
+    console.log("Shift Length = " + elem)
+
+
+    return (
+        <div className="ArrayShiftTest">
+            <p>
+                ArrayShiftTest
+            </p>
+        </div>
+    )
+}
+
+export default ArrayShiftTest
Index: src/210201/array-test/ArraySliceTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/array-test/ArraySliceTest.js b/src/210201/array-test/ArraySliceTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/array-test/ArraySliceTest.js	
@@ -0,0 +1,32 @@
+const ArraySliceTest = () => {
+
+    let arr = [1, 2, 3, 4, 5, 6, 7]
+
+    console.log("Before slice = " + arr)
+
+    let slicedArr = arr.slice(3)
+
+    console.log("slicedArr = " + slicedArr)
+    console.log("After Slice = " + arr) // 슬라이스는 실행해도 원본이 바뀌지 않는다.
+
+
+    arr = [1, 2, 3, 4, 5, 6, 7]
+
+    console.log("Before slice = " + arr)
+
+    slicedArr = arr.slice(1)
+
+    console.log("slicedArr = " + slicedArr)
+    console.log("After Slice = " + arr)
+
+
+    return (
+        <div className="ArraySliceTest">
+            <p>
+                ArraySliceTest
+            </p>
+        </div>
+    )
+}
+
+export default ArraySliceTest
Index: src/data_type/DataTypeBasic.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>function DataTypeBasic(){\n    \n    // var는 변수 선언할 때 사용한다. \n    var length = 7 // 정수형도 var\n    var lastname = \"Gogosing\" // 문자열도 var\n    var x = {firstName : \"Rust\", lastname : \"Golang\"} // 묶음 형식도 var\n    \n\n\n    // console.log()를 통해서\n    // 웹 페이지에서 F12를 누르고 콘솔을 눌러\n    // 콘솔 메시지를 확인할 수 있다.\n    // 즉, 브라우저용 디버깅에 유용하게 활용할 수 있다. \n    console.log(length)\n        \n    console.log(lastname)\n    \n    console.log(x.lastname) \n\n    console.log(x.firstName)\n    \n\n    // div의 약자는 Division으로\n    // 웹 사이트의 레이아웃(전체적인 툴)을 만들 때 사용 함\n\n    // p는 paragraph 태그로 하나의 문단을 만들때 사용된다.\n\n    // div에 className이라는 것이 보이는데\n    // 이 부분은 향후 CSS를 할 때 좀 더 자세히 알아볼 것임.\n    return(\n\n    <div className =\"DataTypeBasic\">\n        <p>\n    {length}, {lastname}, {x.toString()}.\n    </p>\n    </div>\n    )\n\n}\n\nexport default DataTypeBasic
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/data_type/DataTypeBasic.js b/src/data_type/DataTypeBasic.js
--- a/src/data_type/DataTypeBasic.js	
+++ b/src/data_type/DataTypeBasic.js	
@@ -31,7 +31,7 @@
 
     <div className ="DataTypeBasic">
         <p>
-    {length}, {lastname}, {x.toString()}.
+    {length}, {lastname}, {x.toString()}.능
     </p>
     </div>
     )
Index: src/210201/array-test/ArrayJoinTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/array-test/ArrayJoinTest.js b/src/210201/array-test/ArrayJoinTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/array-test/ArrayJoinTest.js	
@@ -0,0 +1,20 @@
+const ArrayJoinTest = () => {
+
+    var arr = ["one", "two", "three"]
+
+    console.log(arr.toString())
+    console.log(arr.join("*")) // join 개념 공부 ㅡ> 배열 요소를
+
+
+    console.log(arr.join("+"))
+
+    return (
+        <div className="ArrayJoinTest">
+            <p>
+                ArrayJoinTest
+            </p>
+        </div>
+    )
+}
+
+export default ArrayJoinTest
Index: src/210201/array-test/ArrayPushTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/array-test/ArrayPushTest.js b/src/210201/array-test/ArrayPushTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/array-test/ArrayPushTest.js	
@@ -0,0 +1,22 @@
+const ArrayPushTest = () => {
+
+    var arr = ["one", "two", "three"]
+
+    console.log("Before Push = " + arr)
+    let len = arr.push("seven");
+
+    console.log("After Push = " + arr)
+
+    console.log("Arr Length = " + len)
+
+
+    return (
+        <div className="ArrayPushTest">
+            <p>
+                ArrayPushTest
+            </p>
+        </div>
+    )
+}
+
+export default ArrayPushTest
Index: src/210129/array/SpreadTest7.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/array/SpreadTest7.js b/src/210129/array/SpreadTest7.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/array/SpreadTest7.js	
@@ -0,0 +1,42 @@
+const SpreadTest7 = () => {
+    let newObj = {
+        name: "newObj",
+        number: 3
+    }
+
+    console.log("SpreadTest7: " + newObj)
+    console.log("SpreadTest7: " + newObj.name)
+    console.log("SpreadTest7: " + newObj.number)
+
+    let newObj2 = {...newObj} //newObj값을 newObj2에 흩뿌린다
+
+    console.log("SpreadTest7: " + newObj2)
+    console.log("SpreadTest7: " + newObj2.name)
+    console.log("SpreadTest7: " + newObj2.number)
+
+    newObj2 = {
+        nickname: "SpreadTest"
+    }
+
+    let newObj3 = {...newObj, ...newObj2} // newObj값과 newObj2값을 3에 뿌린다.
+
+    console.log("SpreadTest7: " + newObj3)
+    console.log("SpreadTest7: " + newObj3.name)
+    console.log("SpreadTest7: " + newObj3.number)
+
+    // alert을 통해 웹 페이지에 경고 메시지를 띄울 수 있다.
+    // alert("hihi");
+
+    //JSON.stringify를 통해 Object에 들어 있는 내용을 확인 할 수 있다.
+
+    console.log("SpreadTest7" + JSON.stringify(newObj3))
+    return (
+        <div className="SpreadTest7">
+            <p>
+                Spread Test7
+            </p>
+        </div>
+    )
+}
+
+export default SpreadTest7
\ No newline at end of file
Index: src/210201/array-test/ArrayUnshiftTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/array-test/ArrayUnshiftTest.js b/src/210201/array-test/ArrayUnshiftTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/array-test/ArrayUnshiftTest.js	
@@ -0,0 +1,24 @@
+const ArrayUnshiftTest = () => {
+
+    let arr = ["one", "two", "three"]
+
+    console.log("Before Unshift = " + arr)
+
+
+    let len = arr.unshift(333) //앞에 추가되어 붙는다.
+
+    console.log("After Unshift = " + arr)
+
+    console.log("Unshift Length = " + len)
+
+
+    return (
+        <div className="ArrayUnshiftTest">
+            <p>
+                ArrayUnshiftTest
+            </p>
+        </div>
+    )
+}
+
+export default ArrayUnshiftTest
Index: src/210129/array/SpreadTest6.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/array/SpreadTest6.js b/src/210129/array/SpreadTest6.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/array/SpreadTest6.js	
@@ -0,0 +1,20 @@
+const SpreadTest6 = () => {
+    let arr = [10,20,70,50,60,90]
+
+    // ... 이 Spread(흩뿌리기)
+    console.log("SpreadTest6:" + Math.max(...arr))
+
+    //아래는 흩뿌리기가 안되므로 NaN(Not a Number)
+    console.log("SpreadTest6:" + Math.max(arr))
+
+
+    return (
+        <div className="SpreadTest6">
+            <p>
+                Spread Test6
+            </p>
+        </div>
+    )
+}
+
+export default SpreadTest6
\ No newline at end of file
Index: src/210129/array/SpreadTest5.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/array/SpreadTest5.js b/src/210129/array/SpreadTest5.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/array/SpreadTest5.js	
@@ -0,0 +1,20 @@
+const SpreadTest5 = () => {
+    let arr = ["a", "b", "c"]
+
+    // 현재 arr가 있고 그 뒤로 아래 보이는 배열을 붙여주세요  = .push()
+    arr.push(...["d", "e", "ff"])
+    arr.push(...arr)
+
+    console.log("SpreadTest5:" + arr)
+
+
+    return (
+        <div className="SpreadTest5">
+            <p>
+                Spread Test5
+            </p>
+        </div>
+    )
+}
+
+export default SpreadTest5
\ No newline at end of file
Index: src/210129/array/SpreadTest4.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/array/SpreadTest4.js b/src/210129/array/SpreadTest4.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/array/SpreadTest4.js	
@@ -0,0 +1,23 @@
+const SpreadTest4 = () => {
+    let arrStr = [..."xyz"]
+
+    console.log("SpreadTest4:" + arrStr) // x,
+
+    function spreadArrPrint(a, b, c) {
+        console.log("spreadArrPrint4: " + a) // x출력
+        console.log("spreadArrPrint4: " + b) // y출력
+        console.log("spreadArrPrint4: " + c) // z출력 // 흩뿌려준다.
+    }
+
+    spreadArrPrint(...arrStr)
+
+    return (
+        <div className="SpreadTest4">
+            <p>
+                Spread Test4
+            </p>
+        </div>
+    )
+}
+
+export default SpreadTest4
\ No newline at end of file
Index: src/210201/array-test/ArrayConcatTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/array-test/ArrayConcatTest.js b/src/210201/array-test/ArrayConcatTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/array-test/ArrayConcatTest.js	
@@ -0,0 +1,33 @@
+const ArrayConcatTest = () => {
+
+    let test = ["four", "six", "ten"]
+
+    console.log("Before Concat = " + test)
+
+     test = test.concat(test)
+
+    console.log("After Concat = " + test)
+
+     test = test.concat("I can add String!!!")
+
+    console.log("After Concat = " + test)
+
+    let arr1 = [1,3]
+    let arr2 = [3,7]
+
+    test = test.concat(arr1, arr2)
+
+    console.log("After Concat = " + test)
+
+
+
+    return (
+        <div className="ArrayConcatTest">
+            <p>
+                ArrayConcatTest
+            </p>
+        </div>
+    )
+}
+
+export default ArrayConcatTest
Index: src/210129/array/SpreadTest3.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/array/SpreadTest3.js b/src/210129/array/SpreadTest3.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/array/SpreadTest3.js	
@@ -0,0 +1,29 @@
+const SpreadTest3 = () => {
+    let arr = [1, 2, 3]
+    // 1이 먼저오고 뒤쪽에 arrNum이 오고 맨 뒤에 5가 온다.
+    // ...은 어떤 특정한 객체에 들어있는 내용을 나열한다.
+
+
+    console.log(arr)
+
+    // function 부분 거슬릴 것임 아래는 거슬리는 이유다.
+    // 1) 함수 내 함수가 들어있음
+    // 2) 입력 인자에 데이터 타입이 없음
+    function spreadArrPrint(a, b, c) {
+        console.log("spreadArrPrint3: " + a)
+        console.log("spreadArrPrint3: " + b)
+        console.log("spreadArrPrint3: " + c)
+    }
+
+    spreadArrPrint(...arr) // arr의 값을가져와 a,b,c에서 1,2,3으로 변환
+
+    return (
+        <div className="SpreadTest3">
+            <p>
+                Spread Test3
+            </p>
+        </div>
+    )
+}
+
+export default SpreadTest3
\ No newline at end of file
Index: src/210201/array-test/ArraySpliceTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/array-test/ArraySpliceTest.js b/src/210201/array-test/ArraySpliceTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/array-test/ArraySpliceTest.js	
@@ -0,0 +1,31 @@
+const ArraySpliceTest = () => {
+
+    let arr = ["one", "two", "three"]
+
+    console.log("Before Splice = " + arr)
+
+    let what = arr.splice(2, 0, "elem1", "elem2")
+
+    console.log("After Splice = " + arr)
+    console.log("what = " + what)
+
+   what= arr.splice(2, 2, "elem3", "elem4")
+
+    console.log("what = " + what)
+    console.log("After Splice = " + arr)
+
+    arr.splice(1, 2)
+
+    console.log("After Splice = " + arr)
+
+
+    return (
+        <div className="ArraySpliceTest">
+            <p>
+                ArraySpliceTest
+            </p>
+        </div>
+    )
+}
+
+export default ArraySpliceTest
Index: src/210129/array/SpreadTest2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/array/SpreadTest2.js b/src/210129/array/SpreadTest2.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/array/SpreadTest2.js	
@@ -0,0 +1,19 @@
+const SpreadTest2 = () => {
+    let arrNum = [2, 3, 4]
+    // 1이 먼저오고 뒤쪽에 arrNum이 오고 맨 뒤에 5가 온다.
+    // ...은 어떤 특정한 객체에 들어있는 내용을 나열한다.
+    
+    let newArrNum = [1, ...arrNum, 5]
+    console.log(arrNum)
+    console.log(newArrNum)
+
+    return (
+        <div className="SpreadTest2">
+            <p>
+                Spread Test2
+            </p>
+        </div>
+    )
+}
+
+export default SpreadTest2
\ No newline at end of file
Index: src/210129/array/SpreadTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210129/array/SpreadTest.js b/src/210129/array/SpreadTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210129/array/SpreadTest.js	
@@ -0,0 +1,20 @@
+const SpreadTest = ()=>{
+    let arrColor =["red", "green", "blue"]
+    // ...arrColor는 뭐다?
+    // 현재 위치에 arrColor를 배치하고 뒤쪽에 purple을 배치한다.
+    let newArrColor = [...arrColor, "purple"] // 하나의 추가 가능
+
+
+    console.log(arrColor)
+    console.log(newArrColor)
+
+    return(
+        <div className="SpreadTest">
+            <p>
+                Spread Test
+            </p>
+        </div>
+    )
+}
+
+export default SpreadTest
\ No newline at end of file
Index: src/210201/class-test/ClassObject3.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/class-test/ClassObject3.js b/src/210201/class-test/ClassObject3.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/class-test/ClassObject3.js	
@@ -0,0 +1,62 @@
+function ClassObject3() {
+    class Obj {
+
+
+        constructor() {
+            this.name = "test"
+            this.major = "social welfare"
+        }
+
+        getName() {
+            return this.name
+        }
+
+        getMajor() {
+            return this.major
+        }
+
+        setName(name) {
+            this.name = name
+        }
+
+        setMajor(major) {
+            this.major = major
+        }
+
+        display() {
+            console.log("ClassObject3 : " + this.name)
+            console.log("ClassObject3 : " + this.major)
+        }
+
+        static getStaticTest(isTest, number) {
+            if (isTest) {
+                return 333
+            } else {
+                // parseInt(숫자값, 표현하는 진법) -> (radix - 10진수로 표현)
+                return parseInt(3.3 * number, 10)
+            }
+        }
+    }
+
+    let obj = new Obj() // 메모리관점에서 봐야함.
+
+    console.log("ClassObject3 : " + obj.name)
+    console.log("ClassObject3 : " + obj.major)
+    console.log("ClassObject3 : " + obj.getName())
+    console.log("ClassObject3 : " + obj.getMajor())
+
+    obj.display()
+
+    console.log(Obj.getStaticTest(true))
+    console.log(Obj.getStaticTest(false, 100))
+
+    return (
+        <div className="ClassObject3">
+            <p>
+                Class Test3
+            </p>
+        </div>
+    )
+}
+
+export default ClassObject3
\ No newline at end of file
Index: src/210201/class-test/ClassObject4.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/class-test/ClassObject4.js b/src/210201/class-test/ClassObject4.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/class-test/ClassObject4.js	
@@ -0,0 +1,65 @@
+function ClassObject4() {
+    class Obj {
+
+
+        constructor(name) {
+            this.name = "test"
+            this.major = "social welfare"
+            Obj.num++
+        }
+
+        getName() {
+            return this.name
+        }
+
+        getMajor() {
+            return this.major
+        }
+
+        setName(name) {
+            this.name = name
+        }
+
+        setMajor(major) {
+            this.major = major
+        }
+
+        display() {
+            console.log("ClassObject4 : " + this.name)
+            console.log("ClassObject4 : " + this.major)
+        }
+
+        static getStaticTest(isTest, number) {
+            if (isTest) {
+                return 333
+            } else {
+                // parseInt(숫자값, 표현하는 진법) -> (radix - 10진수로 표현)
+                return parseInt(3.3 * number, 10)
+            }
+        }
+
+        static getStaticNumber(){
+            return Obj.num
+        }
+    }
+    Obj.num =0
+
+    let obj = new Obj("test1")
+    obj.display()
+    console.log("ClassObject4 : "+ + Obj.getStaticNumber())
+
+    let obj2 = new Obj("test2")
+    obj.display()
+    console.log("ClassObject4 : "+ + Obj.getStaticNumber())
+
+
+    return (
+        <div className="ClassObject4">
+            <p>
+                Class Test4
+            </p>
+        </div>
+    )
+}
+
+export default ClassObject4
\ No newline at end of file
Index: src/210201/class-test/ClassObject.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/class-test/ClassObject.js b/src/210201/class-test/ClassObject.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/class-test/ClassObject.js	
@@ -0,0 +1,26 @@
+function ClassObject() {
+    class Obj {
+
+    // 생성자를 constructor()로 사용해야한다.
+        // 클래스는 호이스팅이 발생되지 않는다. cf.) 함수는 호이스팅이 발생 할 수 있다.
+        constructor() {
+            this.name = "test"
+            this.major = "social welfare"
+        }
+    }
+
+    let obj = new Obj() // 클래스 생성
+
+    console.log("ClassObject : " + obj.name)
+    console.log("ClassObject : "+ obj.major)
+
+    return (
+        <div className="ClassObject">
+            <p>
+                Class Test
+            </p>
+        </div>
+    )
+}
+
+export default ClassObject
\ No newline at end of file
Index: src/210201/class-test/ClassObject2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/class-test/ClassObject2.js b/src/210201/class-test/ClassObject2.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/class-test/ClassObject2.js	
@@ -0,0 +1,50 @@
+function ClassObject2() {
+    class Obj {
+
+
+        constructor() {
+            this.name = "test"
+            this.major = "social welfare"
+        }
+
+        getName() {
+            return this.name
+        }
+
+        getMajor() {
+            return this.major
+        }
+
+        setName(name) {
+            this.name = name
+        }
+
+        setMajor(major) {
+            this.major = major
+        }
+
+        display() {
+            console.log("ClassObject2 : " + this.name)
+            console.log("ClassObject2 : " + this.major)
+        }
+    }
+
+    let obj = new Obj()
+
+    console.log("ClassObject2 : " + obj.name)
+    console.log("ClassObject2 : " + obj.major)
+    console.log("ClassObject2 : " + obj.getName())
+    console.log("ClassObject2 : " + obj.getMajor())
+
+    obj.display()
+
+    return (
+        <div className="ClassObject2">
+            <p>
+                Class Test2
+            </p>
+        </div>
+    )
+}
+
+export default ClassObject2
\ No newline at end of file
Index: src/210201/object-test/Object.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/object-test/Object.js b/src/210201/object-test/Object.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/object-test/Object.js	
@@ -0,0 +1,37 @@
+function ObjectTest() {
+    let obj = {
+        name: "test",
+
+        getName: function() {
+            return this.name
+        },
+        setName: function(name) {
+            this.name = name
+        },
+        display: function() {
+            console.log(this.name)
+        }
+    }
+
+    // test
+    console.log("ObjectTest: " + obj.getName())
+
+    obj.setName("gogosing")
+    console.log("ObjectTest: " + obj.getName())
+
+    obj.display()
+    console.log("ObjectTest: " + obj["getName"]())
+
+    obj["setName"]("Star Ocean")
+    console.log("ObjectTest: " + obj["getName"]())
+
+    return (
+        <div className="ObjectTest">
+            <p>
+                ObjectTest
+            </p>
+        </div>
+    )
+}
+
+export default ObjectTest
\ No newline at end of file
Index: src/210201/object-test/ObjectTest2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/object-test/ObjectTest2.js b/src/210201/object-test/ObjectTest2.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/object-test/ObjectTest2.js	
@@ -0,0 +1,30 @@
+function ObjectTest2() {
+    let obj = {
+        _name: "test",
+
+        get name() {
+            console.log("I'm Getter")
+            return this._name
+        },
+
+        set name(value) {
+            console.log("I'm Setter")
+            return this._name = value
+        }
+    }
+
+    console.log("ObjectTest2 : " + obj.name) //  get name을 통해 겟터ㅡ> 리턴값인 this._name = 'test')
+    console.log("ObjectTest2 : " + obj._name)
+
+    obj.name = "gogosing"
+    console.log(obj.name)
+
+    return (
+        <div className="ObjectTest2">
+            <p>
+                ObjectTest2
+            </p>
+        </div>
+    )
+}
+export default ObjectTest2
\ No newline at end of file
Index: src/210201/class-extends-test/ClassExtends.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/class-extends-test/ClassExtends.js b/src/210201/class-extends-test/ClassExtends.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/class-extends-test/ClassExtends.js	
@@ -0,0 +1,42 @@
+function ClassExtends() {
+    class Obj {
+        // 생성자를 constructor()로 사용해야 한다.
+        constructor(name) {
+            this._name = "extends"
+        }
+        getName() {
+            return this._name
+        }
+        setName(name) {
+            this._name = name
+        }
+        display() {
+            console.log("ClassExtends: " + this._name)
+        }
+    }
+
+    let obj = new Obj("test1")
+
+    obj.display()
+
+    class ExtendObj extends Obj {
+        constructor() {
+            super();
+        }
+    }
+
+    let extObj = new ExtendObj()
+
+    extObj.setName("Extends Test")
+    extObj.display()
+
+    return (
+        <div className="ClassExtends">
+            <p>
+                Class Extends
+            </p>
+        </div>
+    )
+}
+
+export default ClassExtends
\ No newline at end of file
Index: src/210201/class-extends-test/ClassExtends2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210201/class-extends-test/ClassExtends2.js b/src/210201/class-extends-test/ClassExtends2.js
new file mode 100644
--- /dev/null	
+++ b/src/210201/class-extends-test/ClassExtends2.js	
@@ -0,0 +1,50 @@
+function ClassExtends2() {
+    class Obj {
+        constructor() {
+            this._name = "extends2"
+        }
+        getName() {
+            return this._name
+        }
+        setName(name) {
+            this._name = name
+        }
+        display() {
+            console.log("ClassExtends2: " + this._name)
+        }
+        toString() {
+            throw new Error('매서드를 구현하세요!')
+        }
+    }
+
+    let obj = new Obj()
+
+    obj.display()
+
+    class ExtendObj extends Obj {
+        constructor() {
+            super();
+        }
+        toString() {
+            return "overload!"
+        }
+    }
+
+    let extObj = new ExtendObj()
+
+    extObj.setName("Extends Test 2")
+    extObj.display()
+
+    console.log(extObj.toString())
+    console.log(extObj)
+
+    return (
+        <div className="ClassExtends2">
+            <p>
+                Class Extends 2
+            </p>
+        </div>
+    )
+}
+
+export default ClassExtends2
\ No newline at end of file
Index: src/210202/func-test/FuncTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/func-test/FuncTest.js b/src/210202/func-test/FuncTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/func-test/FuncTest.js	
@@ -0,0 +1,28 @@
+const FuncTest = () => {
+    const add = (first, second, ...args) => {
+        console.log("first = " + first + ", second  = " +
+            second + ", args = " + args)
+
+        let sum = first + second
+        for (let i = 0; i < args.length; i++) {
+            sum += args[i]
+        }
+
+        return sum
+
+    }
+
+    let sum = add(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
+
+    console.log(sum)
+
+    return (
+        <div className="FuncTest">
+            <p>
+                FuncTest
+            </p>
+        </div>
+    )
+}
+
+export default FuncTest
\ No newline at end of file
Index: src/210202/apply-math/ApplyMathTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/apply-math/ApplyMathTest.js b/src/210202/apply-math/ApplyMathTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/apply-math/ApplyMathTest.js	
@@ -0,0 +1,26 @@
+const ApplyMathTest = () => {
+    let arr = [1, 3, 8, 10, 5, 7, 11, 19, 77, 33]
+
+    function findArrMax(arr){
+        return Math.max.apply(null,arr)
+        //최대값 리턴 // apply의 기능 공부 // null은 this와 관계없이 동작하기 때문
+    }
+
+    function findArrMin(arr){
+        return Math.min.apply(null, arr) // 최소 값 리턴
+    }
+
+    console.log("Before findArrMax() = "+ arr) // 배열 안의 값 출력
+    console.log("findArrMax() = "+ findArrMax(arr)) // 최대 값 출력
+    console.log("findArrMin() = "+ findArrMin(arr)) // 최소 값 출력
+
+
+    return (
+        <div className="ApplyMathTest">
+            <p>
+                array-test : ApplyMathTest
+            </p>
+        </div>
+    )
+}
+export default ApplyMathTest
\ No newline at end of file
Index: src/210202/func-test/DefaultParam.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/func-test/DefaultParam.js b/src/210202/func-test/DefaultParam.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/func-test/DefaultParam.js	
@@ -0,0 +1,24 @@
+const DefaultParam = () => {
+    const defParam = (first, second = 3) => {
+        return first + second
+    }
+
+    let sum = defParam(1, 2)
+
+    console.log(sum)
+
+    sum = defParam(1) //Second 값이 없으면 defParam second 의 인자 = 3을 디폴트값으로 하여 리턴 값 합산 후 sum에 대입
+
+    console.log(sum)
+
+
+    return (
+        <div className="DefaultParam">
+            <p>
+                DefaultParam
+            </p>
+        </div>
+    )
+}
+
+export default DefaultParam
\ No newline at end of file
Index: src/210202/array-test/ArraySortTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/array-test/ArraySortTest.js b/src/210202/array-test/ArraySortTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/array-test/ArraySortTest.js	
@@ -0,0 +1,16 @@
+const ArraySortTest = () => {
+    let arr = [1, 3, 8, 10, 5, 7, 11, 19, 77, 33]
+
+    console.log("Before Reverse : " + arr)
+    arr.reverse() // 현재 배열을 역순으로 나열한다.
+    console.log("Before Reverse : " + arr)
+
+    return(
+        <div className="ArraySortTest">
+            <p>
+                array-test : ArraySortTest
+            </p>
+        </div>
+    )
+}
+export default ArraySortTest
\ No newline at end of file
Index: src/210202/array-test/ArraySortTest2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/array-test/ArraySortTest2.js b/src/210202/array-test/ArraySortTest2.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/array-test/ArraySortTest2.js	
@@ -0,0 +1,21 @@
+const ArraySortTest2 = () => {
+    let arr = [1, 3, 8, 10, 5, 7, 11, 19, 77, 33]
+
+    console.log("Before sort : " + arr)
+    arr.sort(function (a, b) {
+        return a - b // 오름차순 정렬
+    })
+    console.log("After sort : " + arr)
+    console.log("Find Max =  : " + arr[arr.length - 1]) // 현재 기준 배열의 총길이에서 -1 = 최대값
+    console.log("Find min : " + arr[0]) // 0번째 값 = 최소값
+
+
+    return (
+        <div className="ArraySortTest2">
+            <p>
+                array-test : ArraySortTest2
+            </p>
+        </div>
+    )
+}
+export default ArraySortTest2
\ No newline at end of file
Index: src/210202/arrow-test/ArrowFunctionTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/arrow-test/ArrowFunctionTest.js b/src/210202/arrow-test/ArrowFunctionTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/arrow-test/ArrowFunctionTest.js	
@@ -0,0 +1,20 @@
+const ArrowFunctionTest = () =>{
+    let f = function (){return "33"}
+    console.log("ArrowFunctionTest :" + f())
+
+    // 일반 함수표현식과 ArrowFunction표현식의 차이를 보여
+
+    let fArrow = () => {return "33"} //return 생략 불가능
+    console.log("ArrowFunctionTest :" + fArrow())
+
+
+    return(
+        <div className="ArrowFunctionTest">
+            <p>
+                ArrowFunctionTest
+            </p>
+        </div>
+    )
+}
+
+export default ArrowFunctionTest
\ No newline at end of file
Index: src/210202/arrow-test/ArrowFunctionTest2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/arrow-test/ArrowFunctionTest2.js b/src/210202/arrow-test/ArrowFunctionTest2.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/arrow-test/ArrowFunctionTest2.js	
@@ -0,0 +1,19 @@
+const ArrowFunctionTest2 = () =>{
+    let add333 = function (val){return 333 + val}
+    console.log("ArrowFunctionTest :" + add333(77)) // val의 인자 대입
+
+
+    let add333Arrow = (val) => {return 333+val}
+    console.log("ArrowFunctionTest :" + add333Arrow(77))
+
+
+    return(
+        <div className="ArrowFunctionTest2">
+            <p>
+                ArrowFunctionTest2
+            </p>
+        </div>
+    )
+}
+
+export default ArrowFunctionTest2
\ No newline at end of file
Index: src/210202/arrow-test/ArrowFunctionTest3.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/arrow-test/ArrowFunctionTest3.js b/src/210202/arrow-test/ArrowFunctionTest3.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/arrow-test/ArrowFunctionTest3.js	
@@ -0,0 +1,23 @@
+const ArrowFunctionTest3 = () => {
+    let addTwoParam = function (a, b) {
+        return a + b
+    }
+    console.log("ArrowFunctionTest :" + addTwoParam(3, 7))
+
+
+    let addTwoParamArrow = (a, b) => {
+        return a + b
+    }
+    console.log("ArrowFunctionTest :" + addTwoParamArrow(3, 7))
+
+
+    return (
+        <div className="ArrowFunctionTest3">
+            <p>
+                ArrowFunctionTest3
+            </p>
+        </div>
+    )
+}
+
+export default ArrowFunctionTest3
\ No newline at end of file
Index: src/210202/arrow-test/ArrowFunctionTest4.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/arrow-test/ArrowFunctionTest4.js b/src/210202/arrow-test/ArrowFunctionTest4.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/arrow-test/ArrowFunctionTest4.js	
@@ -0,0 +1,28 @@
+const ArrowFunctionTest4 = () => {
+    const calculator = {
+        firstNum: 3,
+        secondNum: 7,
+
+
+        //자바 스크립트는 변수와 메서드 전부 객체로 취급 한다.
+       print: function () { // 변수에 함수 할당
+            const add = () => {
+                console.log("ArrowFunctionTest4 : " + JSON.stringify(this)) // [object object]를 문자열로 변환
+                return this.firstNum + this.secondNum // 3+7
+            }
+            console.log(this.firstNum + " + " + this.secondNum + " = " + add())
+        }
+    }
+
+    calculator.print()
+
+    return (
+        <div className="ArrowFunctionTest4">
+            <p>
+                ArrowFunctionTest4
+            </p>
+        </div>
+    )
+}
+
+export default ArrowFunctionTest4
\ No newline at end of file
Index: src/210202/custom-lib/SubOrderTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/custom-lib/SubOrderTest.js b/src/210202/custom-lib/SubOrderTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/custom-lib/SubOrderTest.js	
@@ -0,0 +1,28 @@
+const SubOrderTest = () => {
+    let arr = [1, 3, 8, 10, 5, 7, 11, 19, 77, 33]
+
+    var person1 = [
+        {name: "Jaemin", age: 32},
+        {name: "Alice", age: 23},
+        {name: "Tomas", age: 30},
+        {name: "Monica", age: 31},
+
+    ]
+
+    console.log("Before Custom Sort : " + JSON.stringify(person1)) // [OBJECT object]로 출력 시 객체 값 받아오기
+
+
+    person1.sort
+    ((a, b) => (a.age-b.age)) // 내림차순 나이 정렬
+
+
+    console.log("After Custom Sort : " + JSON.stringify(person1))
+    return (
+        <div className="SubOrderTest">
+            <p>
+                array-test : SubOrderTest
+            </p>
+        </div>
+    )
+}
+export default SubOrderTest
\ No newline at end of file
Index: src/210202/custom-lib/SubOrderTest2.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/custom-lib/SubOrderTest2.js b/src/210202/custom-lib/SubOrderTest2.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/custom-lib/SubOrderTest2.js	
@@ -0,0 +1,38 @@
+const SubOrderTest2 = () => {
+    let arr = [1, 3, 8, 10, 5, 7, 11, 19, 77, 33]
+
+    var person1 = [
+        {name: "Jaemin", age: 32},
+        {name: "Alice", age: 23},
+        {name: "Tomas", age: 30},
+        {name: "Monica", age: 31},
+
+    ]
+
+    console.log("Before Custom Sort : " + JSON.stringify(person1)) // [OBJECT object]로 출력 객체 값 받으려면 JSON.stringfy
+
+    person1.sort(function (a, b) {
+            let x = a.name.toLowerCase() //소문자로 변환 후 어순 별로 정렬 // toLowerCase() 복습
+            let y = b.name.toLowerCase()
+
+            if (x < y) { // 오름차순 정렬
+                return -1
+            }
+            if (x > y) {
+                return 1
+            }
+            return 0
+        }
+    )
+
+
+    console.log("After Custom Sort : " + JSON.stringify(person1))
+    return (
+        <div className="SubOrderTest2">
+            <p>
+                array-test : SubOrderTest2
+            </p>
+        </div>
+    )
+}
+export default SubOrderTest2
\ No newline at end of file
Index: src/210202/index-test/IndexTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/index-test/IndexTest.js b/src/210202/index-test/IndexTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/index-test/IndexTest.js	
@@ -0,0 +1,25 @@
+const IndexTest = () => {
+    let vendors = ["ti", "stm", "adi", "nvidia", "qualcomm", "xilinx", "amd", "nxp", "freescale", "infineon",
+        "xilinx", "amd", "nxp", "freescale", "infineon"]
+    let lastIdx = vendors.lastIndexOf("freescale")
+
+
+
+    console.log(vendors)
+    console.log("Where is it? = "  + lastIdx) //freescale의 배열이 몇 번째 배열에 있는지?
+
+    let idx = vendors.indexOf("freescale")
+
+    console.log("Where is it? = "  + idx) // freescale(문자열) 중복 시 가장 가까운 곳에 있는 배열이 몇번째 있는지?
+
+
+
+    return (
+        <div className="IndexTest">
+            <p>
+                array-test : IndexTest
+            </p>
+        </div>
+    )
+}
+export default IndexTest
\ No newline at end of file
Index: src/210202/custom-lib/CustomMathTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/custom-lib/CustomMathTest.js b/src/210202/custom-lib/CustomMathTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/custom-lib/CustomMathTest.js	
@@ -0,0 +1,39 @@
+const CustomMathTest = () => {
+    let arr = [1, 3, 8, 10, 5, 7, 11, 19, 77, 33]
+
+    function myFindArrMax(arr){
+        let len = arr.length
+        let max = -Infinity;
+
+        while(len--){ //배열 길이 만큼 하나씩 감소
+            if(arr[len]>max){ //배열길이 > -음수(무한대)
+                max = arr[len] // 배열값은 max에 대입
+            }
+        }
+        return max // max 값 반환
+    }
+
+    function myFindArrMin(arr){
+        let len = arr.length
+        let min = Infinity
+
+        while(len--){ // 배열의 길이 만큼 하나씩 감소
+            if(arr[len]<min){ // 배열의 길이 < 양수(무한대)
+                min = arr[len] // 배열값은 min에 대입
+            }
+        }
+        return min // min 값 반환
+    }
+
+    console.log("myFindArrMax() = " + myFindArrMax(arr))
+    console.log("myFindArrMin() = " + myFindArrMin(arr))
+
+    return (
+        <div className="CustomMathTest">
+            <p>
+                array-test : CustomMathTest
+            </p>
+        </div>
+    )
+}
+export default CustomMathTest
\ No newline at end of file
Index: src/210202/Review Note/Review Note.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/Review Note/Review Note.md b/src/210202/Review Note/Review Note.md
new file mode 100644
--- /dev/null	
+++ b/src/210202/Review Note/Review Note.md	
@@ -0,0 +1,208 @@
+# 2021-02-02 Review Note
+
+## 1) toLowerCase() 와 toUpperCase()
+
+- 문자열을 소문자로 변환 = toLowerCase()
+- 문자열을 대문자로 변환 = toUpperCase()
+
+```js
+
+// Object 정렬
+let person = [
+    {name: jaemin, age: 25},
+    {name: mike, age: 27}
+]
+
+person.sort(function (a, b) {
+        let x = a.name.toUpperCase() // 대문자로 변환 후 어순 별로 정렬
+        let y = b.name.toUpperCase()
+
+        if (x < y) { // 오름차순 정렬
+            //if(x>y) // 내림차순 정렬
+            return -1
+        }
+        if (x > y) {
+            //if(x<y)
+            return 1
+        }
+        return 0
+    }
+)
+
+```
+
+## 2) apply()
+
+- apply는 배열 요소를 함수 매개변수로 사용해야할 때 유용
+
+```js
+    let arr = [1, 3, -7, -5, 5]
+
+Math.max.apply(null, arr) // 5
+Math.min.apply(null, arr) // -7
+
+// this 값에 null 쓴 이유는 this와 관계 없이 동작하기 때문 즉, 무엇을 넘기든 관계 없음.
+
+// 확산 연산자(...) 사용해도 결과 값은 동일
+Math.max.apply(...arr) // 5
+Math.min.apply(...arr) // -7
+
+
+```
+
+## 3) foreach()
+
+- 배열의 요소들을 반복하여 작업을 수행
+- forEach() 자체는 배열을 변경하지 않는다. (=immutable, 메모리 영역에서 변경 불가)
+  단, callback 함수에 작성된 코드에 따라 배열 변경 가능.
+- for 반복문으로 표현할 수 있다면 forEach()로도 표현 가능
+
+```js
+const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
+
+arr.forEach(function (element) {
+    console.log(element) // 1,2,3,4,5,6,7,8,9,10
+});
+
+arr.forEach(element => console.log(element));
+//---------------------------------------------------
+const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
+const oddarr = []
+
+arr.forEach(function (element) {
+    if (element % 2 == 1) {
+        oddarr.push(element)
+    }
+});
+
+console.log(oddarr) // [1,3,5,7,9]
+
+
+// callback : 각 요소를 시험할 함수. 다음 세 가지 매개변수를 받음
+// currentValue : 처리할 현재 요소(필수 요소임 아래 3가지 인수는 생략가능)
+// index (Optional) : 처리할 현재 요소의 인덱스
+// array (Optional) : forEach()를 호출한 배열
+// thisArg (Optional) : callback을 실행할 때 this로 사용할 값
+
+
+```
+
+## 4) every()
+
+- 배열 안의 모든 요소가 주어진 판별 함수를 만족하는지 확인 (&&)
+
+```js
+const test = (currentvalue) => currentValue < 40
+
+const arr = [2, 34, 5, 3, 39]
+const arr1 = [2, 45, 5, 3, 39]
+
+console.log(arr.every(test)) //true
+console.log(arr1.every(test)) //false
+
+
+```
+
+## 5) some()
+
+- 특정 조건에서 적어도 하나는 만족 하는지 확인(||)
+
+```js
+const test = (currentvalue) => currentValue < 40
+
+const arr = [2, 34, 5, 3, 39]
+const arr1 = [50, 45, 60, 78, 39]
+
+console.log(arr.every(test)) //true
+console.log(arr1.every(test)) //true
+```
+
+## 6) filter()
+
+```js
+
+const words = ['spray', 'limit', 'elite', 'establish', 'present']
+
+const result = words.filter(word => word.length > 6); //글자 길이 6개 이상
+
+console.log(result); // 'establish', 'present' 출력
+
+```
+
+## 7) find() 와 findIndex()
+
+- find() 메서드는 주어진 판별 함수를 만족하는 첫 번째 요소의 값을 반환 그런 요소가 없다면 undefined를 반환
+
+- findIndex() 메서드는 주어진 판별 함수를 만족하는 배열의 첫 번째 요소에 대한 인덱스를 반환 만족하는 요소가 없으면 -1 반환
+
+```js
+// * find()
+const arr = [5, 12, 15, 180, 21]
+
+const found = arr.find(element => element > 10)
+
+console.log(found) // 12
+
+// callback : 배열의 각 값에 대해 실행할 함수. 아래의 세 인자를 받습니다.
+// element : 콜백함수에서 처리할 현재 요소
+// index (Optional) : 처리할 현재 요소의 인덱스
+// array (Optional) : find 함수를 호출한 배열
+// thisArg (Optional) : callback을 실행할 때 this로 사용할 값
+
+
+// * findIndex()
+
+const arr1 = [5, 12, 15, 130, 21]
+
+const isLargeNumber = (element) => element > 13;
+
+console.log(array1.findIndex(isLargeNumber)); // 3 = 배열의 요소 [3] = 130
+
+```
+
+## 8) map()
+
+- 배열 내의 모든 요소 각각에 대하여 주어진 함수를 호출한 결과를 보아 새로운 값으로 반환
+
+```js
+const arr = [1, 2, 4, 9, 10]
+
+const map1 = arr.map(x => x * 2) //콜백함수 인자 호출
+
+console.log(map1)
+// [2,4,8,18,20]
+```
+
+## 9) reduce()
+
+- 배열의 각요소에 대해 주어진 함수를 실행하고 하나의 결과 값을 반환
+
+```js
+
+const arr = [1, 2, 3];
+const reducer = (accumulator, currentValue) => accumulator + currentValue;
+
+// 1 + 2 + 3
+console.log(arr.reduce(reducer));
+//6
+
+// 5 + 6
+console.log(arr.reduce(reducer, 5));
+// 11
+
+// 함수 reducer는 네 개의 인자를 가짐.
+// 1. 누산(acc)
+// 2. 현재 값(cur)
+// 3. 현재 인덱스(idx)
+// 4. 원본 배열(src)
+// 함수의 반환 값은 acc에 할당되고, acc는 순회 중 유지되므로 결국 하나 값으로 나옴.
+
+
+//* reduce() 작동 원리
+[0, 1, 2, 3, 4].reduce(function (accumulator, currentValue, currentIndex, array) {
+    return accumulator + currentValue;
+});
+
+```
+
+![img_1.png](img_1.png)
Index: src/210202/repeat-test/RepeatFindTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/repeat-test/RepeatFindTest.js b/src/210202/repeat-test/RepeatFindTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/repeat-test/RepeatFindTest.js	
@@ -0,0 +1,32 @@
+const RepeatFindTest = () => {
+    let seq = [1, 2, 3, 4, 5]
+    let firstFind = seq.find(findFunc)
+
+
+
+    function findFunc(value) {
+        return value>3 // value가 3보다 다음으로 큰 값을 찾아 준다.
+    }
+    console.log("After find() : " + firstFind)
+
+    let firstFindIdx = seq.findIndex(findIdxFunc)
+
+    function findIdxFunc(value){
+        return value>4
+    }
+
+    console.log("After findIdx() : " + firstFindIdx)
+    // value가 다음으로 배열 길이 값[4]을 찾아 준다
+
+
+
+
+    return (
+        <div className="RepeatFindTest">
+            <p>
+                array-test : RepeatFindTest
+            </p>
+        </div>
+    )
+}
+export default RepeatFindTest
\ No newline at end of file
Index: src/210202/repeat-test/RepeatSomeTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/repeat-test/RepeatSomeTest.js b/src/210202/repeat-test/RepeatSomeTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/repeat-test/RepeatSomeTest.js	
@@ -0,0 +1,23 @@
+const RepeatSomeTest = () => {
+    let seq = [1, 2, 3, 4, 5]
+    let orTestSuccess = seq.some(orTestFunc)
+
+
+
+    function orTestFunc(value) {
+        return value>3  // or 연산하고 비슷함 하나라도 유효하면 true 다만, 값의 크기보다 이상일 땐 false 반환
+    }
+    console.log("After some() : " + orTestSuccess)
+
+
+
+
+    return (
+        <div className="RepeatSomeTest">
+            <p>
+                array-test : RepeatSomeTest
+            </p>
+        </div>
+    )
+}
+export default RepeatSomeTest
\ No newline at end of file
Index: src/210202/repeat-test/RepeatMapTest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/210202/repeat-test/RepeatMapTest.js b/src/210202/repeat-test/RepeatMapTest.js
new file mode 100644
--- /dev/null	
+++ b/src/210202/repeat-test/RepeatMapTest.js	
@@ -0,0 +1,22 @@
+const RepeatMapTest = () => {
+    let seq = [1, 2, 3, 4, 5]
+    let seqSquare = seq.map(squareFunc)
+    // map은 보통 연산 시 활용하는 녀석으로
+    // seq 배열에 있는 모든 요소에 squareFunc()을 적용한다.
+    // 복습 노트 작성
+    function squareFunc(value) {
+        return value * value
+    }
+
+    console.log("seq : " + seq)
+    console.log("seqSquare : " + seqSquare)
+
+    return (
+        <div className="RepeatMapTest">
+            <p>
+                array-test : RepeatMapTest
+            </p>
+        </div>
+    )
+}
+export default RepeatMapTest
\ No newline at end of file
diff --git a/src/210201/Homework/Homework3.js b/src/210201/Homework/Homework3.js
new file mode 100644
